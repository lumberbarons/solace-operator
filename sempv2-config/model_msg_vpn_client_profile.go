/*
 * SEMP (Solace Element Management Protocol)
 *
 * SEMP (starting in `v2`, see note 1) is a RESTful API for configuring, monitoring, and administering a Solace PubSub+ broker.  SEMP uses URIs to address manageable **resources** of the Solace PubSub+ broker. Resources are individual **objects**, **collections** of objects, or (exclusively in the action API) **actions**. This document applies to the following API:   API|Base Path|Purpose|Comments :---|:---|:---|:--- Configuration|/SEMP/v2/config|Reading and writing config state|See note 2    The following APIs are also available:   API|Base Path|Purpose|Comments :---|:---|:---|:--- Action|/SEMP/v2/action|Performing actions|See note 2 Monitoring|/SEMP/v2/monitor|Querying operational parameters|See note 2    Resources are always nouns, with individual objects being singular and collections being plural.  Objects within a collection are identified by an `obj-id`, which follows the collection name with the form `collection-name/obj-id`.  Actions within an object are identified by an `action-id`, which follows the object name with the form `obj-id/action-id`.  Some examples:  ``` /SEMP/v2/config/msgVpns                        ; MsgVpn collection /SEMP/v2/config/msgVpns/a                      ; MsgVpn object named \"a\" /SEMP/v2/config/msgVpns/a/queues               ; Queue collection in MsgVpn \"a\" /SEMP/v2/config/msgVpns/a/queues/b             ; Queue object named \"b\" in MsgVpn \"a\" /SEMP/v2/action/msgVpns/a/queues/b/startReplay ; Action that starts a replay on Queue \"b\" in MsgVpn \"a\" /SEMP/v2/monitor/msgVpns/a/clients             ; Client collection in MsgVpn \"a\" /SEMP/v2/monitor/msgVpns/a/clients/c           ; Client object named \"c\" in MsgVpn \"a\" ```  ## Collection Resources  Collections are unordered lists of objects (unless described as otherwise), and are described by JSON arrays. Each item in the array represents an object in the same manner as the individual object would normally be represented. In the configuration API, the creation of a new object is done through its collection resource.  ## Object and Action Resources  Objects are composed of attributes, actions, collections, and other objects. They are described by JSON objects as name/value pairs. The collections and actions of an object are not contained directly in the object's JSON content; rather the content includes an attribute containing a URI which points to the collections and actions. These contained resources must be managed through this URI. At a minimum, every object has one or more identifying attributes, and its own `uri` attribute which contains the URI pointing to itself.  Actions are also composed of attributes, and are described by JSON objects as name/value pairs. Unlike objects, however, they are not members of a collection and cannot be retrieved, only performed. Actions only exist in the action API.  Attributes in an object or action may have any combination of the following properties:   Property|Meaning|Comments :---|:---|:--- Identifying|Attribute is involved in unique identification of the object, and appears in its URI| Required|Attribute must be provided in the request| Read-Only|Attribute can only be read, not written.|See note 3 Write-Only|Attribute can only be written, not read, unless the attribute is also opaque|See the documentation for the opaque property Requires-Disable|Attribute can only be changed when object is disabled| Deprecated|Attribute is deprecated, and will disappear in the next SEMP version| Opaque|Attribute can be set or retrieved in opaque form when the `opaquePassword` query parameter is present|See the `opaquePassword` query parameter documentation    In some requests, certain attributes may only be provided in certain combinations with other attributes:   Relationship|Meaning :---|:--- Requires|Attribute may only be changed by a request if a particular attribute or combination of attributes is also provided in the request Conflicts|Attribute may only be provided in a request if a particular attribute or combination of attributes is not also provided in the request    In the monitoring API, any non-identifying attribute may not be returned in a GET.  ## HTTP Methods  The following HTTP methods manipulate resources in accordance with these general principles. Note that some methods are only used in certain APIs:   Method|Resource|Meaning|Request Body|Response Body|Missing Request Attributes :---|:---|:---|:---|:---|:--- POST|Collection|Create object|Initial attribute values|Object attributes and metadata|Set to default PUT|Object|Create or replace object (see note 5)|New attribute values|Object attributes and metadata|Set to default, with certain exceptions (see note 4) PUT|Action|Performs action|Action arguments|Action metadata|N/A PATCH|Object|Update object|New attribute values|Object attributes and metadata|unchanged DELETE|Object|Delete object|Empty|Object metadata|N/A GET|Object|Get object|Empty|Object attributes and metadata|N/A GET|Collection|Get collection|Empty|Object attributes and collection metadata|N/A    ## Common Query Parameters  The following are some common query parameters that are supported by many method/URI combinations. Individual URIs may document additional parameters. Note that multiple query parameters can be used together in a single URI, separated by the ampersand character. For example:  ``` ; Request for the MsgVpns collection using two hypothetical query parameters ; \"q1\" and \"q2\" with values \"val1\" and \"val2\" respectively /SEMP/v2/config/msgVpns?q1=val1&q2=val2 ```  ### select  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. Use this query parameter to limit the size of the returned data for each returned object, return only those fields that are desired, or exclude fields that are not desired.  The value of `select` is a comma-separated list of attribute names. If the list contains attribute names that are not prefaced by `-`, only those attributes are included in the response. If the list contains attribute names that are prefaced by `-`, those attributes are excluded from the response. If the list contains both types, then the difference of the first set of attributes and the second set of attributes is returned. If the list is empty (i.e. `select=`), no attributes are returned.  All attributes that are prefaced by `-` must follow all attributes that are not prefaced by `-`. In addition, each attribute name in the list must match at least one attribute in the object.  Names may include the `*` wildcard (zero or more characters). Nested attribute names are supported using periods (e.g. `parentName.childName`).  Some examples:  ``` ; List of all MsgVpn names /SEMP/v2/config/msgVpns?select=msgVpnName ; List of all MsgVpn and their attributes except for their names /SEMP/v2/config/msgVpns?select=-msgVpnName ; Authentication attributes of MsgVpn \"finance\" /SEMP/v2/config/msgVpns/finance?select=authentication* ; All attributes of MsgVpn \"finance\" except for authentication attributes /SEMP/v2/config/msgVpns/finance?select=-authentication* ; Access related attributes of Queue \"orderQ\" of MsgVpn \"finance\" /SEMP/v2/config/msgVpns/finance/queues/orderQ?select=owner,permission ```  ### where  Include in the response only objects where certain conditions are true. Use this query parameter to limit which objects are returned to those whose attribute values meet the given conditions.  The value of `where` is a comma-separated list of expressions. All expressions must be true for the object to be included in the response. Each expression takes the form:  ``` expression  = attribute-name OP value OP          = '==' | '!=' | '&lt;' | '&gt;' | '&lt;=' | '&gt;=' ```  `value` may be a number, string, `true`, or `false`, as appropriate for the type of `attribute-name`. Greater-than and less-than comparisons only work for numbers. A `*` in a string `value` is interpreted as a wildcard (zero or more characters). Some examples:  ``` ; Only enabled MsgVpns /SEMP/v2/config/msgVpns?where=enabled==true ; Only MsgVpns using basic non-LDAP authentication /SEMP/v2/config/msgVpns?where=authenticationBasicEnabled==true,authenticationBasicType!=ldap ; Only MsgVpns that allow more than 100 client connections /SEMP/v2/config/msgVpns?where=maxConnectionCount>100 ; Only MsgVpns with msgVpnName starting with \"B\": /SEMP/v2/config/msgVpns?where=msgVpnName==B* ```  ### count  Limit the count of objects in the response. This can be useful to limit the size of the response for large collections. The minimum value for `count` is `1` and the default is `10`. There is also a per-collection maximum value to limit request handling time. For example:  ``` ; Up to 25 MsgVpns /SEMP/v2/config/msgVpns?count=25 ```  ### cursor  The cursor, or position, for the next page of objects. Cursors are opaque data that should not be created or interpreted by SEMP clients, and should only be used as described below.  When a request is made for a collection and there may be additional objects available for retrieval that are not included in the initial response, the response will include a `cursorQuery` field containing a cursor. The value of this field can be specified in the `cursor` query parameter of a subsequent request to retrieve the next page of objects. For convenience, an appropriate URI is constructed automatically by the broker and included in the `nextPageUri` field of the response. This URI can be used directly to retrieve the next page of objects.  ### opaquePassword  Attributes with the opaque property are also write-only and so cannot normally be retrieved in a GET. However, when a password is provided in the `opaquePassword` query parameter, attributes with the opaque property are retrieved in a GET in opaque form, encrypted with this password. The query parameter can also be used on a POST, PATCH, or PUT to set opaque attributes using opaque attribute values retrieved in a GET, so long as:  1. the same password that was used to retrieve the opaque attribute values is provided; and  2. the broker to which the request is being sent has the same major and minor SEMP version as the broker that produced the opaque attribute values.  The password provided in the query parameter must be a minimum of 8 characters and a maximum of 128 characters.  The query parameter can only be used in the configuration API, and only over HTTPS.  ## Authentication  When a client makes its first SEMPv2 request, it must supply a username and password using HTTP Basic authentication.  If authentication is successful, the broker returns a cookie containing a session key. The client can omit the username and password from subsequent requests, because the broker now uses the session cookie for authentication instead. When the session expires or is deleted, the client must provide the username and password again, and the broker creates a new session.  There are a limited number of session slots available on the broker. The broker returns 529 No SEMP Session Available if it is not able to allocate a session. For this reason, all clients that use SEMPv2 should support cookies.  If certain attributes—such as a user's password—are changed, the broker automatically deletes the affected sessions. These attributes are documented below. However, changes in external user configuration data stored on a RADIUS or LDAP server do not trigger the broker to delete the associated session(s), therefore you must do this manually, if required.  A client can retrieve its current session information using the /about/user endpoint, delete its own session using the /about/user/logout endpoint, and manage all sessions using the /sessions endpoint.  ## Help  Visit [our website](https://solace.com) to learn more about Solace.  You can also download the SEMP API specifications by clicking [here](https://solace.com/downloads/).  If you need additional support, please contact us at [support@solace.com](mailto:support@solace.com).  ## Notes  Note|Description :---:|:--- 1|This specification defines SEMP starting in \"v2\", and not the original SEMP \"v1\" interface. Request and response formats between \"v1\" and \"v2\" are entirely incompatible, although both protocols share a common port configuration on the Solace PubSub+ broker. They are differentiated by the initial portion of the URI path, one of either \"/SEMP/\" or \"/SEMP/v2/\" 2|This API is partially implemented. Only a subset of all objects are available. 3|Read-only attributes may appear in POST and PUT/PATCH requests. However, if a read-only attribute is not marked as identifying, it will be ignored during a PUT/PATCH. 4|On a PUT, if the SEMP user is not authorized to modify the attribute, its value is left unchanged rather than set to default. In addition, the values of write-only attributes are not set to their defaults on a PUT, except in the following two cases: there is a mutual requires relationship with another non-write-only attribute, both attributes are absent from the request, and the non-write-only attribute is not currently set to its default value; or the attribute is also opaque and the `opaquePassword` query parameter is provided in the request. 5|On a PUT, if the object does not exist, it is created first.
 *
 * API version: 2.21
 * Contact: support@solace.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type MsgVpnClientProfile struct {
	// Enable or disable allowing Bridge clients using the Client Profile to connect. Changing this setting does not affect existing Bridge client connections. The default value is `false`.
	AllowBridgeConnectionsEnabled bool `json:"allowBridgeConnectionsEnabled,omitempty"`
	// Enable or disable allowing clients using the Client Profile to bind to endpoints with the cut-through forwarding delivery mode. Changing this value does not affect existing client connections. The default value is `false`.
	AllowCutThroughForwardingEnabled bool `json:"allowCutThroughForwardingEnabled,omitempty"`
	// The types of Queues and Topic Endpoints that clients using the client-profile can create. Changing this value does not affect existing client connections. The default value is `\"all\"`. The allowed values and their meaning are:  <pre> \"all\" - Client can create any type of endpoint. \"durable\" - Client can create only durable endpoints. \"non-durable\" - Client can create only non-durable endpoints. </pre>  Available since 2.14.
	AllowGuaranteedEndpointCreateDurability string `json:"allowGuaranteedEndpointCreateDurability,omitempty"`
	// Enable or disable allowing clients using the Client Profile to create topic endponts or queues. Changing this value does not affect existing client connections. The default value is `false`.
	AllowGuaranteedEndpointCreateEnabled bool `json:"allowGuaranteedEndpointCreateEnabled,omitempty"`
	// Enable or disable allowing clients using the Client Profile to receive guaranteed messages. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowGuaranteedMsgReceiveEnabled bool `json:"allowGuaranteedMsgReceiveEnabled,omitempty"`
	// Enable or disable allowing clients using the Client Profile to send guaranteed messages. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowGuaranteedMsgSendEnabled bool `json:"allowGuaranteedMsgSendEnabled,omitempty"`
	// Enable or disable allowing shared subscriptions. Changing this setting does not affect existing subscriptions. The default value is `false`. Available since 2.11.
	AllowSharedSubscriptionsEnabled bool `json:"allowSharedSubscriptionsEnabled,omitempty"`
	// Enable or disable allowing clients using the Client Profile to establish transacted sessions. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowTransactedSessionsEnabled bool `json:"allowTransactedSessionsEnabled,omitempty"`
	// The name of a queue to copy settings from when a new queue is created by a client using the Client Profile. The referenced queue must exist in the Message VPN. The default value is `\"\"`. Deprecated since 2.14. This attribute has been replaced with `apiQueueManagementCopyFromOnCreateTemplateName`.
	ApiQueueManagementCopyFromOnCreateName string `json:"apiQueueManagementCopyFromOnCreateName,omitempty"`
	// The name of a queue template to copy settings from when a new queue is created by a client using the Client Profile. If the referenced queue template does not exist, queue creation will fail when it tries to resolve this template. The default value is `\"\"`. Available since 2.14.
	ApiQueueManagementCopyFromOnCreateTemplateName string `json:"apiQueueManagementCopyFromOnCreateTemplateName,omitempty"`
	// The name of a topic endpoint to copy settings from when a new topic endpoint is created by a client using the Client Profile. The referenced topic endpoint must exist in the Message VPN. The default value is `\"\"`. Deprecated since 2.14. This attribute has been replaced with `apiTopicEndpointManagementCopyFromOnCreateTemplateName`.
	ApiTopicEndpointManagementCopyFromOnCreateName string `json:"apiTopicEndpointManagementCopyFromOnCreateName,omitempty"`
	// The name of a topic endpoint template to copy settings from when a new topic endpoint is created by a client using the Client Profile. If the referenced topic endpoint template does not exist, topic endpoint creation will fail when it tries to resolve this template. The default value is `\"\"`. Available since 2.14.
	ApiTopicEndpointManagementCopyFromOnCreateTemplateName string `json:"apiTopicEndpointManagementCopyFromOnCreateTemplateName,omitempty"`
	// The name of the Client Profile.
	ClientProfileName string `json:"clientProfileName,omitempty"`
	// Enable or disable allowing clients using the Client Profile to use compression. The default value is `true`. Available since 2.10.
	CompressionEnabled bool `json:"compressionEnabled,omitempty"`
	// The amount of time to delay the delivery of messages to clients using the Client Profile after the initial message has been delivered (the eliding delay interval), in milliseconds. A value of 0 means there is no delay in delivering messages to clients. The default value is `0`.
	ElidingDelay int64 `json:"elidingDelay,omitempty"`
	// Enable or disable message eliding for clients using the Client Profile. The default value is `false`.
	ElidingEnabled bool `json:"elidingEnabled,omitempty"`
	// The maximum number of topics tracked for message eliding per client connection using the Client Profile. The default value is `256`.
	ElidingMaxTopicCount                                     int64                    `json:"elidingMaxTopicCount,omitempty"`
	EventClientProvisionedEndpointSpoolUsageThreshold        *EventThresholdByPercent `json:"eventClientProvisionedEndpointSpoolUsageThreshold,omitempty"`
	EventConnectionCountPerClientUsernameThreshold           *EventThreshold          `json:"eventConnectionCountPerClientUsernameThreshold,omitempty"`
	EventEgressFlowCountThreshold                            *EventThreshold          `json:"eventEgressFlowCountThreshold,omitempty"`
	EventEndpointCountPerClientUsernameThreshold             *EventThreshold          `json:"eventEndpointCountPerClientUsernameThreshold,omitempty"`
	EventIngressFlowCountThreshold                           *EventThreshold          `json:"eventIngressFlowCountThreshold,omitempty"`
	EventServiceSmfConnectionCountPerClientUsernameThreshold *EventThreshold          `json:"eventServiceSmfConnectionCountPerClientUsernameThreshold,omitempty"`
	EventServiceWebConnectionCountPerClientUsernameThreshold *EventThreshold          `json:"eventServiceWebConnectionCountPerClientUsernameThreshold,omitempty"`
	EventSubscriptionCountThreshold                          *EventThreshold          `json:"eventSubscriptionCountThreshold,omitempty"`
	EventTransactedSessionCountThreshold                     *EventThreshold          `json:"eventTransactedSessionCountThreshold,omitempty"`
	EventTransactionCountThreshold                           *EventThreshold          `json:"eventTransactionCountThreshold,omitempty"`
	// The maximum number of client connections per Client Username using the Client Profile. The default is the maximum value supported by the platform.
	MaxConnectionCountPerClientUsername int64 `json:"maxConnectionCountPerClientUsername,omitempty"`
	// The maximum number of transmit flows that can be created by one client using the Client Profile. The default value is `1000`.
	MaxEgressFlowCount int64 `json:"maxEgressFlowCount,omitempty"`
	// The maximum number of queues and topic endpoints that can be created by clients with the same Client Username using the Client Profile. The default value is `1000`.
	MaxEndpointCountPerClientUsername int64 `json:"maxEndpointCountPerClientUsername,omitempty"`
	// The maximum number of receive flows that can be created by one client using the Client Profile. The default value is `1000`.
	MaxIngressFlowCount int64 `json:"maxIngressFlowCount,omitempty"`
	// The maximum number of publisher and consumer messages combined that is allowed within a transaction for each client associated with this client-profile. Exceeding this limit will result in a transaction prepare or commit failure. Changing this value during operation will not affect existing sessions. It is only validated at transaction creation time. Large transactions consume more resources and are more likely to require retrieving messages from the ADB or from disk to process the transaction prepare or commit requests. The transaction processing rate may diminish if a large number of messages must be retrieved from the ADB or from disk. Care should be taken to not use excessively large transactions needlessly to avoid exceeding resource limits and to avoid reducing the overall broker performance. The default value is `256`. Available since 2.20.
	MaxMsgsPerTransaction int32 `json:"maxMsgsPerTransaction,omitempty"`
	// The maximum number of subscriptions per client using the Client Profile. This limit is not enforced when a client adds a subscription to an endpoint, except for MQTT QoS 1 subscriptions. In addition, this limit is not enforced when a subscription is added using a management interface, such as CLI or SEMP. The default varies by platform.
	MaxSubscriptionCount int64 `json:"maxSubscriptionCount,omitempty"`
	// The maximum number of transacted sessions that can be created by one client using the Client Profile. The default value is `10`.
	MaxTransactedSessionCount int64 `json:"maxTransactedSessionCount,omitempty"`
	// The maximum number of transactions that can be created by one client using the Client Profile. The default varies by platform.
	MaxTransactionCount int64 `json:"maxTransactionCount,omitempty"`
	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`
	// The maximum depth of the \"Control 1\" (C-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueControl1MaxDepth int32 `json:"queueControl1MaxDepth,omitempty"`
	// The number of messages that are always allowed entry into the \"Control 1\" (C-1) priority queue, regardless of the `queueControl1MaxDepth` value. The default value is `4`.
	QueueControl1MinMsgBurst int32 `json:"queueControl1MinMsgBurst,omitempty"`
	// The maximum depth of the \"Direct 1\" (D-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueDirect1MaxDepth int32 `json:"queueDirect1MaxDepth,omitempty"`
	// The number of messages that are always allowed entry into the \"Direct 1\" (D-1) priority queue, regardless of the `queueDirect1MaxDepth` value. The default value is `4`.
	QueueDirect1MinMsgBurst int32 `json:"queueDirect1MinMsgBurst,omitempty"`
	// The maximum depth of the \"Direct 2\" (D-2) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueDirect2MaxDepth int32 `json:"queueDirect2MaxDepth,omitempty"`
	// The number of messages that are always allowed entry into the \"Direct 2\" (D-2) priority queue, regardless of the `queueDirect2MaxDepth` value. The default value is `4`.
	QueueDirect2MinMsgBurst int32 `json:"queueDirect2MinMsgBurst,omitempty"`
	// The maximum depth of the \"Direct 3\" (D-3) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueDirect3MaxDepth int32 `json:"queueDirect3MaxDepth,omitempty"`
	// The number of messages that are always allowed entry into the \"Direct 3\" (D-3) priority queue, regardless of the `queueDirect3MaxDepth` value. The default value is `4`.
	QueueDirect3MinMsgBurst int32 `json:"queueDirect3MinMsgBurst,omitempty"`
	// The maximum depth of the \"Guaranteed 1\" (G-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueGuaranteed1MaxDepth int32 `json:"queueGuaranteed1MaxDepth,omitempty"`
	// The number of messages that are always allowed entry into the \"Guaranteed 1\" (G-3) priority queue, regardless of the `queueGuaranteed1MaxDepth` value. The default value is `255`.
	QueueGuaranteed1MinMsgBurst int32 `json:"queueGuaranteed1MinMsgBurst,omitempty"`
	// Enable or disable the sending of a negative acknowledgement (NACK) to a client using the Client Profile when discarding a guaranteed message due to no matching subscription found. The default value is `false`. Available since 2.2.
	RejectMsgToSenderOnNoSubscriptionMatchEnabled bool `json:"rejectMsgToSenderOnNoSubscriptionMatchEnabled,omitempty"`
	// Enable or disable allowing clients using the Client Profile to connect to the Message VPN when its replication state is standby. The default value is `false`.
	ReplicationAllowClientConnectWhenStandbyEnabled bool `json:"replicationAllowClientConnectWhenStandbyEnabled,omitempty"`
	// The minimum client keepalive timeout which will be enforced for client connections. The default value is `30`. Available since 2.19.
	ServiceMinKeepaliveTimeout int32 `json:"serviceMinKeepaliveTimeout,omitempty"`
	// The maximum number of SMF client connections per Client Username using the Client Profile. The default is the maximum value supported by the platform.
	ServiceSmfMaxConnectionCountPerClientUsername int64 `json:"serviceSmfMaxConnectionCountPerClientUsername,omitempty"`
	// Enable or disable the enforcement of a minimum keepalive timeout for SMF clients. The default value is `false`. Available since 2.19.
	ServiceSmfMinKeepaliveEnabled bool `json:"serviceSmfMinKeepaliveEnabled,omitempty"`
	// The timeout for inactive Web Transport client sessions using the Client Profile, in seconds. The default value is `30`.
	ServiceWebInactiveTimeout int64 `json:"serviceWebInactiveTimeout,omitempty"`
	// The maximum number of Web Transport client connections per Client Username using the Client Profile. The default is the maximum value supported by the platform.
	ServiceWebMaxConnectionCountPerClientUsername int64 `json:"serviceWebMaxConnectionCountPerClientUsername,omitempty"`
	// The maximum Web Transport payload size before fragmentation occurs for clients using the Client Profile, in bytes. The size of the header is not included. The default value is `1000000`.
	ServiceWebMaxPayload int64 `json:"serviceWebMaxPayload,omitempty"`
	// The TCP initial congestion window size for clients using the Client Profile, in multiples of the TCP Maximum Segment Size (MSS). Changing the value from its default of 2 results in non-compliance with RFC 2581. Contact Solace Support before changing this value. The default value is `2`.
	TcpCongestionWindowSize int64 `json:"tcpCongestionWindowSize,omitempty"`
	// The number of TCP keepalive retransmissions to a client using the Client Profile before declaring that it is not available. The default value is `5`.
	TcpKeepaliveCount int64 `json:"tcpKeepaliveCount,omitempty"`
	// The amount of time a client connection using the Client Profile must remain idle before TCP begins sending keepalive probes, in seconds. The default value is `3`.
	TcpKeepaliveIdleTime int64 `json:"tcpKeepaliveIdleTime,omitempty"`
	// The amount of time between TCP keepalive retransmissions to a client using the Client Profile when no acknowledgement is received, in seconds. The default value is `1`.
	TcpKeepaliveInterval int64 `json:"tcpKeepaliveInterval,omitempty"`
	// The TCP maximum segment size for clients using the Client Profile, in bytes. Changes are applied to all existing connections. The default value is `1460`.
	TcpMaxSegmentSize int64 `json:"tcpMaxSegmentSize,omitempty"`
	// The TCP maximum window size for clients using the Client Profile, in kilobytes. Changes are applied to all existing connections. The default value is `256`.
	TcpMaxWindowSize int64 `json:"tcpMaxWindowSize,omitempty"`
	// Enable or disable allowing a client using the Client Profile to downgrade an encrypted connection to plain text. The default value is `true`. Available since 2.8.
	TlsAllowDowngradeToPlainTextEnabled bool `json:"tlsAllowDowngradeToPlainTextEnabled,omitempty"`
}
