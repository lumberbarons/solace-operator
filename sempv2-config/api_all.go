/*
 * SEMP (Solace Element Management Protocol)
 *
 * SEMP (starting in `v2`, see note 1) is a RESTful API for configuring, monitoring, and administering a Solace PubSub+ broker.  SEMP uses URIs to address manageable **resources** of the Solace PubSub+ broker. Resources are individual **objects**, **collections** of objects, or (exclusively in the action API) **actions**. This document applies to the following API:   API|Base Path|Purpose|Comments :---|:---|:---|:--- Configuration|/SEMP/v2/config|Reading and writing config state|See note 2    The following APIs are also available:   API|Base Path|Purpose|Comments :---|:---|:---|:--- Action|/SEMP/v2/action|Performing actions|See note 2 Monitoring|/SEMP/v2/monitor|Querying operational parameters|See note 2    Resources are always nouns, with individual objects being singular and collections being plural.  Objects within a collection are identified by an `obj-id`, which follows the collection name with the form `collection-name/obj-id`.  Actions within an object are identified by an `action-id`, which follows the object name with the form `obj-id/action-id`.  Some examples:  ``` /SEMP/v2/config/msgVpns                        ; MsgVpn collection /SEMP/v2/config/msgVpns/a                      ; MsgVpn object named \"a\" /SEMP/v2/config/msgVpns/a/queues               ; Queue collection in MsgVpn \"a\" /SEMP/v2/config/msgVpns/a/queues/b             ; Queue object named \"b\" in MsgVpn \"a\" /SEMP/v2/action/msgVpns/a/queues/b/startReplay ; Action that starts a replay on Queue \"b\" in MsgVpn \"a\" /SEMP/v2/monitor/msgVpns/a/clients             ; Client collection in MsgVpn \"a\" /SEMP/v2/monitor/msgVpns/a/clients/c           ; Client object named \"c\" in MsgVpn \"a\" ```  ## Collection Resources  Collections are unordered lists of objects (unless described as otherwise), and are described by JSON arrays. Each item in the array represents an object in the same manner as the individual object would normally be represented. In the configuration API, the creation of a new object is done through its collection resource.  ## Object and Action Resources  Objects are composed of attributes, actions, collections, and other objects. They are described by JSON objects as name/value pairs. The collections and actions of an object are not contained directly in the object's JSON content; rather the content includes an attribute containing a URI which points to the collections and actions. These contained resources must be managed through this URI. At a minimum, every object has one or more identifying attributes, and its own `uri` attribute which contains the URI pointing to itself.  Actions are also composed of attributes, and are described by JSON objects as name/value pairs. Unlike objects, however, they are not members of a collection and cannot be retrieved, only performed. Actions only exist in the action API.  Attributes in an object or action may have any combination of the following properties:   Property|Meaning|Comments :---|:---|:--- Identifying|Attribute is involved in unique identification of the object, and appears in its URI| Required|Attribute must be provided in the request| Read-Only|Attribute can only be read, not written.|See note 3 Write-Only|Attribute can only be written, not read, unless the attribute is also opaque|See the documentation for the opaque property Requires-Disable|Attribute can only be changed when object is disabled| Deprecated|Attribute is deprecated, and will disappear in the next SEMP version| Opaque|Attribute can be set or retrieved in opaque form when the `opaquePassword` query parameter is present|See the `opaquePassword` query parameter documentation    In some requests, certain attributes may only be provided in certain combinations with other attributes:   Relationship|Meaning :---|:--- Requires|Attribute may only be changed by a request if a particular attribute or combination of attributes is also provided in the request Conflicts|Attribute may only be provided in a request if a particular attribute or combination of attributes is not also provided in the request    In the monitoring API, any non-identifying attribute may not be returned in a GET.  ## HTTP Methods  The following HTTP methods manipulate resources in accordance with these general principles. Note that some methods are only used in certain APIs:   Method|Resource|Meaning|Request Body|Response Body|Missing Request Attributes :---|:---|:---|:---|:---|:--- POST|Collection|Create object|Initial attribute values|Object attributes and metadata|Set to default PUT|Object|Create or replace object (see note 5)|New attribute values|Object attributes and metadata|Set to default, with certain exceptions (see note 4) PUT|Action|Performs action|Action arguments|Action metadata|N/A PATCH|Object|Update object|New attribute values|Object attributes and metadata|unchanged DELETE|Object|Delete object|Empty|Object metadata|N/A GET|Object|Get object|Empty|Object attributes and metadata|N/A GET|Collection|Get collection|Empty|Object attributes and collection metadata|N/A    ## Common Query Parameters  The following are some common query parameters that are supported by many method/URI combinations. Individual URIs may document additional parameters. Note that multiple query parameters can be used together in a single URI, separated by the ampersand character. For example:  ``` ; Request for the MsgVpns collection using two hypothetical query parameters ; \"q1\" and \"q2\" with values \"val1\" and \"val2\" respectively /SEMP/v2/config/msgVpns?q1=val1&q2=val2 ```  ### select  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. Use this query parameter to limit the size of the returned data for each returned object, return only those fields that are desired, or exclude fields that are not desired.  The value of `select` is a comma-separated list of attribute names. If the list contains attribute names that are not prefaced by `-`, only those attributes are included in the response. If the list contains attribute names that are prefaced by `-`, those attributes are excluded from the response. If the list contains both types, then the difference of the first set of attributes and the second set of attributes is returned. If the list is empty (i.e. `select=`), no attributes are returned.  All attributes that are prefaced by `-` must follow all attributes that are not prefaced by `-`. In addition, each attribute name in the list must match at least one attribute in the object.  Names may include the `*` wildcard (zero or more characters). Nested attribute names are supported using periods (e.g. `parentName.childName`).  Some examples:  ``` ; List of all MsgVpn names /SEMP/v2/config/msgVpns?select=msgVpnName ; List of all MsgVpn and their attributes except for their names /SEMP/v2/config/msgVpns?select=-msgVpnName ; Authentication attributes of MsgVpn \"finance\" /SEMP/v2/config/msgVpns/finance?select=authentication* ; All attributes of MsgVpn \"finance\" except for authentication attributes /SEMP/v2/config/msgVpns/finance?select=-authentication* ; Access related attributes of Queue \"orderQ\" of MsgVpn \"finance\" /SEMP/v2/config/msgVpns/finance/queues/orderQ?select=owner,permission ```  ### where  Include in the response only objects where certain conditions are true. Use this query parameter to limit which objects are returned to those whose attribute values meet the given conditions.  The value of `where` is a comma-separated list of expressions. All expressions must be true for the object to be included in the response. Each expression takes the form:  ``` expression  = attribute-name OP value OP          = '==' | '!=' | '&lt;' | '&gt;' | '&lt;=' | '&gt;=' ```  `value` may be a number, string, `true`, or `false`, as appropriate for the type of `attribute-name`. Greater-than and less-than comparisons only work for numbers. A `*` in a string `value` is interpreted as a wildcard (zero or more characters). Some examples:  ``` ; Only enabled MsgVpns /SEMP/v2/config/msgVpns?where=enabled==true ; Only MsgVpns using basic non-LDAP authentication /SEMP/v2/config/msgVpns?where=authenticationBasicEnabled==true,authenticationBasicType!=ldap ; Only MsgVpns that allow more than 100 client connections /SEMP/v2/config/msgVpns?where=maxConnectionCount>100 ; Only MsgVpns with msgVpnName starting with \"B\": /SEMP/v2/config/msgVpns?where=msgVpnName==B* ```  ### count  Limit the count of objects in the response. This can be useful to limit the size of the response for large collections. The minimum value for `count` is `1` and the default is `10`. There is also a per-collection maximum value to limit request handling time. For example:  ``` ; Up to 25 MsgVpns /SEMP/v2/config/msgVpns?count=25 ```  ### cursor  The cursor, or position, for the next page of objects. Cursors are opaque data that should not be created or interpreted by SEMP clients, and should only be used as described below.  When a request is made for a collection and there may be additional objects available for retrieval that are not included in the initial response, the response will include a `cursorQuery` field containing a cursor. The value of this field can be specified in the `cursor` query parameter of a subsequent request to retrieve the next page of objects. For convenience, an appropriate URI is constructed automatically by the broker and included in the `nextPageUri` field of the response. This URI can be used directly to retrieve the next page of objects.  ### opaquePassword  Attributes with the opaque property are also write-only and so cannot normally be retrieved in a GET. However, when a password is provided in the `opaquePassword` query parameter, attributes with the opaque property are retrieved in a GET in opaque form, encrypted with this password. The query parameter can also be used on a POST, PATCH, or PUT to set opaque attributes using opaque attribute values retrieved in a GET, so long as:  1. the same password that was used to retrieve the opaque attribute values is provided; and  2. the broker to which the request is being sent has the same major and minor SEMP version as the broker that produced the opaque attribute values.  The password provided in the query parameter must be a minimum of 8 characters and a maximum of 128 characters.  The query parameter can only be used in the configuration API, and only over HTTPS.  ## Authentication  When a client makes its first SEMPv2 request, it must supply a username and password using HTTP Basic authentication.  If authentication is successful, the broker returns a cookie containing a session key. The client can omit the username and password from subsequent requests, because the broker now uses the session cookie for authentication instead. When the session expires or is deleted, the client must provide the username and password again, and the broker creates a new session.  There are a limited number of session slots available on the broker. The broker returns 529 No SEMP Session Available if it is not able to allocate a session. For this reason, all clients that use SEMPv2 should support cookies.  If certain attributes—such as a user's password—are changed, the broker automatically deletes the affected sessions. These attributes are documented below. However, changes in external user configuration data stored on a RADIUS or LDAP server do not trigger the broker to delete the associated session(s), therefore you must do this manually, if required.  A client can retrieve its current session information using the /about/user endpoint, delete its own session using the /about/user/logout endpoint, and manage all sessions using the /sessions endpoint.  ## Help  Visit [our website](https://solace.com) to learn more about Solace.  You can also download the SEMP API specifications by clicking [here](https://solace.com/downloads/).  If you need additional support, please contact us at [support@solace.com](mailto:support@solace.com).  ## Notes  Note|Description :---:|:--- 1|This specification defines SEMP starting in \"v2\", and not the original SEMP \"v1\" interface. Request and response formats between \"v1\" and \"v2\" are entirely incompatible, although both protocols share a common port configuration on the Solace PubSub+ broker. They are differentiated by the initial portion of the URI path, one of either \"/SEMP/\" or \"/SEMP/v2/\" 2|This API is partially implemented. Only a subset of all objects are available. 3|Read-only attributes may appear in POST and PUT/PATCH requests. However, if a read-only attribute is not marked as identifying, it will be ignored during a PUT/PATCH. 4|On a PUT, if the SEMP user is not authorized to modify the attribute, its value is left unchanged rather than set to default. In addition, the values of write-only attributes are not set to their defaults on a PUT, except in the following two cases: there is a mutual requires relationship with another non-write-only attribute, both attributes are absent from the request, and the non-write-only attribute is not currently set to its default value; or the attribute is also opaque and the `opaquePassword` query parameter is provided in the request. 5|On a PUT, if the object does not exist, it is created first.
 *
 * API version: 2.21
 * Contact: support@solace.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AllApiService AllApi service
type AllApiService service

type AllApiApiCreateCertAuthorityRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *CertAuthority
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateCertAuthorityRequest) Body(body CertAuthority) AllApiApiCreateCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiCreateCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateCertAuthorityRequest) Select_(select_ []string) AllApiApiCreateCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateCertAuthorityRequest) Execute() (CertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateCertAuthorityExecute(r)
}

/*
 * CreateCertAuthority Create a Certificate Authority object.
 * Create a Certificate Authority object. Any attribute missing from the request will be set to its default value.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x|||x|
certContent|||||x|
crlDayList|||||x|
crlTimeList|||||x|
crlUrl|||||x|
ocspNonResponderCertEnabled|||||x|
ocspOverrideUrl|||||x|
ocspTimeout|||||x|
revocationCheckEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
CertAuthority|crlDayList|crlTimeList|
CertAuthority|crlTimeList|crlDayList|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities and domainCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiCreateCertAuthorityRequest
*/
func (a *AllApiService) CreateCertAuthority(ctx _context.Context) AllApiApiCreateCertAuthorityRequest {
	return AllApiApiCreateCertAuthorityRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityResponse
 */
func (a *AllApiService) CreateCertAuthorityExecute(r AllApiApiCreateCertAuthorityRequest) (CertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *CertAuthorityOcspTlsTrustedCommonName
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest) Body(body CertAuthorityOcspTlsTrustedCommonName) AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest) Execute() (CertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateCertAuthorityOcspTlsTrustedCommonNameExecute(r)
}

/*
 * CreateCertAuthorityOcspTlsTrustedCommonName Create an OCSP Responder Trusted Common Name object.
 * Create an OCSP Responder Trusted Common Name object. Any attribute missing from the request will be set to its default value.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x||x||x|
ocspTlsTrustedCommonName|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest
*/
func (a *AllApiService) CreateCertAuthorityOcspTlsTrustedCommonName(ctx _context.Context, certAuthorityName string) AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest {
	return AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityOcspTlsTrustedCommonNameResponse
 */
func (a *AllApiService) CreateCertAuthorityOcspTlsTrustedCommonNameExecute(r AllApiApiCreateCertAuthorityOcspTlsTrustedCommonNameRequest) (CertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityOcspTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateCertAuthorityOcspTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateClientCertAuthorityRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *ClientCertAuthority
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateClientCertAuthorityRequest) Body(body ClientCertAuthority) AllApiApiCreateClientCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateClientCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiCreateClientCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateClientCertAuthorityRequest) Select_(select_ []string) AllApiApiCreateClientCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateClientCertAuthorityRequest) Execute() (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateClientCertAuthorityExecute(r)
}

/*
 * CreateClientCertAuthority Create a Client Certificate Authority object.
 * Create a Client Certificate Authority object. Any attribute missing from the request will be set to its default value.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
ClientCertAuthority|crlDayList|crlTimeList|
ClientCertAuthority|crlTimeList|crlDayList|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiCreateClientCertAuthorityRequest
*/
func (a *AllApiService) CreateClientCertAuthority(ctx _context.Context) AllApiApiCreateClientCertAuthorityRequest {
	return AllApiApiCreateClientCertAuthorityRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityResponse
 */
func (a *AllApiService) CreateClientCertAuthorityExecute(r AllApiApiCreateClientCertAuthorityRequest) (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateClientCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *ClientCertAuthorityOcspTlsTrustedCommonName
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest) Body(body ClientCertAuthorityOcspTlsTrustedCommonName) AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest) Execute() (ClientCertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateClientCertAuthorityOcspTlsTrustedCommonNameExecute(r)
}

/*
 * CreateClientCertAuthorityOcspTlsTrustedCommonName Create an OCSP Responder Trusted Common Name object.
 * Create an OCSP Responder Trusted Common Name object. Any attribute missing from the request will be set to its default value.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x||x|||
ocspTlsTrustedCommonName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest
*/
func (a *AllApiService) CreateClientCertAuthorityOcspTlsTrustedCommonName(ctx _context.Context, certAuthorityName string) AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	return AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityOcspTlsTrustedCommonNameResponse
 */
func (a *AllApiService) CreateClientCertAuthorityOcspTlsTrustedCommonNameExecute(r AllApiApiCreateClientCertAuthorityOcspTlsTrustedCommonNameRequest) (ClientCertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityOcspTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateClientCertAuthorityOcspTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateDmrClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *DmrCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateDmrClusterRequest) Body(body DmrCluster) AllApiApiCreateDmrClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateDmrClusterRequest) OpaquePassword(opaquePassword string) AllApiApiCreateDmrClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateDmrClusterRequest) Select_(select_ []string) AllApiApiCreateDmrClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateDmrClusterRequest) Execute() (DmrClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateDmrClusterExecute(r)
}

/*
 * CreateDmrCluster Create a Cluster object.
 * Create a Cluster object. Any attribute missing from the request will be set to its default value.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword||||x||x
authenticationClientCertContent||||x||x
authenticationClientCertPassword||||x||
dmrClusterName|x|x||||
nodeName|||x|||
tlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
DmrCluster|authenticationClientCertPassword|authenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiCreateDmrClusterRequest
*/
func (a *AllApiService) CreateDmrCluster(ctx _context.Context) AllApiApiCreateDmrClusterRequest {
	return AllApiApiCreateDmrClusterRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterResponse
 */
func (a *AllApiService) CreateDmrClusterExecute(r AllApiApiCreateDmrClusterRequest) (DmrClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateDmrCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateDmrClusterLinkRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	body           *DmrClusterLink
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateDmrClusterLinkRequest) Body(body DmrClusterLink) AllApiApiCreateDmrClusterLinkRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateDmrClusterLinkRequest) OpaquePassword(opaquePassword string) AllApiApiCreateDmrClusterLinkRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateDmrClusterLinkRequest) Select_(select_ []string) AllApiApiCreateDmrClusterLinkRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateDmrClusterLinkRequest) Execute() (DmrClusterLinkResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateDmrClusterLinkExecute(r)
}

/*
 * CreateDmrClusterLink Create a Link object.
 * Create a Link object. Any attribute missing from the request will be set to its default value.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword||||x||x
dmrClusterName|x||x|||
remoteNodeName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @return AllApiApiCreateDmrClusterLinkRequest
*/
func (a *AllApiService) CreateDmrClusterLink(ctx _context.Context, dmrClusterName string) AllApiApiCreateDmrClusterLinkRequest {
	return AllApiApiCreateDmrClusterLinkRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkResponse
 */
func (a *AllApiService) CreateDmrClusterLinkExecute(r AllApiApiCreateDmrClusterLinkRequest) (DmrClusterLinkResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateDmrClusterLink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateDmrClusterLinkRemoteAddressRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	body           *DmrClusterLinkRemoteAddress
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateDmrClusterLinkRemoteAddressRequest) Body(body DmrClusterLinkRemoteAddress) AllApiApiCreateDmrClusterLinkRemoteAddressRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateDmrClusterLinkRemoteAddressRequest) OpaquePassword(opaquePassword string) AllApiApiCreateDmrClusterLinkRemoteAddressRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateDmrClusterLinkRemoteAddressRequest) Select_(select_ []string) AllApiApiCreateDmrClusterLinkRemoteAddressRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateDmrClusterLinkRemoteAddressRequest) Execute() (DmrClusterLinkRemoteAddressResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateDmrClusterLinkRemoteAddressExecute(r)
}

/*
 * CreateDmrClusterLinkRemoteAddress Create a Remote Address object.
 * Create a Remote Address object. Any attribute missing from the request will be set to its default value.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
dmrClusterName|x||x|||
remoteAddress|x|x||||
remoteNodeName|x||x|||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiCreateDmrClusterLinkRemoteAddressRequest
*/
func (a *AllApiService) CreateDmrClusterLinkRemoteAddress(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiCreateDmrClusterLinkRemoteAddressRequest {
	return AllApiApiCreateDmrClusterLinkRemoteAddressRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkRemoteAddressResponse
 */
func (a *AllApiService) CreateDmrClusterLinkRemoteAddressExecute(r AllApiApiCreateDmrClusterLinkRemoteAddressRequest) (DmrClusterLinkRemoteAddressResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkRemoteAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateDmrClusterLinkRemoteAddress")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	body           *DmrClusterLinkTlsTrustedCommonName
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest) Body(body DmrClusterLinkTlsTrustedCommonName) AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest) Execute() (DmrClusterLinkTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateDmrClusterLinkTlsTrustedCommonNameExecute(r)
}

/*
 * CreateDmrClusterLinkTlsTrustedCommonName Create a Trusted Common Name object.
 * Create a Trusted Common Name object. Any attribute missing from the request will be set to its default value.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
dmrClusterName|x||x||x|
remoteNodeName|x||x||x|
tlsTrustedCommonName|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest
*/
func (a *AllApiService) CreateDmrClusterLinkTlsTrustedCommonName(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest {
	return AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkTlsTrustedCommonNameResponse
 */
func (a *AllApiService) CreateDmrClusterLinkTlsTrustedCommonNameExecute(r AllApiApiCreateDmrClusterLinkTlsTrustedCommonNameRequest) (DmrClusterLinkTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateDmrClusterLinkTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateDomainCertAuthorityRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *DomainCertAuthority
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateDomainCertAuthorityRequest) Body(body DomainCertAuthority) AllApiApiCreateDomainCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateDomainCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiCreateDomainCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateDomainCertAuthorityRequest) Select_(select_ []string) AllApiApiCreateDomainCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateDomainCertAuthorityRequest) Execute() (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateDomainCertAuthorityExecute(r)
}

/*
 * CreateDomainCertAuthority Create a Domain Certificate Authority object.
 * Create a Domain Certificate Authority object. Any attribute missing from the request will be set to its default value.

Certificate Authorities trusted for domain verification.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiCreateDomainCertAuthorityRequest
*/
func (a *AllApiService) CreateDomainCertAuthority(ctx _context.Context) AllApiApiCreateDomainCertAuthorityRequest {
	return AllApiApiCreateDomainCertAuthorityRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return DomainCertAuthorityResponse
 */
func (a *AllApiService) CreateDomainCertAuthorityExecute(r AllApiApiCreateDomainCertAuthorityRequest) (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DomainCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateDomainCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domainCertAuthorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *MsgVpn
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnRequest) Body(body MsgVpn) AllApiApiCreateMsgVpnRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnRequest) Select_(select_ []string) AllApiApiCreateMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnRequest) Execute() (MsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnExecute(r)
}

/*
 * CreateMsgVpn Create a Message VPN object.
 * Create a Message VPN object. Any attribute missing from the request will be set to its default value.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||||x|
msgVpnName|x|x||||
replicationBridgeAuthenticationBasicPassword||||x||x
replicationBridgeAuthenticationClientCertContent||||x||x
replicationBridgeAuthenticationClientCertPassword||||x||
replicationEnabledQueueBehavior||||x||
restTlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiCreateMsgVpnRequest
*/
func (a *AllApiService) CreateMsgVpn(ctx _context.Context) AllApiApiCreateMsgVpnRequest {
	return AllApiApiCreateMsgVpnRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnResponse
 */
func (a *AllApiService) CreateMsgVpnExecute(r AllApiApiCreateMsgVpnRequest) (MsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfileRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnAclProfile
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfileRequest) Body(body MsgVpnAclProfile) AllApiApiCreateMsgVpnAclProfileRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfileRequest) Execute() (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileExecute(r)
}

/*
 * CreateMsgVpnAclProfile Create an ACL Profile object.
 * Create an ACL Profile object. Any attribute missing from the request will be set to its default value.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnAclProfileRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfile(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnAclProfileRequest {
	return AllApiApiCreateMsgVpnAclProfileRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfileExecute(r AllApiApiCreateMsgVpnAclProfileRequest) (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfileClientConnectException
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) Body(body MsgVpnAclProfileClientConnectException) AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) Execute() (MsgVpnAclProfileClientConnectExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileClientConnectExceptionExecute(r)
}

/*
 * CreateMsgVpnAclProfileClientConnectException Create a Client Connect Exception object.
 * Create a Client Connect Exception object. Any attribute missing from the request will be set to its default value.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
clientConnectExceptionAddress|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfileClientConnectException(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest {
	return AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileClientConnectExceptionResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfileClientConnectExceptionExecute(r AllApiApiCreateMsgVpnAclProfileClientConnectExceptionRequest) (MsgVpnAclProfileClientConnectExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileClientConnectExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfileClientConnectException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfilePublishException
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest) Body(body MsgVpnAclProfilePublishException) AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest) Execute() (MsgVpnAclProfilePublishExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfilePublishExceptionExecute(r)
}

/*
 * CreateMsgVpnAclProfilePublishException Create a Publish Topic Exception object.
 * Create a Publish Topic Exception object. Any attribute missing from the request will be set to its default value.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||x|
msgVpnName|x||x||x|
publishExceptionTopic|x|x|||x|
topicSyntax|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfilePublishException(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest {
	return AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilePublishExceptionResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfilePublishExceptionExecute(r AllApiApiCreateMsgVpnAclProfilePublishExceptionRequest) (MsgVpnAclProfilePublishExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilePublishExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfilePublishException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfilePublishTopicException
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) Body(body MsgVpnAclProfilePublishTopicException) AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) Execute() (MsgVpnAclProfilePublishTopicExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfilePublishTopicExceptionExecute(r)
}

/*
 * CreateMsgVpnAclProfilePublishTopicException Create a Publish Topic Exception object.
 * Create a Publish Topic Exception object. Any attribute missing from the request will be set to its default value.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
msgVpnName|x||x|||
publishTopicException|x|x||||
publishTopicExceptionSyntax|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfilePublishTopicException(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest {
	return AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilePublishTopicExceptionResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfilePublishTopicExceptionExecute(r AllApiApiCreateMsgVpnAclProfilePublishTopicExceptionRequest) (MsgVpnAclProfilePublishTopicExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilePublishTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfilePublishTopicException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfileSubscribeException
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) Body(body MsgVpnAclProfileSubscribeException) AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) Execute() (MsgVpnAclProfileSubscribeExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileSubscribeExceptionExecute(r)
}

/*
 * CreateMsgVpnAclProfileSubscribeException Create a Subscribe Topic Exception object.
 * Create a Subscribe Topic Exception object. Any attribute missing from the request will be set to its default value.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||x|
msgVpnName|x||x||x|
subscribeExceptionTopic|x|x|||x|
topicSyntax|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfileSubscribeException(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest {
	return AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeExceptionResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfileSubscribeExceptionExecute(r AllApiApiCreateMsgVpnAclProfileSubscribeExceptionRequest) (MsgVpnAclProfileSubscribeExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfileSubscribeException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfileSubscribeShareNameException
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) Body(body MsgVpnAclProfileSubscribeShareNameException) AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) Execute() (MsgVpnAclProfileSubscribeShareNameExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileSubscribeShareNameExceptionExecute(r)
}

/*
 * CreateMsgVpnAclProfileSubscribeShareNameException Create a Subscribe Share Name Exception object.
 * Create a Subscribe Share Name Exception object. Any attribute missing from the request will be set to its default value.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
msgVpnName|x||x|||
subscribeShareNameException|x|x||||
subscribeShareNameExceptionSyntax|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfileSubscribeShareNameException(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	return AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeShareNameExceptionResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfileSubscribeShareNameExceptionExecute(r AllApiApiCreateMsgVpnAclProfileSubscribeShareNameExceptionRequest) (MsgVpnAclProfileSubscribeShareNameExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeShareNameExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfileSubscribeShareNameException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfileSubscribeTopicException
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) Body(body MsgVpnAclProfileSubscribeTopicException) AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) Execute() (MsgVpnAclProfileSubscribeTopicExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAclProfileSubscribeTopicExceptionExecute(r)
}

/*
 * CreateMsgVpnAclProfileSubscribeTopicException Create a Subscribe Topic Exception object.
 * Create a Subscribe Topic Exception object. Any attribute missing from the request will be set to its default value.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x|||
msgVpnName|x||x|||
subscribeTopicException|x|x||||
subscribeTopicExceptionSyntax|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest
*/
func (a *AllApiService) CreateMsgVpnAclProfileSubscribeTopicException(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest {
	return AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeTopicExceptionResponse
 */
func (a *AllApiService) CreateMsgVpnAclProfileSubscribeTopicExceptionExecute(r AllApiApiCreateMsgVpnAclProfileSubscribeTopicExceptionRequest) (MsgVpnAclProfileSubscribeTopicExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAclProfileSubscribeTopicException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnAuthenticationOauthProvider
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest) Body(body MsgVpnAuthenticationOauthProvider) AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest) Execute() (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
 * CreateMsgVpnAuthenticationOauthProvider Create an OAuth Provider object.
 * Create an OAuth Provider object. Any attribute missing from the request will be set to its default value.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
oauthProviderName|x|x||||
tokenIntrospectionPassword||||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest
*/
func (a *AllApiService) CreateMsgVpnAuthenticationOauthProvider(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest {
	return AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthenticationOauthProviderResponse
 */
func (a *AllApiService) CreateMsgVpnAuthenticationOauthProviderExecute(r AllApiApiCreateMsgVpnAuthenticationOauthProviderRequest) (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnAuthorizationGroupRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnAuthorizationGroup
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnAuthorizationGroupRequest) Body(body MsgVpnAuthorizationGroup) AllApiApiCreateMsgVpnAuthorizationGroupRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnAuthorizationGroupRequest) Select_(select_ []string) AllApiApiCreateMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnAuthorizationGroupRequest) Execute() (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnAuthorizationGroupExecute(r)
}

/*
 * CreateMsgVpnAuthorizationGroup Create an LDAP Authorization Group object.
 * Create an LDAP Authorization Group object. Any attribute missing from the request will be set to its default value.

To use client authorization groups configured on an external LDAP server to provide client authorizations, LDAP Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the LDAP server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authorizationGroupName|x|x||||
msgVpnName|x||x|||
orderAfterAuthorizationGroupName||||x||
orderBeforeAuthorizationGroupName||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnAuthorizationGroupRequest
*/
func (a *AllApiService) CreateMsgVpnAuthorizationGroup(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnAuthorizationGroupRequest {
	return AllApiApiCreateMsgVpnAuthorizationGroupRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthorizationGroupResponse
 */
func (a *AllApiService) CreateMsgVpnAuthorizationGroupExecute(r AllApiApiCreateMsgVpnAuthorizationGroupRequest) (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnBridgeRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnBridge
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnBridgeRequest) Body(body MsgVpnBridge) AllApiApiCreateMsgVpnBridgeRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnBridgeRequest) Select_(select_ []string) AllApiApiCreateMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnBridgeRequest) Execute() (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeExecute(r)
}

/*
 * CreateMsgVpnBridge Create a Bridge object.
 * Create a Bridge object. Any attribute missing from the request will be set to its default value.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
msgVpnName|x||x|||
remoteAuthenticationBasicPassword||||x||x
remoteAuthenticationClientCertContent||||x||x
remoteAuthenticationClientCertPassword||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnBridgeRequest
*/
func (a *AllApiService) CreateMsgVpnBridge(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnBridgeRequest {
	return AllApiApiCreateMsgVpnBridgeRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeResponse
 */
func (a *AllApiService) CreateMsgVpnBridgeExecute(r AllApiApiCreateMsgVpnBridgeRequest) (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	body                *MsgVpnBridgeRemoteMsgVpn
	opaquePassword      *string
	select_             *[]string
}

func (r AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) Body(body MsgVpnBridgeRemoteMsgVpn) AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) Execute() (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
 * CreateMsgVpnBridgeRemoteMsgVpn Create a Remote Message VPN object.
 * Create a Remote Message VPN object. Any attribute missing from the request will be set to its default value.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x|||
bridgeVirtualRouter|x||x|||
msgVpnName|x||x|||
password||||x||x
remoteMsgVpnInterface|x|||||
remoteMsgVpnLocation|x|x||||
remoteMsgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *AllApiService) CreateMsgVpnBridgeRemoteMsgVpn(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest {
	return AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteMsgVpnResponse
 */
func (a *AllApiService) CreateMsgVpnBridgeRemoteMsgVpnExecute(r AllApiApiCreateMsgVpnBridgeRemoteMsgVpnRequest) (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	body                *MsgVpnBridgeRemoteSubscription
	opaquePassword      *string
	select_             *[]string
}

func (r AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) Body(body MsgVpnBridgeRemoteSubscription) AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) Execute() (MsgVpnBridgeRemoteSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeRemoteSubscriptionExecute(r)
}

/*
 * CreateMsgVpnBridgeRemoteSubscription Create a Remote Subscription object.
 * Create a Remote Subscription object. Any attribute missing from the request will be set to its default value.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x|||
bridgeVirtualRouter|x||x|||
deliverAlwaysEnabled||x||||
msgVpnName|x||x|||
remoteSubscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest
*/
func (a *AllApiService) CreateMsgVpnBridgeRemoteSubscription(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest {
	return AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteSubscriptionResponse
 */
func (a *AllApiService) CreateMsgVpnBridgeRemoteSubscriptionExecute(r AllApiApiCreateMsgVpnBridgeRemoteSubscriptionRequest) (MsgVpnBridgeRemoteSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnBridgeRemoteSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	body                *MsgVpnBridgeTlsTrustedCommonName
	opaquePassword      *string
	select_             *[]string
}

func (r AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) Body(body MsgVpnBridgeTlsTrustedCommonName) AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) Execute() (MsgVpnBridgeTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnBridgeTlsTrustedCommonNameExecute(r)
}

/*
 * CreateMsgVpnBridgeTlsTrustedCommonName Create a Trusted Common Name object.
 * Create a Trusted Common Name object. Any attribute missing from the request will be set to its default value.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x||x|
bridgeVirtualRouter|x||x||x|
msgVpnName|x||x||x|
tlsTrustedCommonName|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest
*/
func (a *AllApiService) CreateMsgVpnBridgeTlsTrustedCommonName(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest {
	return AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeTlsTrustedCommonNameResponse
 */
func (a *AllApiService) CreateMsgVpnBridgeTlsTrustedCommonNameExecute(r AllApiApiCreateMsgVpnBridgeTlsTrustedCommonNameRequest) (MsgVpnBridgeTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnBridgeTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnClientProfileRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnClientProfile
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnClientProfileRequest) Body(body MsgVpnClientProfile) AllApiApiCreateMsgVpnClientProfileRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnClientProfileRequest) Select_(select_ []string) AllApiApiCreateMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnClientProfileRequest) Execute() (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnClientProfileExecute(r)
}

/*
 * CreateMsgVpnClientProfile Create a Client Profile object.
 * Create a Client Profile object. Any attribute missing from the request will be set to its default value.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
apiQueueManagementCopyFromOnCreateName|||||x|
apiTopicEndpointManagementCopyFromOnCreateName|||||x|
clientProfileName|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnClientProfileRequest
*/
func (a *AllApiService) CreateMsgVpnClientProfile(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnClientProfileRequest {
	return AllApiApiCreateMsgVpnClientProfileRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientProfileResponse
 */
func (a *AllApiService) CreateMsgVpnClientProfileExecute(r AllApiApiCreateMsgVpnClientProfileRequest) (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnClientUsernameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnClientUsername
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnClientUsernameRequest) Body(body MsgVpnClientUsername) AllApiApiCreateMsgVpnClientUsernameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnClientUsernameRequest) Select_(select_ []string) AllApiApiCreateMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnClientUsernameRequest) Execute() (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnClientUsernameExecute(r)
}

/*
 * CreateMsgVpnClientUsername Create a Client Username object.
 * Create a Client Username object. Any attribute missing from the request will be set to its default value.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientUsername|x|x||||
msgVpnName|x||x|||
password||||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnClientUsernameRequest
*/
func (a *AllApiService) CreateMsgVpnClientUsername(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnClientUsernameRequest {
	return AllApiApiCreateMsgVpnClientUsernameRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientUsernameResponse
 */
func (a *AllApiService) CreateMsgVpnClientUsernameExecute(r AllApiApiCreateMsgVpnClientUsernameRequest) (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDistributedCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnDistributedCache
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnDistributedCacheRequest) Body(body MsgVpnDistributedCache) AllApiApiCreateMsgVpnDistributedCacheRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDistributedCacheRequest) Execute() (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheExecute(r)
}

/*
 * CreateMsgVpnDistributedCache Create a Distributed Cache object.
 * Create a Distributed Cache object. Any attribute missing from the request will be set to its default value.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnDistributedCache|scheduledDeleteMsgDayList|scheduledDeleteMsgTimeList|
MsgVpnDistributedCache|scheduledDeleteMsgTimeList|scheduledDeleteMsgDayList|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnDistributedCacheRequest
*/
func (a *AllApiService) CreateMsgVpnDistributedCache(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnDistributedCacheRequest {
	return AllApiApiCreateMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheResponse
 */
func (a *AllApiService) CreateMsgVpnDistributedCacheExecute(r AllApiApiCreateMsgVpnDistributedCacheRequest) (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDistributedCacheClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	body           *MsgVpnDistributedCacheCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterRequest) Body(body MsgVpnDistributedCacheCluster) AllApiApiCreateMsgVpnDistributedCacheClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterRequest) Execute() (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterExecute(r)
}

/*
 * CreateMsgVpnDistributedCacheCluster Create a Cache Cluster object.
 * Create a Cache Cluster object. Any attribute missing from the request will be set to its default value.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @return AllApiApiCreateMsgVpnDistributedCacheClusterRequest
*/
func (a *AllApiService) CreateMsgVpnDistributedCacheCluster(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiCreateMsgVpnDistributedCacheClusterRequest {
	return AllApiApiCreateMsgVpnDistributedCacheClusterRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterResponse
 */
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterExecute(r AllApiApiCreateMsgVpnDistributedCacheClusterRequest) (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	body           *MsgVpnDistributedCacheClusterGlobalCachingHomeCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Body(body MsgVpnDistributedCacheClusterGlobalCachingHomeCluster) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Execute() (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r)
}

/*
 * CreateMsgVpnDistributedCacheClusterGlobalCachingHomeCluster Create a Home Cache Cluster object.
 * Create a Home Cache Cluster object. Any attribute missing from the request will be set to its default value.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
homeClusterName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest
*/
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	return AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
 */
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	cacheName       string
	clusterName     string
	homeClusterName string
	body            *MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Body(body MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Execute() (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r)
}

/*
 * CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix Create a Topic Prefix object.
 * Create a Topic Prefix object. Any attribute missing from the request will be set to its default value.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
homeClusterName|x||x|||
msgVpnName|x||x|||
topicPrefix|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param homeClusterName The name of the remote Home Cache Cluster.
 * @return AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest
*/
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	return AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		cacheName:       cacheName,
		clusterName:     clusterName,
		homeClusterName: homeClusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
 */
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r AllApiApiCreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", _neturl.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	body           *MsgVpnDistributedCacheClusterInstance
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) Body(body MsgVpnDistributedCacheClusterInstance) AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) Execute() (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
 * CreateMsgVpnDistributedCacheClusterInstance Create a Cache Instance object.
 * Create a Cache Instance object. Any attribute missing from the request will be set to its default value.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
instanceName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterInstance(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest {
	return AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterInstanceResponse
 */
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterInstanceExecute(r AllApiApiCreateMsgVpnDistributedCacheClusterInstanceRequest) (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	body           *MsgVpnDistributedCacheClusterTopic
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) Body(body MsgVpnDistributedCacheClusterTopic) AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) Execute() (MsgVpnDistributedCacheClusterTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDistributedCacheClusterTopicExecute(r)
}

/*
 * CreateMsgVpnDistributedCacheClusterTopic Create a Topic object.
 * Create a Topic object. Any attribute missing from the request will be set to its default value.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x||x|||
clusterName|x||x|||
msgVpnName|x||x|||
topic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest
*/
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterTopic(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest {
	return AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterTopicResponse
 */
func (a *AllApiService) CreateMsgVpnDistributedCacheClusterTopicExecute(r AllApiApiCreateMsgVpnDistributedCacheClusterTopicRequest) (MsgVpnDistributedCacheClusterTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDistributedCacheClusterTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnDmrBridgeRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnDmrBridge
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnDmrBridgeRequest) Body(body MsgVpnDmrBridge) AllApiApiCreateMsgVpnDmrBridgeRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnDmrBridgeRequest) Select_(select_ []string) AllApiApiCreateMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnDmrBridgeRequest) Execute() (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnDmrBridgeExecute(r)
}

/*
 * CreateMsgVpnDmrBridge Create a DMR Bridge object.
 * Create a DMR Bridge object. Any attribute missing from the request will be set to its default value.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
remoteNodeName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnDmrBridgeRequest
*/
func (a *AllApiService) CreateMsgVpnDmrBridge(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnDmrBridgeRequest {
	return AllApiApiCreateMsgVpnDmrBridgeRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDmrBridgeResponse
 */
func (a *AllApiService) CreateMsgVpnDmrBridgeExecute(r AllApiApiCreateMsgVpnDmrBridgeRequest) (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnJndiConnectionFactoryRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnJndiConnectionFactory
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnJndiConnectionFactoryRequest) Body(body MsgVpnJndiConnectionFactory) AllApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) AllApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnJndiConnectionFactoryRequest) Execute() (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnJndiConnectionFactoryExecute(r)
}

/*
 * CreateMsgVpnJndiConnectionFactory Create a JNDI Connection Factory object.
 * Create a JNDI Connection Factory object. Any attribute missing from the request will be set to its default value.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnJndiConnectionFactoryRequest
*/
func (a *AllApiService) CreateMsgVpnJndiConnectionFactory(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnJndiConnectionFactoryRequest {
	return AllApiApiCreateMsgVpnJndiConnectionFactoryRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiConnectionFactoryResponse
 */
func (a *AllApiService) CreateMsgVpnJndiConnectionFactoryExecute(r AllApiApiCreateMsgVpnJndiConnectionFactoryRequest) (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnJndiQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnJndiQueue
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnJndiQueueRequest) Body(body MsgVpnJndiQueue) AllApiApiCreateMsgVpnJndiQueueRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnJndiQueueRequest) Select_(select_ []string) AllApiApiCreateMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnJndiQueueRequest) Execute() (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnJndiQueueExecute(r)
}

/*
 * CreateMsgVpnJndiQueue Create a JNDI Queue object.
 * Create a JNDI Queue object. Any attribute missing from the request will be set to its default value.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnJndiQueueRequest
*/
func (a *AllApiService) CreateMsgVpnJndiQueue(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnJndiQueueRequest {
	return AllApiApiCreateMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiQueueResponse
 */
func (a *AllApiService) CreateMsgVpnJndiQueueExecute(r AllApiApiCreateMsgVpnJndiQueueRequest) (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnJndiTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnJndiTopic
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnJndiTopicRequest) Body(body MsgVpnJndiTopic) AllApiApiCreateMsgVpnJndiTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnJndiTopicRequest) Select_(select_ []string) AllApiApiCreateMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnJndiTopicRequest) Execute() (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnJndiTopicExecute(r)
}

/*
 * CreateMsgVpnJndiTopic Create a JNDI Topic object.
 * Create a JNDI Topic object. Any attribute missing from the request will be set to its default value.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
topicName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnJndiTopicRequest
*/
func (a *AllApiService) CreateMsgVpnJndiTopic(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnJndiTopicRequest {
	return AllApiApiCreateMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiTopicResponse
 */
func (a *AllApiService) CreateMsgVpnJndiTopicExecute(r AllApiApiCreateMsgVpnJndiTopicRequest) (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnMqttRetainCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnMqttRetainCache
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnMqttRetainCacheRequest) Body(body MsgVpnMqttRetainCache) AllApiApiCreateMsgVpnMqttRetainCacheRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnMqttRetainCacheRequest) Select_(select_ []string) AllApiApiCreateMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnMqttRetainCacheRequest) Execute() (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnMqttRetainCacheExecute(r)
}

/*
 * CreateMsgVpnMqttRetainCache Create an MQTT Retain Cache object.
 * Create an MQTT Retain Cache object. Any attribute missing from the request will be set to its default value.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnMqttRetainCacheRequest
*/
func (a *AllApiService) CreateMsgVpnMqttRetainCache(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnMqttRetainCacheRequest {
	return AllApiApiCreateMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttRetainCacheResponse
 */
func (a *AllApiService) CreateMsgVpnMqttRetainCacheExecute(r AllApiApiCreateMsgVpnMqttRetainCacheRequest) (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnMqttSessionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnMqttSession
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnMqttSessionRequest) Body(body MsgVpnMqttSession) AllApiApiCreateMsgVpnMqttSessionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnMqttSessionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnMqttSessionRequest) Execute() (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnMqttSessionExecute(r)
}

/*
 * CreateMsgVpnMqttSession Create an MQTT Session object.
 * Create an MQTT Session object. Any attribute missing from the request will be set to its default value.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnMqttSessionRequest
*/
func (a *AllApiService) CreateMsgVpnMqttSession(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnMqttSessionRequest {
	return AllApiApiCreateMsgVpnMqttSessionRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionResponse
 */
func (a *AllApiService) CreateMsgVpnMqttSessionExecute(r AllApiApiCreateMsgVpnMqttSessionRequest) (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	body                     *MsgVpnMqttSessionSubscription
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest) Body(body MsgVpnMqttSessionSubscription) AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest) Execute() (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
 * CreateMsgVpnMqttSessionSubscription Create a Subscription object.
 * Create a Subscription object. Any attribute missing from the request will be set to its default value.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x||x|||
mqttSessionVirtualRouter|x||x|||
msgVpnName|x||x|||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @return AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest
*/
func (a *AllApiService) CreateMsgVpnMqttSessionSubscription(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest {
	return AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionSubscriptionResponse
 */
func (a *AllApiService) CreateMsgVpnMqttSessionSubscriptionExecute(r AllApiApiCreateMsgVpnMqttSessionSubscriptionRequest) (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnQueue
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnQueueRequest) Body(body MsgVpnQueue) AllApiApiCreateMsgVpnQueueRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnQueueRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnQueueRequest) Select_(select_ []string) AllApiApiCreateMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnQueueRequest) Execute() (MsgVpnQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnQueueExecute(r)
}

/*
 * CreateMsgVpnQueue Create a Queue object.
 * Create a Queue object. Any attribute missing from the request will be set to its default value.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnQueueRequest
*/
func (a *AllApiService) CreateMsgVpnQueue(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnQueueRequest {
	return AllApiApiCreateMsgVpnQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueResponse
 */
func (a *AllApiService) CreateMsgVpnQueueExecute(r AllApiApiCreateMsgVpnQueueRequest) (MsgVpnQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnQueueSubscriptionRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	body           *MsgVpnQueueSubscription
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnQueueSubscriptionRequest) Body(body MsgVpnQueueSubscription) AllApiApiCreateMsgVpnQueueSubscriptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnQueueSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnQueueSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnQueueSubscriptionRequest) Select_(select_ []string) AllApiApiCreateMsgVpnQueueSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnQueueSubscriptionRequest) Execute() (MsgVpnQueueSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnQueueSubscriptionExecute(r)
}

/*
 * CreateMsgVpnQueueSubscription Create a Queue Subscription object.
 * Create a Queue Subscription object. Any attribute missing from the request will be set to its default value.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueName|x||x|||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @return AllApiApiCreateMsgVpnQueueSubscriptionRequest
*/
func (a *AllApiService) CreateMsgVpnQueueSubscription(ctx _context.Context, msgVpnName string, queueName string) AllApiApiCreateMsgVpnQueueSubscriptionRequest {
	return AllApiApiCreateMsgVpnQueueSubscriptionRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueSubscriptionResponse
 */
func (a *AllApiService) CreateMsgVpnQueueSubscriptionExecute(r AllApiApiCreateMsgVpnQueueSubscriptionRequest) (MsgVpnQueueSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnQueueSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnQueueTemplateRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnQueueTemplate
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnQueueTemplateRequest) Body(body MsgVpnQueueTemplate) AllApiApiCreateMsgVpnQueueTemplateRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnQueueTemplateRequest) Select_(select_ []string) AllApiApiCreateMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnQueueTemplateRequest) Execute() (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnQueueTemplateExecute(r)
}

/*
 * CreateMsgVpnQueueTemplate Create a Queue Template object.
 * Create a Queue Template object. Any attribute missing from the request will be set to its default value.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnQueueTemplateRequest
*/
func (a *AllApiService) CreateMsgVpnQueueTemplate(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnQueueTemplateRequest {
	return AllApiApiCreateMsgVpnQueueTemplateRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueTemplateResponse
 */
func (a *AllApiService) CreateMsgVpnQueueTemplateExecute(r AllApiApiCreateMsgVpnQueueTemplateRequest) (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnReplayLogRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnReplayLog
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnReplayLogRequest) Body(body MsgVpnReplayLog) AllApiApiCreateMsgVpnReplayLogRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnReplayLogRequest) Select_(select_ []string) AllApiApiCreateMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnReplayLogRequest) Execute() (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnReplayLogExecute(r)
}

/*
 * CreateMsgVpnReplayLog Create a Replay Log object.
 * Create a Replay Log object. Any attribute missing from the request will be set to its default value.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
replayLogName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.10.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnReplayLogRequest
*/
func (a *AllApiService) CreateMsgVpnReplayLog(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnReplayLogRequest {
	return AllApiApiCreateMsgVpnReplayLogRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplayLogResponse
 */
func (a *AllApiService) CreateMsgVpnReplayLogExecute(r AllApiApiCreateMsgVpnReplayLogRequest) (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnReplicatedTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnReplicatedTopic
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnReplicatedTopicRequest) Body(body MsgVpnReplicatedTopic) AllApiApiCreateMsgVpnReplicatedTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnReplicatedTopicRequest) Select_(select_ []string) AllApiApiCreateMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnReplicatedTopicRequest) Execute() (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnReplicatedTopicExecute(r)
}

/*
 * CreateMsgVpnReplicatedTopic Create a Replicated Topic object.
 * Create a Replicated Topic object. Any attribute missing from the request will be set to its default value.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
replicatedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnReplicatedTopicRequest
*/
func (a *AllApiService) CreateMsgVpnReplicatedTopic(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnReplicatedTopicRequest {
	return AllApiApiCreateMsgVpnReplicatedTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplicatedTopicResponse
 */
func (a *AllApiService) CreateMsgVpnReplicatedTopicExecute(r AllApiApiCreateMsgVpnReplicatedTopicRequest) (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnRestDeliveryPointRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnRestDeliveryPoint
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRequest) Body(body MsgVpnRestDeliveryPoint) AllApiApiCreateMsgVpnRestDeliveryPointRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRequest) Select_(select_ []string) AllApiApiCreateMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRequest) Execute() (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointExecute(r)
}

/*
 * CreateMsgVpnRestDeliveryPoint Create a REST Delivery Point object.
 * Create a REST Delivery Point object. Any attribute missing from the request will be set to its default value.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnRestDeliveryPointRequest
*/
func (a *AllApiService) CreateMsgVpnRestDeliveryPoint(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnRestDeliveryPointRequest {
	return AllApiApiCreateMsgVpnRestDeliveryPointRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointResponse
 */
func (a *AllApiService) CreateMsgVpnRestDeliveryPointExecute(r AllApiApiCreateMsgVpnRestDeliveryPointRequest) (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	body                  *MsgVpnRestDeliveryPointQueueBinding
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) Body(body MsgVpnRestDeliveryPointQueueBinding) AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
 * CreateMsgVpnRestDeliveryPointQueueBinding Create a Queue Binding object.
 * Create a Queue Binding object. Any attribute missing from the request will be set to its default value.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
queueBindingName|x|x||||
restDeliveryPointName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *AllApiService) CreateMsgVpnRestDeliveryPointQueueBinding(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest {
	return AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointQueueBindingResponse
 */
func (a *AllApiService) CreateMsgVpnRestDeliveryPointQueueBindingExecute(r AllApiApiCreateMsgVpnRestDeliveryPointQueueBindingRequest) (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	body                  *MsgVpnRestDeliveryPointRestConsumer
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) Body(body MsgVpnRestDeliveryPointRestConsumer) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
 * CreateMsgVpnRestDeliveryPointRestConsumer Create a REST Consumer object.
 * Create a REST Consumer object. Any attribute missing from the request will be set to its default value.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationClientCertContent||||x||x
authenticationClientCertPassword||||x||
authenticationHttpBasicPassword||||x||x
authenticationHttpHeaderValue||||x||x
authenticationOauthClientSecret||||x||x
authenticationOauthJwtSecretKey||||x||x
msgVpnName|x||x|||
restConsumerName|x|x||||
restDeliveryPointName|x||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *AllApiService) CreateMsgVpnRestDeliveryPointRestConsumer(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest {
	return AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerResponse
 */
func (a *AllApiService) CreateMsgVpnRestDeliveryPointRestConsumerExecute(r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerRequest) (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	body                  *MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Body(body MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Select_(select_ []string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r)
}

/*
 * CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim Create a Claim object.
 * Create a Claim object. Any attribute missing from the request will be set to its default value.

A Claim is added to the JWT sent to the OAuth token request endpoint.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
oauthJwtClaimName|x|x||||
oauthJwtClaimValue||x||||
restConsumerName|x||x|||
restDeliveryPointName|x||x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.21.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest
*/
func (a *AllApiService) CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	return AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
 */
func (a *AllApiService) CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) (MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	body                  *MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Body(body MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r)
}

/*
 * CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName Create a Trusted Common Name object.
 * Create a Trusted Common Name object. Any attribute missing from the request will be set to its default value.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||x|
restConsumerName|x||x||x|
restDeliveryPointName|x||x||x|
tlsTrustedCommonName|x|x|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest
*/
func (a *AllApiService) CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	return AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
 */
func (a *AllApiService) CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r AllApiApiCreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) (MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnSequencedTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnSequencedTopic
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnSequencedTopicRequest) Body(body MsgVpnSequencedTopic) AllApiApiCreateMsgVpnSequencedTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnSequencedTopicRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnSequencedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnSequencedTopicRequest) Select_(select_ []string) AllApiApiCreateMsgVpnSequencedTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnSequencedTopicRequest) Execute() (MsgVpnSequencedTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnSequencedTopicExecute(r)
}

/*
 * CreateMsgVpnSequencedTopic Create a Sequenced Topic object.
 * Create a Sequenced Topic object. Any attribute missing from the request will be set to its default value.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
sequencedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnSequencedTopicRequest
*/
func (a *AllApiService) CreateMsgVpnSequencedTopic(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnSequencedTopicRequest {
	return AllApiApiCreateMsgVpnSequencedTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnSequencedTopicResponse
 */
func (a *AllApiService) CreateMsgVpnSequencedTopicExecute(r AllApiApiCreateMsgVpnSequencedTopicRequest) (MsgVpnSequencedTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnSequencedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnSequencedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnTopicEndpointRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnTopicEndpoint
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnTopicEndpointRequest) Body(body MsgVpnTopicEndpoint) AllApiApiCreateMsgVpnTopicEndpointRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnTopicEndpointRequest) Select_(select_ []string) AllApiApiCreateMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnTopicEndpointRequest) Execute() (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnTopicEndpointExecute(r)
}

/*
 * CreateMsgVpnTopicEndpoint Create a Topic Endpoint object.
 * Create a Topic Endpoint object. Any attribute missing from the request will be set to its default value.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
topicEndpointName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnTopicEndpointRequest
*/
func (a *AllApiService) CreateMsgVpnTopicEndpoint(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnTopicEndpointRequest {
	return AllApiApiCreateMsgVpnTopicEndpointRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointResponse
 */
func (a *AllApiService) CreateMsgVpnTopicEndpointExecute(r AllApiApiCreateMsgVpnTopicEndpointRequest) (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateMsgVpnTopicEndpointTemplateRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpnTopicEndpointTemplate
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateMsgVpnTopicEndpointTemplateRequest) Body(body MsgVpnTopicEndpointTemplate) AllApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) AllApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateMsgVpnTopicEndpointTemplateRequest) Execute() (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateMsgVpnTopicEndpointTemplateExecute(r)
}

/*
 * CreateMsgVpnTopicEndpointTemplate Create a Topic Endpoint Template object.
 * Create a Topic Endpoint Template object. Any attribute missing from the request will be set to its default value.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x|||
topicEndpointTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiCreateMsgVpnTopicEndpointTemplateRequest
*/
func (a *AllApiService) CreateMsgVpnTopicEndpointTemplate(ctx _context.Context, msgVpnName string) AllApiApiCreateMsgVpnTopicEndpointTemplateRequest {
	return AllApiApiCreateMsgVpnTopicEndpointTemplateRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointTemplateResponse
 */
func (a *AllApiService) CreateMsgVpnTopicEndpointTemplateExecute(r AllApiApiCreateMsgVpnTopicEndpointTemplateRequest) (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiCreateVirtualHostnameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *VirtualHostname
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiCreateVirtualHostnameRequest) Body(body VirtualHostname) AllApiApiCreateVirtualHostnameRequest {
	r.body = &body
	return r
}
func (r AllApiApiCreateVirtualHostnameRequest) OpaquePassword(opaquePassword string) AllApiApiCreateVirtualHostnameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiCreateVirtualHostnameRequest) Select_(select_ []string) AllApiApiCreateVirtualHostnameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiCreateVirtualHostnameRequest) Execute() (VirtualHostnameResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateVirtualHostnameExecute(r)
}

/*
 * CreateVirtualHostname Create a Virtual Hostname object.
 * Create a Virtual Hostname object. Any attribute missing from the request will be set to its default value.

A Virtual Hostname is a provisioned object on a message broker that contains a Virtual Hostname to Message VPN mapping.

Clients which connect to a global (as opposed to per Message VPN) port and provides this hostname will be directed to its corresponding Message VPN. A case-insentive match is performed on the full client-provided hostname against the configured virtual-hostname.

This mechanism is only supported for hostnames provided through the Server Name Indication (SNI) extension of TLS.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
virtualHostname|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.17.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiCreateVirtualHostnameRequest
*/
func (a *AllApiService) CreateVirtualHostname(ctx _context.Context) AllApiApiCreateVirtualHostnameRequest {
	return AllApiApiCreateVirtualHostnameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return VirtualHostnameResponse
 */
func (a *AllApiService) CreateVirtualHostnameExecute(r AllApiApiCreateVirtualHostnameRequest) (VirtualHostnameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VirtualHostnameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.CreateVirtualHostname")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualHostnames"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
}

func (r AllApiApiDeleteCertAuthorityRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteCertAuthorityExecute(r)
}

/*
 * DeleteCertAuthority Delete a Certificate Authority object.
 * Delete a Certificate Authority object.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.

A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities and domainCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiDeleteCertAuthorityRequest
*/
func (a *AllApiService) DeleteCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiDeleteCertAuthorityRequest {
	return AllApiApiDeleteCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteCertAuthorityExecute(r AllApiApiDeleteCertAuthorityRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteCertAuthorityOcspTlsTrustedCommonNameRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	certAuthorityName        string
	ocspTlsTrustedCommonName string
}

func (r AllApiApiDeleteCertAuthorityOcspTlsTrustedCommonNameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteCertAuthorityOcspTlsTrustedCommonNameExecute(r)
}

/*
 * DeleteCertAuthorityOcspTlsTrustedCommonName Delete an OCSP Responder Trusted Common Name object.
 * Delete an OCSP Responder Trusted Common Name object.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.

A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @param ocspTlsTrustedCommonName The expected Trusted Common Name of the OCSP responder remote certificate.
 * @return AllApiApiDeleteCertAuthorityOcspTlsTrustedCommonNameRequest
*/
func (a *AllApiService) DeleteCertAuthorityOcspTlsTrustedCommonName(ctx _context.Context, certAuthorityName string, ocspTlsTrustedCommonName string) AllApiApiDeleteCertAuthorityOcspTlsTrustedCommonNameRequest {
	return AllApiApiDeleteCertAuthorityOcspTlsTrustedCommonNameRequest{
		ApiService:               a,
		ctx:                      ctx,
		certAuthorityName:        certAuthorityName,
		ocspTlsTrustedCommonName: ocspTlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteCertAuthorityOcspTlsTrustedCommonNameExecute(r AllApiApiDeleteCertAuthorityOcspTlsTrustedCommonNameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteCertAuthorityOcspTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames/{ocspTlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ocspTlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.ocspTlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteClientCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
}

func (r AllApiApiDeleteClientCertAuthorityRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteClientCertAuthorityExecute(r)
}

/*
 * DeleteClientCertAuthority Delete a Client Certificate Authority object.
 * Delete a Client Certificate Authority object.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.

A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiDeleteClientCertAuthorityRequest
*/
func (a *AllApiService) DeleteClientCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiDeleteClientCertAuthorityRequest {
	return AllApiApiDeleteClientCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteClientCertAuthorityExecute(r AllApiApiDeleteClientCertAuthorityRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteClientCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteClientCertAuthorityOcspTlsTrustedCommonNameRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	certAuthorityName        string
	ocspTlsTrustedCommonName string
}

func (r AllApiApiDeleteClientCertAuthorityOcspTlsTrustedCommonNameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteClientCertAuthorityOcspTlsTrustedCommonNameExecute(r)
}

/*
 * DeleteClientCertAuthorityOcspTlsTrustedCommonName Delete an OCSP Responder Trusted Common Name object.
 * Delete an OCSP Responder Trusted Common Name object.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.

A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @param ocspTlsTrustedCommonName The expected Trusted Common Name of the OCSP responder remote certificate.
 * @return AllApiApiDeleteClientCertAuthorityOcspTlsTrustedCommonNameRequest
*/
func (a *AllApiService) DeleteClientCertAuthorityOcspTlsTrustedCommonName(ctx _context.Context, certAuthorityName string, ocspTlsTrustedCommonName string) AllApiApiDeleteClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	return AllApiApiDeleteClientCertAuthorityOcspTlsTrustedCommonNameRequest{
		ApiService:               a,
		ctx:                      ctx,
		certAuthorityName:        certAuthorityName,
		ocspTlsTrustedCommonName: ocspTlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteClientCertAuthorityOcspTlsTrustedCommonNameExecute(r AllApiApiDeleteClientCertAuthorityOcspTlsTrustedCommonNameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteClientCertAuthorityOcspTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames/{ocspTlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ocspTlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.ocspTlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteDmrClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
}

func (r AllApiApiDeleteDmrClusterRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteDmrClusterExecute(r)
}

/*
 * DeleteDmrCluster Delete a Cluster object.
 * Delete a Cluster object.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @return AllApiApiDeleteDmrClusterRequest
*/
func (a *AllApiService) DeleteDmrCluster(ctx _context.Context, dmrClusterName string) AllApiApiDeleteDmrClusterRequest {
	return AllApiApiDeleteDmrClusterRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteDmrClusterExecute(r AllApiApiDeleteDmrClusterRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteDmrCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteDmrClusterLinkRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
}

func (r AllApiApiDeleteDmrClusterLinkRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteDmrClusterLinkExecute(r)
}

/*
 * DeleteDmrClusterLink Delete a Link object.
 * Delete a Link object.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiDeleteDmrClusterLinkRequest
*/
func (a *AllApiService) DeleteDmrClusterLink(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiDeleteDmrClusterLinkRequest {
	return AllApiApiDeleteDmrClusterLinkRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteDmrClusterLinkExecute(r AllApiApiDeleteDmrClusterLinkRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteDmrClusterLink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteDmrClusterLinkRemoteAddressRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	remoteAddress  string
}

func (r AllApiApiDeleteDmrClusterLinkRemoteAddressRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteDmrClusterLinkRemoteAddressExecute(r)
}

/*
 * DeleteDmrClusterLinkRemoteAddress Delete a Remote Address object.
 * Delete a Remote Address object.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @param remoteAddress The FQDN or IP address (and optional port) of the remote node. If a port is not provided, it will vary based on the transport encoding: 55555 (plain-text), 55443 (encrypted), or 55003 (compressed).
 * @return AllApiApiDeleteDmrClusterLinkRemoteAddressRequest
*/
func (a *AllApiService) DeleteDmrClusterLinkRemoteAddress(ctx _context.Context, dmrClusterName string, remoteNodeName string, remoteAddress string) AllApiApiDeleteDmrClusterLinkRemoteAddressRequest {
	return AllApiApiDeleteDmrClusterLinkRemoteAddressRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
		remoteAddress:  remoteAddress,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteDmrClusterLinkRemoteAddressExecute(r AllApiApiDeleteDmrClusterLinkRemoteAddressRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteDmrClusterLinkRemoteAddress")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses/{remoteAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteAddress"+"}", _neturl.PathEscape(parameterToString(r.remoteAddress, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteDmrClusterLinkTlsTrustedCommonNameRequest struct {
	ctx                  _context.Context
	ApiService           *AllApiService
	dmrClusterName       string
	remoteNodeName       string
	tlsTrustedCommonName string
}

func (r AllApiApiDeleteDmrClusterLinkTlsTrustedCommonNameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteDmrClusterLinkTlsTrustedCommonNameExecute(r)
}

/*
 * DeleteDmrClusterLinkTlsTrustedCommonName Delete a Trusted Common Name object.
 * Delete a Trusted Common Name object.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 * @return AllApiApiDeleteDmrClusterLinkTlsTrustedCommonNameRequest
*/
func (a *AllApiService) DeleteDmrClusterLinkTlsTrustedCommonName(ctx _context.Context, dmrClusterName string, remoteNodeName string, tlsTrustedCommonName string) AllApiApiDeleteDmrClusterLinkTlsTrustedCommonNameRequest {
	return AllApiApiDeleteDmrClusterLinkTlsTrustedCommonNameRequest{
		ApiService:           a,
		ctx:                  ctx,
		dmrClusterName:       dmrClusterName,
		remoteNodeName:       remoteNodeName,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteDmrClusterLinkTlsTrustedCommonNameExecute(r AllApiApiDeleteDmrClusterLinkTlsTrustedCommonNameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteDmrClusterLinkTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteDomainCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
}

func (r AllApiApiDeleteDomainCertAuthorityRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteDomainCertAuthorityExecute(r)
}

/*
 * DeleteDomainCertAuthority Delete a Domain Certificate Authority object.
 * Delete a Domain Certificate Authority object.

Certificate Authorities trusted for domain verification.

A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiDeleteDomainCertAuthorityRequest
*/
func (a *AllApiService) DeleteDomainCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiDeleteDomainCertAuthorityRequest {
	return AllApiApiDeleteDomainCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteDomainCertAuthorityExecute(r AllApiApiDeleteDomainCertAuthorityRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteDomainCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domainCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnRequest struct {
	ctx        _context.Context
	ApiService *AllApiService
	msgVpnName string
}

func (r AllApiApiDeleteMsgVpnRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnExecute(r)
}

/*
 * DeleteMsgVpn Delete a Message VPN object.
 * Delete a Message VPN object.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiDeleteMsgVpnRequest
*/
func (a *AllApiService) DeleteMsgVpn(ctx _context.Context, msgVpnName string) AllApiApiDeleteMsgVpnRequest {
	return AllApiApiDeleteMsgVpnRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnExecute(r AllApiApiDeleteMsgVpnRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfileRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
}

func (r AllApiApiDeleteMsgVpnAclProfileRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileExecute(r)
}

/*
 * DeleteMsgVpnAclProfile Delete an ACL Profile object.
 * Delete an ACL Profile object.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiDeleteMsgVpnAclProfileRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfile(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiDeleteMsgVpnAclProfileRequest {
	return AllApiApiDeleteMsgVpnAclProfileRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfileExecute(r AllApiApiDeleteMsgVpnAclProfileRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest struct {
	ctx                           _context.Context
	ApiService                    *AllApiService
	msgVpnName                    string
	aclProfileName                string
	clientConnectExceptionAddress string
}

func (r AllApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileClientConnectExceptionExecute(r)
}

/*
 * DeleteMsgVpnAclProfileClientConnectException Delete a Client Connect Exception object.
 * Delete a Client Connect Exception object.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param clientConnectExceptionAddress The IP address/netmask of the client connect exception in CIDR form.
 * @return AllApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfileClientConnectException(ctx _context.Context, msgVpnName string, aclProfileName string, clientConnectExceptionAddress string) AllApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest {
	return AllApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest{
		ApiService:                    a,
		ctx:                           ctx,
		msgVpnName:                    msgVpnName,
		aclProfileName:                aclProfileName,
		clientConnectExceptionAddress: clientConnectExceptionAddress,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfileClientConnectExceptionExecute(r AllApiApiDeleteMsgVpnAclProfileClientConnectExceptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfileClientConnectException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientConnectExceptionAddress"+"}", _neturl.PathEscape(parameterToString(r.clientConnectExceptionAddress, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfilePublishExceptionRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	aclProfileName        string
	topicSyntax           string
	publishExceptionTopic string
}

func (r AllApiApiDeleteMsgVpnAclProfilePublishExceptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfilePublishExceptionExecute(r)
}

/*
 * DeleteMsgVpnAclProfilePublishException Delete a Publish Topic Exception object.
 * Delete a Publish Topic Exception object.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param topicSyntax The syntax of the topic for the exception to the default action taken.
 * @param publishExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiDeleteMsgVpnAclProfilePublishExceptionRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfilePublishException(ctx _context.Context, msgVpnName string, aclProfileName string, topicSyntax string, publishExceptionTopic string) AllApiApiDeleteMsgVpnAclProfilePublishExceptionRequest {
	return AllApiApiDeleteMsgVpnAclProfilePublishExceptionRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		aclProfileName:        aclProfileName,
		topicSyntax:           topicSyntax,
		publishExceptionTopic: publishExceptionTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfilePublishExceptionExecute(r AllApiApiDeleteMsgVpnAclProfilePublishExceptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfilePublishException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", _neturl.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishExceptionTopic"+"}", _neturl.PathEscape(parameterToString(r.publishExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest struct {
	ctx                         _context.Context
	ApiService                  *AllApiService
	msgVpnName                  string
	aclProfileName              string
	publishTopicExceptionSyntax string
	publishTopicException       string
}

func (r AllApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfilePublishTopicExceptionExecute(r)
}

/*
 * DeleteMsgVpnAclProfilePublishTopicException Delete a Publish Topic Exception object.
 * Delete a Publish Topic Exception object.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param publishTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 * @param publishTopicException The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfilePublishTopicException(ctx _context.Context, msgVpnName string, aclProfileName string, publishTopicExceptionSyntax string, publishTopicException string) AllApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest {
	return AllApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest{
		ApiService:                  a,
		ctx:                         ctx,
		msgVpnName:                  msgVpnName,
		aclProfileName:              aclProfileName,
		publishTopicExceptionSyntax: publishTopicExceptionSyntax,
		publishTopicException:       publishTopicException,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfilePublishTopicExceptionExecute(r AllApiApiDeleteMsgVpnAclProfilePublishTopicExceptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfilePublishTopicException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions/{publishTopicExceptionSyntax},{publishTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicExceptionSyntax"+"}", _neturl.PathEscape(parameterToString(r.publishTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicException"+"}", _neturl.PathEscape(parameterToString(r.publishTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest struct {
	ctx                     _context.Context
	ApiService              *AllApiService
	msgVpnName              string
	aclProfileName          string
	topicSyntax             string
	subscribeExceptionTopic string
}

func (r AllApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileSubscribeExceptionExecute(r)
}

/*
 * DeleteMsgVpnAclProfileSubscribeException Delete a Subscribe Topic Exception object.
 * Delete a Subscribe Topic Exception object.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param topicSyntax The syntax of the topic for the exception to the default action taken.
 * @param subscribeExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfileSubscribeException(ctx _context.Context, msgVpnName string, aclProfileName string, topicSyntax string, subscribeExceptionTopic string) AllApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest {
	return AllApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest{
		ApiService:              a,
		ctx:                     ctx,
		msgVpnName:              msgVpnName,
		aclProfileName:          aclProfileName,
		topicSyntax:             topicSyntax,
		subscribeExceptionTopic: subscribeExceptionTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfileSubscribeExceptionExecute(r AllApiApiDeleteMsgVpnAclProfileSubscribeExceptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfileSubscribeException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", _neturl.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeExceptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscribeExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest struct {
	ctx                               _context.Context
	ApiService                        *AllApiService
	msgVpnName                        string
	aclProfileName                    string
	subscribeShareNameExceptionSyntax string
	subscribeShareNameException       string
}

func (r AllApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileSubscribeShareNameExceptionExecute(r)
}

/*
 * DeleteMsgVpnAclProfileSubscribeShareNameException Delete a Subscribe Share Name Exception object.
 * Delete a Subscribe Share Name Exception object.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param subscribeShareNameExceptionSyntax The syntax of the subscribe share name for the exception to the default action taken.
 * @param subscribeShareNameException The subscribe share name exception to the default action taken. May include wildcard characters.
 * @return AllApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfileSubscribeShareNameException(ctx _context.Context, msgVpnName string, aclProfileName string, subscribeShareNameExceptionSyntax string, subscribeShareNameException string) AllApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	return AllApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest{
		ApiService:                        a,
		ctx:                               ctx,
		msgVpnName:                        msgVpnName,
		aclProfileName:                    aclProfileName,
		subscribeShareNameExceptionSyntax: subscribeShareNameExceptionSyntax,
		subscribeShareNameException:       subscribeShareNameException,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfileSubscribeShareNameExceptionExecute(r AllApiApiDeleteMsgVpnAclProfileSubscribeShareNameExceptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfileSubscribeShareNameException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions/{subscribeShareNameExceptionSyntax},{subscribeShareNameException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameExceptionSyntax"+"}", _neturl.PathEscape(parameterToString(r.subscribeShareNameExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameException"+"}", _neturl.PathEscape(parameterToString(r.subscribeShareNameException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest struct {
	ctx                           _context.Context
	ApiService                    *AllApiService
	msgVpnName                    string
	aclProfileName                string
	subscribeTopicExceptionSyntax string
	subscribeTopicException       string
}

func (r AllApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAclProfileSubscribeTopicExceptionExecute(r)
}

/*
 * DeleteMsgVpnAclProfileSubscribeTopicException Delete a Subscribe Topic Exception object.
 * Delete a Subscribe Topic Exception object.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param subscribeTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 * @param subscribeTopicException The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest
*/
func (a *AllApiService) DeleteMsgVpnAclProfileSubscribeTopicException(ctx _context.Context, msgVpnName string, aclProfileName string, subscribeTopicExceptionSyntax string, subscribeTopicException string) AllApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest {
	return AllApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest{
		ApiService:                    a,
		ctx:                           ctx,
		msgVpnName:                    msgVpnName,
		aclProfileName:                aclProfileName,
		subscribeTopicExceptionSyntax: subscribeTopicExceptionSyntax,
		subscribeTopicException:       subscribeTopicException,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAclProfileSubscribeTopicExceptionExecute(r AllApiApiDeleteMsgVpnAclProfileSubscribeTopicExceptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAclProfileSubscribeTopicException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions/{subscribeTopicExceptionSyntax},{subscribeTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicExceptionSyntax"+"}", _neturl.PathEscape(parameterToString(r.subscribeTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicException"+"}", _neturl.PathEscape(parameterToString(r.subscribeTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAuthenticationOauthProviderRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	oauthProviderName string
}

func (r AllApiApiDeleteMsgVpnAuthenticationOauthProviderRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
 * DeleteMsgVpnAuthenticationOauthProvider Delete an OAuth Provider object.
 * Delete an OAuth Provider object.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param oauthProviderName The name of the OAuth Provider.
 * @return AllApiApiDeleteMsgVpnAuthenticationOauthProviderRequest
*/
func (a *AllApiService) DeleteMsgVpnAuthenticationOauthProvider(ctx _context.Context, msgVpnName string, oauthProviderName string) AllApiApiDeleteMsgVpnAuthenticationOauthProviderRequest {
	return AllApiApiDeleteMsgVpnAuthenticationOauthProviderRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAuthenticationOauthProviderExecute(r AllApiApiDeleteMsgVpnAuthenticationOauthProviderRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", _neturl.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnAuthorizationGroupRequest struct {
	ctx                    _context.Context
	ApiService             *AllApiService
	msgVpnName             string
	authorizationGroupName string
}

func (r AllApiApiDeleteMsgVpnAuthorizationGroupRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnAuthorizationGroupExecute(r)
}

/*
 * DeleteMsgVpnAuthorizationGroup Delete an LDAP Authorization Group object.
 * Delete an LDAP Authorization Group object.

To use client authorization groups configured on an external LDAP server to provide client authorizations, LDAP Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the LDAP server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param authorizationGroupName The name of the LDAP Authorization Group. Special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 * @return AllApiApiDeleteMsgVpnAuthorizationGroupRequest
*/
func (a *AllApiService) DeleteMsgVpnAuthorizationGroup(ctx _context.Context, msgVpnName string, authorizationGroupName string) AllApiApiDeleteMsgVpnAuthorizationGroupRequest {
	return AllApiApiDeleteMsgVpnAuthorizationGroupRequest{
		ApiService:             a,
		ctx:                    ctx,
		msgVpnName:             msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnAuthorizationGroupExecute(r AllApiApiDeleteMsgVpnAuthorizationGroupRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", _neturl.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnBridgeRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
}

func (r AllApiApiDeleteMsgVpnBridgeRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeExecute(r)
}

/*
 * DeleteMsgVpnBridge Delete a Bridge object.
 * Delete a Bridge object.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiDeleteMsgVpnBridgeRequest
*/
func (a *AllApiService) DeleteMsgVpnBridge(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiDeleteMsgVpnBridgeRequest {
	return AllApiApiDeleteMsgVpnBridgeRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnBridgeExecute(r AllApiApiDeleteMsgVpnBridgeRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	bridgeName            string
	bridgeVirtualRouter   string
	remoteMsgVpnName      string
	remoteMsgVpnLocation  string
	remoteMsgVpnInterface string
}

func (r AllApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
 * DeleteMsgVpnBridgeRemoteMsgVpn Delete a Remote Message VPN object.
 * Delete a Remote Message VPN object.

The Remote Message VPN is the Message VPN that the Bridge connects to.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param remoteMsgVpnName The name of the remote Message VPN.
 * @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 * @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 * @return AllApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *AllApiService) DeleteMsgVpnBridgeRemoteMsgVpn(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) AllApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest {
	return AllApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		bridgeName:            bridgeName,
		bridgeVirtualRouter:   bridgeVirtualRouter,
		remoteMsgVpnName:      remoteMsgVpnName,
		remoteMsgVpnLocation:  remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnBridgeRemoteMsgVpnExecute(r AllApiApiDeleteMsgVpnBridgeRemoteMsgVpnRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest struct {
	ctx                     _context.Context
	ApiService              *AllApiService
	msgVpnName              string
	bridgeName              string
	bridgeVirtualRouter     string
	remoteSubscriptionTopic string
}

func (r AllApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeRemoteSubscriptionExecute(r)
}

/*
 * DeleteMsgVpnBridgeRemoteSubscription Delete a Remote Subscription object.
 * Delete a Remote Subscription object.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param remoteSubscriptionTopic The topic of the Bridge remote subscription.
 * @return AllApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest
*/
func (a *AllApiService) DeleteMsgVpnBridgeRemoteSubscription(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteSubscriptionTopic string) AllApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest {
	return AllApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest{
		ApiService:              a,
		ctx:                     ctx,
		msgVpnName:              msgVpnName,
		bridgeName:              bridgeName,
		bridgeVirtualRouter:     bridgeVirtualRouter,
		remoteSubscriptionTopic: remoteSubscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnBridgeRemoteSubscriptionExecute(r AllApiApiDeleteMsgVpnBridgeRemoteSubscriptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnBridgeRemoteSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteSubscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.remoteSubscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest struct {
	ctx                  _context.Context
	ApiService           *AllApiService
	msgVpnName           string
	bridgeName           string
	bridgeVirtualRouter  string
	tlsTrustedCommonName string
}

func (r AllApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnBridgeTlsTrustedCommonNameExecute(r)
}

/*
 * DeleteMsgVpnBridgeTlsTrustedCommonName Delete a Trusted Common Name object.
 * Delete a Trusted Common Name object.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 * @return AllApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest
*/
func (a *AllApiService) DeleteMsgVpnBridgeTlsTrustedCommonName(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, tlsTrustedCommonName string) AllApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest {
	return AllApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest{
		ApiService:           a,
		ctx:                  ctx,
		msgVpnName:           msgVpnName,
		bridgeName:           bridgeName,
		bridgeVirtualRouter:  bridgeVirtualRouter,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnBridgeTlsTrustedCommonNameExecute(r AllApiApiDeleteMsgVpnBridgeTlsTrustedCommonNameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnBridgeTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnClientProfileRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	clientProfileName string
}

func (r AllApiApiDeleteMsgVpnClientProfileRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnClientProfileExecute(r)
}

/*
 * DeleteMsgVpnClientProfile Delete a Client Profile object.
 * Delete a Client Profile object.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @return AllApiApiDeleteMsgVpnClientProfileRequest
*/
func (a *AllApiService) DeleteMsgVpnClientProfile(ctx _context.Context, msgVpnName string, clientProfileName string) AllApiApiDeleteMsgVpnClientProfileRequest {
	return AllApiApiDeleteMsgVpnClientProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		clientProfileName: clientProfileName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnClientProfileExecute(r AllApiApiDeleteMsgVpnClientProfileRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", _neturl.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnClientUsernameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	clientUsername string
}

func (r AllApiApiDeleteMsgVpnClientUsernameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnClientUsernameExecute(r)
}

/*
 * DeleteMsgVpnClientUsername Delete a Client Username object.
 * Delete a Client Username object.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientUsername The name of the Client Username.
 * @return AllApiApiDeleteMsgVpnClientUsernameRequest
*/
func (a *AllApiService) DeleteMsgVpnClientUsername(ctx _context.Context, msgVpnName string, clientUsername string) AllApiApiDeleteMsgVpnClientUsernameRequest {
	return AllApiApiDeleteMsgVpnClientUsernameRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		clientUsername: clientUsername,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnClientUsernameExecute(r AllApiApiDeleteMsgVpnClientUsernameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", _neturl.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDistributedCacheRequest struct {
	ctx        _context.Context
	ApiService *AllApiService
	msgVpnName string
	cacheName  string
}

func (r AllApiApiDeleteMsgVpnDistributedCacheRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheExecute(r)
}

/*
 * DeleteMsgVpnDistributedCache Delete a Distributed Cache object.
 * Delete a Distributed Cache object.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @return AllApiApiDeleteMsgVpnDistributedCacheRequest
*/
func (a *AllApiService) DeleteMsgVpnDistributedCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiDeleteMsgVpnDistributedCacheRequest {
	return AllApiApiDeleteMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDistributedCacheExecute(r AllApiApiDeleteMsgVpnDistributedCacheRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDistributedCacheClusterRequest struct {
	ctx         _context.Context
	ApiService  *AllApiService
	msgVpnName  string
	cacheName   string
	clusterName string
}

func (r AllApiApiDeleteMsgVpnDistributedCacheClusterRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterExecute(r)
}

/*
 * DeleteMsgVpnDistributedCacheCluster Delete a Cache Cluster object.
 * Delete a Cache Cluster object.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiDeleteMsgVpnDistributedCacheClusterRequest
*/
func (a *AllApiService) DeleteMsgVpnDistributedCacheCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiDeleteMsgVpnDistributedCacheClusterRequest {
	return AllApiApiDeleteMsgVpnDistributedCacheClusterRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterExecute(r AllApiApiDeleteMsgVpnDistributedCacheClusterRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	cacheName       string
	clusterName     string
	homeClusterName string
}

func (r AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r)
}

/*
 * DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeCluster Delete a Home Cache Cluster object.
 * Delete a Home Cache Cluster object.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param homeClusterName The name of the remote Home Cache Cluster.
 * @return AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest
*/
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	return AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		cacheName:       cacheName,
		clusterName:     clusterName,
		homeClusterName: homeClusterName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", _neturl.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	cacheName       string
	clusterName     string
	homeClusterName string
	topicPrefix     string
}

func (r AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r)
}

/*
 * DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix Delete a Topic Prefix object.
 * Delete a Topic Prefix object.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param homeClusterName The name of the remote Home Cache Cluster.
 * @param topicPrefix A topic prefix for global topics available from the remote Home Cache Cluster. A wildcard (/>) is implied at the end of the prefix.
 * @return AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest
*/
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string, topicPrefix string) AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	return AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		cacheName:       cacheName,
		clusterName:     clusterName,
		homeClusterName: homeClusterName,
		topicPrefix:     topicPrefix,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r AllApiApiDeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes/{topicPrefix}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", _neturl.PathEscape(parameterToString(r.homeClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicPrefix"+"}", _neturl.PathEscape(parameterToString(r.topicPrefix, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx          _context.Context
	ApiService   *AllApiService
	msgVpnName   string
	cacheName    string
	clusterName  string
	instanceName string
}

func (r AllApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
 * DeleteMsgVpnDistributedCacheClusterInstance Delete a Cache Instance object.
 * Delete a Cache Instance object.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param instanceName The name of the Cache Instance.
 * @return AllApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterInstance(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) AllApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest {
	return AllApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService:   a,
		ctx:          ctx,
		msgVpnName:   msgVpnName,
		cacheName:    cacheName,
		clusterName:  clusterName,
		instanceName: instanceName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterInstanceExecute(r AllApiApiDeleteMsgVpnDistributedCacheClusterInstanceRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", _neturl.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest struct {
	ctx         _context.Context
	ApiService  *AllApiService
	msgVpnName  string
	cacheName   string
	clusterName string
	topic       string
}

func (r AllApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDistributedCacheClusterTopicExecute(r)
}

/*
 * DeleteMsgVpnDistributedCacheClusterTopic Delete a Topic object.
 * Delete a Topic object.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param topic The value of the Topic in the form a/b/c.
 * @return AllApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest
*/
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterTopic(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, topic string) AllApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest {
	return AllApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
		topic:       topic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDistributedCacheClusterTopicExecute(r AllApiApiDeleteMsgVpnDistributedCacheClusterTopicRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDistributedCacheClusterTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics/{topic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topic"+"}", _neturl.PathEscape(parameterToString(r.topic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnDmrBridgeRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	remoteNodeName string
}

func (r AllApiApiDeleteMsgVpnDmrBridgeRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnDmrBridgeExecute(r)
}

/*
 * DeleteMsgVpnDmrBridge Delete a DMR Bridge object.
 * Delete a DMR Bridge object.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 * @return AllApiApiDeleteMsgVpnDmrBridgeRequest
*/
func (a *AllApiService) DeleteMsgVpnDmrBridge(ctx _context.Context, msgVpnName string, remoteNodeName string) AllApiApiDeleteMsgVpnDmrBridgeRequest {
	return AllApiApiDeleteMsgVpnDmrBridgeRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnDmrBridgeExecute(r AllApiApiDeleteMsgVpnDmrBridgeRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnJndiConnectionFactoryRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	connectionFactoryName string
}

func (r AllApiApiDeleteMsgVpnJndiConnectionFactoryRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnJndiConnectionFactoryExecute(r)
}

/*
 * DeleteMsgVpnJndiConnectionFactory Delete a JNDI Connection Factory object.
 * Delete a JNDI Connection Factory object.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param connectionFactoryName The name of the JMS Connection Factory.
 * @return AllApiApiDeleteMsgVpnJndiConnectionFactoryRequest
*/
func (a *AllApiService) DeleteMsgVpnJndiConnectionFactory(ctx _context.Context, msgVpnName string, connectionFactoryName string) AllApiApiDeleteMsgVpnJndiConnectionFactoryRequest {
	return AllApiApiDeleteMsgVpnJndiConnectionFactoryRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnJndiConnectionFactoryExecute(r AllApiApiDeleteMsgVpnJndiConnectionFactoryRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", _neturl.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnJndiQueueRequest struct {
	ctx        _context.Context
	ApiService *AllApiService
	msgVpnName string
	queueName  string
}

func (r AllApiApiDeleteMsgVpnJndiQueueRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnJndiQueueExecute(r)
}

/*
 * DeleteMsgVpnJndiQueue Delete a JNDI Queue object.
 * Delete a JNDI Queue object.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The JNDI name of the JMS Queue.
 * @return AllApiApiDeleteMsgVpnJndiQueueRequest
*/
func (a *AllApiService) DeleteMsgVpnJndiQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiDeleteMsgVpnJndiQueueRequest {
	return AllApiApiDeleteMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnJndiQueueExecute(r AllApiApiDeleteMsgVpnJndiQueueRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnJndiTopicRequest struct {
	ctx        _context.Context
	ApiService *AllApiService
	msgVpnName string
	topicName  string
}

func (r AllApiApiDeleteMsgVpnJndiTopicRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnJndiTopicExecute(r)
}

/*
 * DeleteMsgVpnJndiTopic Delete a JNDI Topic object.
 * Delete a JNDI Topic object.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicName The JNDI name of the JMS Topic.
 * @return AllApiApiDeleteMsgVpnJndiTopicRequest
*/
func (a *AllApiService) DeleteMsgVpnJndiTopic(ctx _context.Context, msgVpnName string, topicName string) AllApiApiDeleteMsgVpnJndiTopicRequest {
	return AllApiApiDeleteMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		topicName:  topicName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnJndiTopicExecute(r AllApiApiDeleteMsgVpnJndiTopicRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", _neturl.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnMqttRetainCacheRequest struct {
	ctx        _context.Context
	ApiService *AllApiService
	msgVpnName string
	cacheName  string
}

func (r AllApiApiDeleteMsgVpnMqttRetainCacheRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnMqttRetainCacheExecute(r)
}

/*
 * DeleteMsgVpnMqttRetainCache Delete an MQTT Retain Cache object.
 * Delete an MQTT Retain Cache object.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the MQTT Retain Cache.
 * @return AllApiApiDeleteMsgVpnMqttRetainCacheRequest
*/
func (a *AllApiService) DeleteMsgVpnMqttRetainCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiDeleteMsgVpnMqttRetainCacheRequest {
	return AllApiApiDeleteMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnMqttRetainCacheExecute(r AllApiApiDeleteMsgVpnMqttRetainCacheRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnMqttSessionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
}

func (r AllApiApiDeleteMsgVpnMqttSessionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnMqttSessionExecute(r)
}

/*
 * DeleteMsgVpnMqttSession Delete an MQTT Session object.
 * Delete an MQTT Session object.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @return AllApiApiDeleteMsgVpnMqttSessionRequest
*/
func (a *AllApiService) DeleteMsgVpnMqttSession(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) AllApiApiDeleteMsgVpnMqttSessionRequest {
	return AllApiApiDeleteMsgVpnMqttSessionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnMqttSessionExecute(r AllApiApiDeleteMsgVpnMqttSessionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnMqttSessionSubscriptionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	subscriptionTopic        string
}

func (r AllApiApiDeleteMsgVpnMqttSessionSubscriptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
 * DeleteMsgVpnMqttSessionSubscription Delete a Subscription object.
 * Delete a Subscription object.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @param subscriptionTopic The MQTT subscription topic.
 * @return AllApiApiDeleteMsgVpnMqttSessionSubscriptionRequest
*/
func (a *AllApiService) DeleteMsgVpnMqttSessionSubscription(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) AllApiApiDeleteMsgVpnMqttSessionSubscriptionRequest {
	return AllApiApiDeleteMsgVpnMqttSessionSubscriptionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic:        subscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnMqttSessionSubscriptionExecute(r AllApiApiDeleteMsgVpnMqttSessionSubscriptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnQueueRequest struct {
	ctx        _context.Context
	ApiService *AllApiService
	msgVpnName string
	queueName  string
}

func (r AllApiApiDeleteMsgVpnQueueRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnQueueExecute(r)
}

/*
 * DeleteMsgVpnQueue Delete a Queue object.
 * Delete a Queue object.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @return AllApiApiDeleteMsgVpnQueueRequest
*/
func (a *AllApiService) DeleteMsgVpnQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiDeleteMsgVpnQueueRequest {
	return AllApiApiDeleteMsgVpnQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnQueueExecute(r AllApiApiDeleteMsgVpnQueueRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnQueueSubscriptionRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	queueName         string
	subscriptionTopic string
}

func (r AllApiApiDeleteMsgVpnQueueSubscriptionRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnQueueSubscriptionExecute(r)
}

/*
 * DeleteMsgVpnQueueSubscription Delete a Queue Subscription object.
 * Delete a Queue Subscription object.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @param subscriptionTopic The topic of the Subscription.
 * @return AllApiApiDeleteMsgVpnQueueSubscriptionRequest
*/
func (a *AllApiService) DeleteMsgVpnQueueSubscription(ctx _context.Context, msgVpnName string, queueName string, subscriptionTopic string) AllApiApiDeleteMsgVpnQueueSubscriptionRequest {
	return AllApiApiDeleteMsgVpnQueueSubscriptionRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		queueName:         queueName,
		subscriptionTopic: subscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnQueueSubscriptionExecute(r AllApiApiDeleteMsgVpnQueueSubscriptionRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnQueueSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnQueueTemplateRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	queueTemplateName string
}

func (r AllApiApiDeleteMsgVpnQueueTemplateRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnQueueTemplateExecute(r)
}

/*
 * DeleteMsgVpnQueueTemplate Delete a Queue Template object.
 * Delete a Queue Template object.

A Queue Template provides a mechanism for specifying the initial state for client created queues.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueTemplateName The name of the Queue Template.
 * @return AllApiApiDeleteMsgVpnQueueTemplateRequest
*/
func (a *AllApiService) DeleteMsgVpnQueueTemplate(ctx _context.Context, msgVpnName string, queueTemplateName string) AllApiApiDeleteMsgVpnQueueTemplateRequest {
	return AllApiApiDeleteMsgVpnQueueTemplateRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnQueueTemplateExecute(r AllApiApiDeleteMsgVpnQueueTemplateRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", _neturl.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnReplayLogRequest struct {
	ctx           _context.Context
	ApiService    *AllApiService
	msgVpnName    string
	replayLogName string
}

func (r AllApiApiDeleteMsgVpnReplayLogRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnReplayLogExecute(r)
}

/*
 * DeleteMsgVpnReplayLog Delete a Replay Log object.
 * Delete a Replay Log object.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.10.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replayLogName The name of the Replay Log.
 * @return AllApiApiDeleteMsgVpnReplayLogRequest
*/
func (a *AllApiService) DeleteMsgVpnReplayLog(ctx _context.Context, msgVpnName string, replayLogName string) AllApiApiDeleteMsgVpnReplayLogRequest {
	return AllApiApiDeleteMsgVpnReplayLogRequest{
		ApiService:    a,
		ctx:           ctx,
		msgVpnName:    msgVpnName,
		replayLogName: replayLogName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnReplayLogExecute(r AllApiApiDeleteMsgVpnReplayLogRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", _neturl.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnReplicatedTopicRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	replicatedTopic string
}

func (r AllApiApiDeleteMsgVpnReplicatedTopicRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnReplicatedTopicExecute(r)
}

/*
 * DeleteMsgVpnReplicatedTopic Delete a Replicated Topic object.
 * Delete a Replicated Topic object.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 * @return AllApiApiDeleteMsgVpnReplicatedTopicRequest
*/
func (a *AllApiService) DeleteMsgVpnReplicatedTopic(ctx _context.Context, msgVpnName string, replicatedTopic string) AllApiApiDeleteMsgVpnReplicatedTopicRequest {
	return AllApiApiDeleteMsgVpnReplicatedTopicRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnReplicatedTopicExecute(r AllApiApiDeleteMsgVpnReplicatedTopicRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", _neturl.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnRestDeliveryPointRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
}

func (r AllApiApiDeleteMsgVpnRestDeliveryPointRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointExecute(r)
}

/*
 * DeleteMsgVpnRestDeliveryPoint Delete a REST Delivery Point object.
 * Delete a REST Delivery Point object.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiDeleteMsgVpnRestDeliveryPointRequest
*/
func (a *AllApiService) DeleteMsgVpnRestDeliveryPoint(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiDeleteMsgVpnRestDeliveryPointRequest {
	return AllApiApiDeleteMsgVpnRestDeliveryPointRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointExecute(r AllApiApiDeleteMsgVpnRestDeliveryPointRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	queueBindingName      string
}

func (r AllApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
 * DeleteMsgVpnRestDeliveryPointQueueBinding Delete a Queue Binding object.
 * Delete a Queue Binding object.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param queueBindingName The name of a queue in the Message VPN.
 * @return AllApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointQueueBinding(ctx _context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) AllApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest {
	return AllApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName:      queueBindingName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointQueueBindingExecute(r AllApiApiDeleteMsgVpnRestDeliveryPointQueueBindingRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", _neturl.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
}

func (r AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
 * DeleteMsgVpnRestDeliveryPointRestConsumer Delete a REST Consumer object.
 * Delete a REST Consumer object.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointRestConsumer(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest {
	return AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointRestConsumerExecute(r AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	oauthJwtClaimName     string
}

func (r AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r)
}

/*
 * DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim Delete a Claim object.
 * Delete a Claim object.

A Claim is added to the JWT sent to the OAuth token request endpoint.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.21.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @param oauthJwtClaimName The name of the additional claim. Cannot be \"exp\", \"iat\", or \"jti\".
 * @return AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest
*/
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, oauthJwtClaimName string) AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	return AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
		oauthJwtClaimName:     oauthJwtClaimName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims/{oauthJwtClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthJwtClaimName"+"}", _neturl.PathEscape(parameterToString(r.oauthJwtClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	tlsTrustedCommonName  string
}

func (r AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r)
}

/*
 * DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName Delete a Trusted Common Name object.
 * Delete a Trusted Common Name object.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 * @return AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest
*/
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, tlsTrustedCommonName string) AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	return AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
		tlsTrustedCommonName:  tlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r AllApiApiDeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnSequencedTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	sequencedTopic string
}

func (r AllApiApiDeleteMsgVpnSequencedTopicRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnSequencedTopicExecute(r)
}

/*
 * DeleteMsgVpnSequencedTopic Delete a Sequenced Topic object.
 * Delete a Sequenced Topic object.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param sequencedTopic Topic for applying sequence numbers.
 * @return AllApiApiDeleteMsgVpnSequencedTopicRequest
*/
func (a *AllApiService) DeleteMsgVpnSequencedTopic(ctx _context.Context, msgVpnName string, sequencedTopic string) AllApiApiDeleteMsgVpnSequencedTopicRequest {
	return AllApiApiDeleteMsgVpnSequencedTopicRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		sequencedTopic: sequencedTopic,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnSequencedTopicExecute(r AllApiApiDeleteMsgVpnSequencedTopicRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnSequencedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sequencedTopic"+"}", _neturl.PathEscape(parameterToString(r.sequencedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnTopicEndpointRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	topicEndpointName string
}

func (r AllApiApiDeleteMsgVpnTopicEndpointRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnTopicEndpointExecute(r)
}

/*
 * DeleteMsgVpnTopicEndpoint Delete a Topic Endpoint object.
 * Delete a Topic Endpoint object.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointName The name of the Topic Endpoint.
 * @return AllApiApiDeleteMsgVpnTopicEndpointRequest
*/
func (a *AllApiService) DeleteMsgVpnTopicEndpoint(ctx _context.Context, msgVpnName string, topicEndpointName string) AllApiApiDeleteMsgVpnTopicEndpointRequest {
	return AllApiApiDeleteMsgVpnTopicEndpointRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnTopicEndpointExecute(r AllApiApiDeleteMsgVpnTopicEndpointRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteMsgVpnTopicEndpointTemplateRequest struct {
	ctx                       _context.Context
	ApiService                *AllApiService
	msgVpnName                string
	topicEndpointTemplateName string
}

func (r AllApiApiDeleteMsgVpnTopicEndpointTemplateRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteMsgVpnTopicEndpointTemplateExecute(r)
}

/*
 * DeleteMsgVpnTopicEndpointTemplate Delete a Topic Endpoint Template object.
 * Delete a Topic Endpoint Template object.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 * @return AllApiApiDeleteMsgVpnTopicEndpointTemplateRequest
*/
func (a *AllApiService) DeleteMsgVpnTopicEndpointTemplate(ctx _context.Context, msgVpnName string, topicEndpointTemplateName string) AllApiApiDeleteMsgVpnTopicEndpointTemplateRequest {
	return AllApiApiDeleteMsgVpnTopicEndpointTemplateRequest{
		ApiService:                a,
		ctx:                       ctx,
		msgVpnName:                msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteMsgVpnTopicEndpointTemplateExecute(r AllApiApiDeleteMsgVpnTopicEndpointTemplateRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiDeleteVirtualHostnameRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	virtualHostname string
}

func (r AllApiApiDeleteVirtualHostnameRequest) Execute() (SempMetaOnlyResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteVirtualHostnameExecute(r)
}

/*
 * DeleteVirtualHostname Delete a Virtual Hostname object.
 * Delete a Virtual Hostname object.

A Virtual Hostname is a provisioned object on a message broker that contains a Virtual Hostname to Message VPN mapping.

Clients which connect to a global (as opposed to per Message VPN) port and provides this hostname will be directed to its corresponding Message VPN. A case-insentive match is performed on the full client-provided hostname against the configured virtual-hostname.

This mechanism is only supported for hostnames provided through the Server Name Indication (SNI) extension of TLS.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.17.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param virtualHostname The virtual hostname.
 * @return AllApiApiDeleteVirtualHostnameRequest
*/
func (a *AllApiService) DeleteVirtualHostname(ctx _context.Context, virtualHostname string) AllApiApiDeleteVirtualHostnameRequest {
	return AllApiApiDeleteVirtualHostnameRequest{
		ApiService:      a,
		ctx:             ctx,
		virtualHostname: virtualHostname,
	}
}

/*
 * Execute executes the request
 * @return SempMetaOnlyResponse
 */
func (a *AllApiService) DeleteVirtualHostnameExecute(r AllApiApiDeleteVirtualHostnameRequest) (SempMetaOnlyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SempMetaOnlyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.DeleteVirtualHostname")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualHostnames/{virtualHostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualHostname"+"}", _neturl.PathEscape(parameterToString(r.virtualHostname, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetAboutRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetAboutRequest) OpaquePassword(opaquePassword string) AllApiApiGetAboutRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetAboutRequest) Select_(select_ []string) AllApiApiGetAboutRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetAboutRequest) Execute() (AboutResponse, *_nethttp.Response, error) {
	return r.ApiService.GetAboutExecute(r)
}

/*
 * GetAbout Get an About object.
 * Get an About object.

This provides metadata about the SEMP API, such as the version of the API supported by the broker.



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetAboutRequest
*/
func (a *AllApiService) GetAbout(ctx _context.Context) AllApiApiGetAboutRequest {
	return AllApiApiGetAboutRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return AboutResponse
 */
func (a *AllApiService) GetAboutExecute(r AllApiApiGetAboutRequest) (AboutResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AboutResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetAbout")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/about"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetAboutApiRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetAboutApiRequest) OpaquePassword(opaquePassword string) AllApiApiGetAboutApiRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetAboutApiRequest) Select_(select_ []string) AllApiApiGetAboutApiRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetAboutApiRequest) Execute() (AboutApiResponse, *_nethttp.Response, error) {
	return r.ApiService.GetAboutApiExecute(r)
}

/*
 * GetAboutApi Get an API Description object.
 * Get an API Description object.

The API Description object provides metadata about the SEMP API.



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetAboutApiRequest
*/
func (a *AllApiService) GetAboutApi(ctx _context.Context) AllApiApiGetAboutApiRequest {
	return AllApiApiGetAboutApiRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return AboutApiResponse
 */
func (a *AllApiService) GetAboutApiExecute(r AllApiApiGetAboutApiRequest) (AboutApiResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AboutApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetAboutApi")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/about/api"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetAboutUserRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetAboutUserRequest) OpaquePassword(opaquePassword string) AllApiApiGetAboutUserRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetAboutUserRequest) Select_(select_ []string) AllApiApiGetAboutUserRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetAboutUserRequest) Execute() (AboutUserResponse, *_nethttp.Response, error) {
	return r.ApiService.GetAboutUserExecute(r)
}

/*
 * GetAboutUser Get a User object.
 * Get a User object.

Session and access level information about the user accessing the SEMP API.



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetAboutUserRequest
*/
func (a *AllApiService) GetAboutUser(ctx _context.Context) AllApiApiGetAboutUserRequest {
	return AllApiApiGetAboutUserRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return AboutUserResponse
 */
func (a *AllApiService) GetAboutUserExecute(r AllApiApiGetAboutUserRequest) (AboutUserResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AboutUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetAboutUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/about/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetAboutUserMsgVpnRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetAboutUserMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiGetAboutUserMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetAboutUserMsgVpnRequest) Select_(select_ []string) AllApiApiGetAboutUserMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetAboutUserMsgVpnRequest) Execute() (AboutUserMsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.GetAboutUserMsgVpnExecute(r)
}

/*
 * GetAboutUserMsgVpn Get a User Message VPN object.
 * Get a User Message VPN object.

This provides information about the Message VPN access level for the username used to access the SEMP API.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetAboutUserMsgVpnRequest
*/
func (a *AllApiService) GetAboutUserMsgVpn(ctx _context.Context, msgVpnName string) AllApiApiGetAboutUserMsgVpnRequest {
	return AllApiApiGetAboutUserMsgVpnRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return AboutUserMsgVpnResponse
 */
func (a *AllApiService) GetAboutUserMsgVpnExecute(r AllApiApiGetAboutUserMsgVpnRequest) (AboutUserMsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AboutUserMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetAboutUserMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/about/user/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetAboutUserMsgVpnsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetAboutUserMsgVpnsRequest) Count(count int32) AllApiApiGetAboutUserMsgVpnsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetAboutUserMsgVpnsRequest) Cursor(cursor string) AllApiApiGetAboutUserMsgVpnsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetAboutUserMsgVpnsRequest) OpaquePassword(opaquePassword string) AllApiApiGetAboutUserMsgVpnsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetAboutUserMsgVpnsRequest) Where(where []string) AllApiApiGetAboutUserMsgVpnsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetAboutUserMsgVpnsRequest) Select_(select_ []string) AllApiApiGetAboutUserMsgVpnsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetAboutUserMsgVpnsRequest) Execute() (AboutUserMsgVpnsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetAboutUserMsgVpnsExecute(r)
}

/*
 * GetAboutUserMsgVpns Get a list of User Message VPN objects.
 * Get a list of User Message VPN objects.

This provides information about the Message VPN access level for the username used to access the SEMP API.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetAboutUserMsgVpnsRequest
*/
func (a *AllApiService) GetAboutUserMsgVpns(ctx _context.Context) AllApiApiGetAboutUserMsgVpnsRequest {
	return AllApiApiGetAboutUserMsgVpnsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return AboutUserMsgVpnsResponse
 */
func (a *AllApiService) GetAboutUserMsgVpnsExecute(r AllApiApiGetAboutUserMsgVpnsRequest) (AboutUserMsgVpnsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AboutUserMsgVpnsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetAboutUserMsgVpns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/about/user/msgVpns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetBrokerRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetBrokerRequest) OpaquePassword(opaquePassword string) AllApiApiGetBrokerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetBrokerRequest) Select_(select_ []string) AllApiApiGetBrokerRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetBrokerRequest) Execute() (BrokerResponse, *_nethttp.Response, error) {
	return r.ApiService.GetBrokerExecute(r)
}

/*
 * GetBroker Get a Broker object.
 * Get a Broker object.

This object contains global configuration for the message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
tlsServerCertContent||x||x
tlsServerCertPassword||x||



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
guaranteedMsgingEnabled|global/read-only
guaranteedMsgingEventCacheUsageThreshold.clearPercent|global/read-only
guaranteedMsgingEventCacheUsageThreshold.clearValue|global/read-only
guaranteedMsgingEventCacheUsageThreshold.setPercent|global/read-only
guaranteedMsgingEventCacheUsageThreshold.setValue|global/read-only
guaranteedMsgingEventDeliveredUnackedThreshold.clearPercent|global/read-only
guaranteedMsgingEventDeliveredUnackedThreshold.setPercent|global/read-only
guaranteedMsgingEventDiskUsageThreshold.clearPercent|global/read-only
guaranteedMsgingEventDiskUsageThreshold.setPercent|global/read-only
guaranteedMsgingEventEgressFlowCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventEgressFlowCountThreshold.clearValue|global/read-only
guaranteedMsgingEventEgressFlowCountThreshold.setPercent|global/read-only
guaranteedMsgingEventEgressFlowCountThreshold.setValue|global/read-only
guaranteedMsgingEventEndpointCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventEndpointCountThreshold.clearValue|global/read-only
guaranteedMsgingEventEndpointCountThreshold.setPercent|global/read-only
guaranteedMsgingEventEndpointCountThreshold.setValue|global/read-only
guaranteedMsgingEventIngressFlowCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventIngressFlowCountThreshold.clearValue|global/read-only
guaranteedMsgingEventIngressFlowCountThreshold.setPercent|global/read-only
guaranteedMsgingEventIngressFlowCountThreshold.setValue|global/read-only
guaranteedMsgingEventMsgCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventMsgCountThreshold.setPercent|global/read-only
guaranteedMsgingEventMsgSpoolFileCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventMsgSpoolFileCountThreshold.setPercent|global/read-only
guaranteedMsgingEventMsgSpoolUsageThreshold.clearPercent|global/read-only
guaranteedMsgingEventMsgSpoolUsageThreshold.clearValue|global/read-only
guaranteedMsgingEventMsgSpoolUsageThreshold.setPercent|global/read-only
guaranteedMsgingEventMsgSpoolUsageThreshold.setValue|global/read-only
guaranteedMsgingEventTransactedSessionCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventTransactedSessionCountThreshold.clearValue|global/read-only
guaranteedMsgingEventTransactedSessionCountThreshold.setPercent|global/read-only
guaranteedMsgingEventTransactedSessionCountThreshold.setValue|global/read-only
guaranteedMsgingEventTransactedSessionResourceCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventTransactedSessionResourceCountThreshold.setPercent|global/read-only
guaranteedMsgingEventTransactionCountThreshold.clearPercent|global/read-only
guaranteedMsgingEventTransactionCountThreshold.clearValue|global/read-only
guaranteedMsgingEventTransactionCountThreshold.setPercent|global/read-only
guaranteedMsgingEventTransactionCountThreshold.setValue|global/read-only
guaranteedMsgingMaxCacheUsage|global/read-only
guaranteedMsgingMaxMsgSpoolUsage|global/read-only
guaranteedMsgingMsgSpoolSyncMirroredMsgAckTimeout|global/read-only
guaranteedMsgingMsgSpoolSyncMirroredSpoolFileAckTimeout|global/read-only
guaranteedMsgingTransactionReplicationCompatibilityMode|global/read-only
serviceAmqpEnabled|global/read-only
serviceAmqpTlsListenPort|global/read-only
serviceEventConnectionCountThreshold.clearPercent|global/read-only
serviceEventConnectionCountThreshold.clearValue|global/read-only
serviceEventConnectionCountThreshold.setPercent|global/read-only
serviceEventConnectionCountThreshold.setValue|global/read-only
serviceHealthCheckEnabled|global/read-only
serviceHealthCheckListenPort|global/read-only
serviceMateLinkEnabled|global/read-only
serviceMateLinkListenPort|global/read-only
serviceMqttEnabled|global/read-only
serviceMsgBackboneEnabled|global/read-only
serviceRedundancyEnabled|global/read-only
serviceRedundancyFirstListenPort|global/read-only
serviceRestEventOutgoingConnectionCountThreshold.clearPercent|global/read-only
serviceRestEventOutgoingConnectionCountThreshold.clearValue|global/read-only
serviceRestEventOutgoingConnectionCountThreshold.setPercent|global/read-only
serviceRestEventOutgoingConnectionCountThreshold.setValue|global/read-only
serviceRestIncomingEnabled|global/read-only
serviceRestOutgoingEnabled|global/read-only
serviceSempLegacyTimeoutEnabled|global/read-only
serviceSempPlainTextEnabled|global/read-only
serviceSempPlainTextListenPort|global/read-only
serviceSempSessionIdleTimeout|global/read-only
serviceSempSessionMaxLifetime|global/read-only
serviceSempTlsEnabled|global/read-only
serviceSempTlsListenPort|global/read-only
serviceSmfCompressionListenPort|global/read-only
serviceSmfEnabled|global/read-only
serviceSmfEventConnectionCountThreshold.clearPercent|global/read-only
serviceSmfEventConnectionCountThreshold.clearValue|global/read-only
serviceSmfEventConnectionCountThreshold.setPercent|global/read-only
serviceSmfEventConnectionCountThreshold.setValue|global/read-only
serviceSmfPlainTextListenPort|global/read-only
serviceSmfRoutingControlListenPort|global/read-only
serviceSmfTlsListenPort|global/read-only
serviceTlsEventConnectionCountThreshold.clearPercent|global/read-only
serviceTlsEventConnectionCountThreshold.clearValue|global/read-only
serviceTlsEventConnectionCountThreshold.setPercent|global/read-only
serviceTlsEventConnectionCountThreshold.setValue|global/read-only
serviceWebTransportEnabled|global/read-only
serviceWebTransportPlainTextListenPort|global/read-only
serviceWebTransportTlsListenPort|global/read-only
serviceWebTransportWebUrlSuffix|global/read-only
tlsBlockVersion11Enabled|global/read-only
tlsCipherSuiteManagementList|global/read-only
tlsCipherSuiteMsgBackboneList|global/read-only
tlsCipherSuiteSecureShellList|global/read-only
tlsCrimeExploitProtectionEnabled|global/read-only
tlsServerCertContent|global/read-only
tlsStandardDomainCertificateAuthoritiesEnabled|vpn/read-only
tlsTicketLifetime|global/read-only



This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetBrokerRequest
*/
func (a *AllApiService) GetBroker(ctx _context.Context) AllApiApiGetBrokerRequest {
	return AllApiApiGetBrokerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return BrokerResponse
 */
func (a *AllApiService) GetBrokerExecute(r AllApiApiGetBrokerRequest) (BrokerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BrokerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetBroker")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetCertAuthoritiesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetCertAuthoritiesRequest) Count(count int32) AllApiApiGetCertAuthoritiesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetCertAuthoritiesRequest) Cursor(cursor string) AllApiApiGetCertAuthoritiesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetCertAuthoritiesRequest) OpaquePassword(opaquePassword string) AllApiApiGetCertAuthoritiesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetCertAuthoritiesRequest) Where(where []string) AllApiApiGetCertAuthoritiesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetCertAuthoritiesRequest) Select_(select_ []string) AllApiApiGetCertAuthoritiesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetCertAuthoritiesRequest) Execute() (CertAuthoritiesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetCertAuthoritiesExecute(r)
}

/*
 * GetCertAuthorities Get a list of Certificate Authority objects.
 * Get a list of Certificate Authority objects.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x||x|
certContent|||x|
crlDayList|||x|
crlTimeList|||x|
crlUrl|||x|
ocspNonResponderCertEnabled|||x|
ocspOverrideUrl|||x|
ocspTimeout|||x|
revocationCheckEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities and domainCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetCertAuthoritiesRequest
*/
func (a *AllApiService) GetCertAuthorities(ctx _context.Context) AllApiApiGetCertAuthoritiesRequest {
	return AllApiApiGetCertAuthoritiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return CertAuthoritiesResponse
 */
func (a *AllApiService) GetCertAuthoritiesExecute(r AllApiApiGetCertAuthoritiesRequest) (CertAuthoritiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthoritiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetCertAuthorities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiGetCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetCertAuthorityRequest) Select_(select_ []string) AllApiApiGetCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetCertAuthorityRequest) Execute() (CertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.GetCertAuthorityExecute(r)
}

/*
 * GetCertAuthority Get a Certificate Authority object.
 * Get a Certificate Authority object.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x||x|
certContent|||x|
crlDayList|||x|
crlTimeList|||x|
crlUrl|||x|
ocspNonResponderCertEnabled|||x|
ocspOverrideUrl|||x|
ocspTimeout|||x|
revocationCheckEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities and domainCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiGetCertAuthorityRequest
*/
func (a *AllApiService) GetCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiGetCertAuthorityRequest {
	return AllApiApiGetCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityResponse
 */
func (a *AllApiService) GetCertAuthorityExecute(r AllApiApiGetCertAuthorityRequest) (CertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	certAuthorityName        string
	ocspTlsTrustedCommonName string
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest) Execute() (CertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetCertAuthorityOcspTlsTrustedCommonNameExecute(r)
}

/*
 * GetCertAuthorityOcspTlsTrustedCommonName Get an OCSP Responder Trusted Common Name object.
 * Get an OCSP Responder Trusted Common Name object.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x||x|
ocspTlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @param ocspTlsTrustedCommonName The expected Trusted Common Name of the OCSP responder remote certificate.
 * @return AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest
*/
func (a *AllApiService) GetCertAuthorityOcspTlsTrustedCommonName(ctx _context.Context, certAuthorityName string, ocspTlsTrustedCommonName string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest {
	return AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest{
		ApiService:               a,
		ctx:                      ctx,
		certAuthorityName:        certAuthorityName,
		ocspTlsTrustedCommonName: ocspTlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityOcspTlsTrustedCommonNameResponse
 */
func (a *AllApiService) GetCertAuthorityOcspTlsTrustedCommonNameExecute(r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNameRequest) (CertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityOcspTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetCertAuthorityOcspTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames/{ocspTlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ocspTlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.ocspTlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	opaquePassword    *string
	where             *[]string
	select_           *[]string
}

func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest) Where(where []string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest) Select_(select_ []string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest) Execute() (CertAuthorityOcspTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetCertAuthorityOcspTlsTrustedCommonNamesExecute(r)
}

/*
 * GetCertAuthorityOcspTlsTrustedCommonNames Get a list of OCSP Responder Trusted Common Name objects.
 * Get a list of OCSP Responder Trusted Common Name objects.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x||x|
ocspTlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest
*/
func (a *AllApiService) GetCertAuthorityOcspTlsTrustedCommonNames(ctx _context.Context, certAuthorityName string) AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest {
	return AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityOcspTlsTrustedCommonNamesResponse
 */
func (a *AllApiService) GetCertAuthorityOcspTlsTrustedCommonNamesExecute(r AllApiApiGetCertAuthorityOcspTlsTrustedCommonNamesRequest) (CertAuthorityOcspTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityOcspTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetCertAuthorityOcspTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetClientCertAuthoritiesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetClientCertAuthoritiesRequest) Count(count int32) AllApiApiGetClientCertAuthoritiesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetClientCertAuthoritiesRequest) Cursor(cursor string) AllApiApiGetClientCertAuthoritiesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetClientCertAuthoritiesRequest) OpaquePassword(opaquePassword string) AllApiApiGetClientCertAuthoritiesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetClientCertAuthoritiesRequest) Where(where []string) AllApiApiGetClientCertAuthoritiesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetClientCertAuthoritiesRequest) Select_(select_ []string) AllApiApiGetClientCertAuthoritiesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetClientCertAuthoritiesRequest) Execute() (ClientCertAuthoritiesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetClientCertAuthoritiesExecute(r)
}

/*
 * GetClientCertAuthorities Get a list of Client Certificate Authority objects.
 * Get a list of Client Certificate Authority objects.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetClientCertAuthoritiesRequest
*/
func (a *AllApiService) GetClientCertAuthorities(ctx _context.Context) AllApiApiGetClientCertAuthoritiesRequest {
	return AllApiApiGetClientCertAuthoritiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthoritiesResponse
 */
func (a *AllApiService) GetClientCertAuthoritiesExecute(r AllApiApiGetClientCertAuthoritiesRequest) (ClientCertAuthoritiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthoritiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetClientCertAuthorities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetClientCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetClientCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiGetClientCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetClientCertAuthorityRequest) Select_(select_ []string) AllApiApiGetClientCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetClientCertAuthorityRequest) Execute() (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.GetClientCertAuthorityExecute(r)
}

/*
 * GetClientCertAuthority Get a Client Certificate Authority object.
 * Get a Client Certificate Authority object.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiGetClientCertAuthorityRequest
*/
func (a *AllApiService) GetClientCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiGetClientCertAuthorityRequest {
	return AllApiApiGetClientCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityResponse
 */
func (a *AllApiService) GetClientCertAuthorityExecute(r AllApiApiGetClientCertAuthorityRequest) (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetClientCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	certAuthorityName        string
	ocspTlsTrustedCommonName string
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest) Execute() (ClientCertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetClientCertAuthorityOcspTlsTrustedCommonNameExecute(r)
}

/*
 * GetClientCertAuthorityOcspTlsTrustedCommonName Get an OCSP Responder Trusted Common Name object.
 * Get an OCSP Responder Trusted Common Name object.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x|||
ocspTlsTrustedCommonName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @param ocspTlsTrustedCommonName The expected Trusted Common Name of the OCSP responder remote certificate.
 * @return AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest
*/
func (a *AllApiService) GetClientCertAuthorityOcspTlsTrustedCommonName(ctx _context.Context, certAuthorityName string, ocspTlsTrustedCommonName string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest {
	return AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest{
		ApiService:               a,
		ctx:                      ctx,
		certAuthorityName:        certAuthorityName,
		ocspTlsTrustedCommonName: ocspTlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityOcspTlsTrustedCommonNameResponse
 */
func (a *AllApiService) GetClientCertAuthorityOcspTlsTrustedCommonNameExecute(r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNameRequest) (ClientCertAuthorityOcspTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityOcspTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetClientCertAuthorityOcspTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames/{ocspTlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ocspTlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.ocspTlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	opaquePassword    *string
	where             *[]string
	select_           *[]string
}

func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest) Where(where []string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest) Select_(select_ []string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest) Execute() (ClientCertAuthorityOcspTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetClientCertAuthorityOcspTlsTrustedCommonNamesExecute(r)
}

/*
 * GetClientCertAuthorityOcspTlsTrustedCommonNames Get a list of OCSP Responder Trusted Common Name objects.
 * Get a list of OCSP Responder Trusted Common Name objects.

When an OCSP override URL is configured, the OCSP responder will be required to sign the OCSP responses with certificates issued to these Trusted Common Names. A maximum of 8 common names can be configured as valid response signers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x|||
ocspTlsTrustedCommonName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest
*/
func (a *AllApiService) GetClientCertAuthorityOcspTlsTrustedCommonNames(ctx _context.Context, certAuthorityName string) AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest {
	return AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityOcspTlsTrustedCommonNamesResponse
 */
func (a *AllApiService) GetClientCertAuthorityOcspTlsTrustedCommonNamesExecute(r AllApiApiGetClientCertAuthorityOcspTlsTrustedCommonNamesRequest) (ClientCertAuthorityOcspTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityOcspTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetClientCertAuthorityOcspTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetDmrClusterRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterRequest) Select_(select_ []string) AllApiApiGetDmrClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterRequest) Execute() (DmrClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterExecute(r)
}

/*
 * GetDmrCluster Get a Cluster object.
 * Get a Cluster object.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationBasicPassword||x||x
authenticationClientCertContent||x||x
authenticationClientCertPassword||x||
dmrClusterName|x|||
tlsServerCertEnforceTrustedCommonNameEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @return AllApiApiGetDmrClusterRequest
*/
func (a *AllApiService) GetDmrCluster(ctx _context.Context, dmrClusterName string) AllApiApiGetDmrClusterRequest {
	return AllApiApiGetDmrClusterRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterResponse
 */
func (a *AllApiService) GetDmrClusterExecute(r AllApiApiGetDmrClusterRequest) (DmrClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterLinkRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetDmrClusterLinkRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterLinkRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterLinkRequest) Select_(select_ []string) AllApiApiGetDmrClusterLinkRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterLinkRequest) Execute() (DmrClusterLinkResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterLinkExecute(r)
}

/*
 * GetDmrClusterLink Get a Link object.
 * Get a Link object.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationBasicPassword||x||x
dmrClusterName|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiGetDmrClusterLinkRequest
*/
func (a *AllApiService) GetDmrClusterLink(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiGetDmrClusterLinkRequest {
	return AllApiApiGetDmrClusterLinkRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkResponse
 */
func (a *AllApiService) GetDmrClusterLinkExecute(r AllApiApiGetDmrClusterLinkRequest) (DmrClusterLinkResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusterLink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterLinkRemoteAddressRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	remoteAddress  string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetDmrClusterLinkRemoteAddressRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterLinkRemoteAddressRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterLinkRemoteAddressRequest) Select_(select_ []string) AllApiApiGetDmrClusterLinkRemoteAddressRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterLinkRemoteAddressRequest) Execute() (DmrClusterLinkRemoteAddressResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterLinkRemoteAddressExecute(r)
}

/*
 * GetDmrClusterLinkRemoteAddress Get a Remote Address object.
 * Get a Remote Address object.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
dmrClusterName|x|||
remoteAddress|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @param remoteAddress The FQDN or IP address (and optional port) of the remote node. If a port is not provided, it will vary based on the transport encoding: 55555 (plain-text), 55443 (encrypted), or 55003 (compressed).
 * @return AllApiApiGetDmrClusterLinkRemoteAddressRequest
*/
func (a *AllApiService) GetDmrClusterLinkRemoteAddress(ctx _context.Context, dmrClusterName string, remoteNodeName string, remoteAddress string) AllApiApiGetDmrClusterLinkRemoteAddressRequest {
	return AllApiApiGetDmrClusterLinkRemoteAddressRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
		remoteAddress:  remoteAddress,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkRemoteAddressResponse
 */
func (a *AllApiService) GetDmrClusterLinkRemoteAddressExecute(r AllApiApiGetDmrClusterLinkRemoteAddressRequest) (DmrClusterLinkRemoteAddressResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkRemoteAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusterLinkRemoteAddress")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses/{remoteAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteAddress"+"}", _neturl.PathEscape(parameterToString(r.remoteAddress, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterLinkRemoteAddressesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetDmrClusterLinkRemoteAddressesRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterLinkRemoteAddressesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterLinkRemoteAddressesRequest) Where(where []string) AllApiApiGetDmrClusterLinkRemoteAddressesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetDmrClusterLinkRemoteAddressesRequest) Select_(select_ []string) AllApiApiGetDmrClusterLinkRemoteAddressesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterLinkRemoteAddressesRequest) Execute() (DmrClusterLinkRemoteAddressesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterLinkRemoteAddressesExecute(r)
}

/*
 * GetDmrClusterLinkRemoteAddresses Get a list of Remote Address objects.
 * Get a list of Remote Address objects.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
dmrClusterName|x|||
remoteAddress|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiGetDmrClusterLinkRemoteAddressesRequest
*/
func (a *AllApiService) GetDmrClusterLinkRemoteAddresses(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiGetDmrClusterLinkRemoteAddressesRequest {
	return AllApiApiGetDmrClusterLinkRemoteAddressesRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkRemoteAddressesResponse
 */
func (a *AllApiService) GetDmrClusterLinkRemoteAddressesExecute(r AllApiApiGetDmrClusterLinkRemoteAddressesRequest) (DmrClusterLinkRemoteAddressesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkRemoteAddressesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusterLinkRemoteAddresses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest struct {
	ctx                  _context.Context
	ApiService           *AllApiService
	dmrClusterName       string
	remoteNodeName       string
	tlsTrustedCommonName string
	opaquePassword       *string
	select_              *[]string
}

func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest) Execute() (DmrClusterLinkTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterLinkTlsTrustedCommonNameExecute(r)
}

/*
 * GetDmrClusterLinkTlsTrustedCommonName Get a Trusted Common Name object.
 * Get a Trusted Common Name object.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
dmrClusterName|x||x|
remoteNodeName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 * @return AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest
*/
func (a *AllApiService) GetDmrClusterLinkTlsTrustedCommonName(ctx _context.Context, dmrClusterName string, remoteNodeName string, tlsTrustedCommonName string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest {
	return AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest{
		ApiService:           a,
		ctx:                  ctx,
		dmrClusterName:       dmrClusterName,
		remoteNodeName:       remoteNodeName,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkTlsTrustedCommonNameResponse
 */
func (a *AllApiService) GetDmrClusterLinkTlsTrustedCommonNameExecute(r AllApiApiGetDmrClusterLinkTlsTrustedCommonNameRequest) (DmrClusterLinkTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusterLinkTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest) Where(where []string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest) Select_(select_ []string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest) Execute() (DmrClusterLinkTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterLinkTlsTrustedCommonNamesExecute(r)
}

/*
 * GetDmrClusterLinkTlsTrustedCommonNames Get a list of Trusted Common Name objects.
 * Get a list of Trusted Common Name objects.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
dmrClusterName|x||x|
remoteNodeName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest
*/
func (a *AllApiService) GetDmrClusterLinkTlsTrustedCommonNames(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest {
	return AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkTlsTrustedCommonNamesResponse
 */
func (a *AllApiService) GetDmrClusterLinkTlsTrustedCommonNamesExecute(r AllApiApiGetDmrClusterLinkTlsTrustedCommonNamesRequest) (DmrClusterLinkTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusterLinkTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClusterLinksRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetDmrClusterLinksRequest) Count(count int32) AllApiApiGetDmrClusterLinksRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetDmrClusterLinksRequest) Cursor(cursor string) AllApiApiGetDmrClusterLinksRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetDmrClusterLinksRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClusterLinksRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClusterLinksRequest) Where(where []string) AllApiApiGetDmrClusterLinksRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetDmrClusterLinksRequest) Select_(select_ []string) AllApiApiGetDmrClusterLinksRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClusterLinksRequest) Execute() (DmrClusterLinksResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClusterLinksExecute(r)
}

/*
 * GetDmrClusterLinks Get a list of Link objects.
 * Get a list of Link objects.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationBasicPassword||x||x
dmrClusterName|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @return AllApiApiGetDmrClusterLinksRequest
*/
func (a *AllApiService) GetDmrClusterLinks(ctx _context.Context, dmrClusterName string) AllApiApiGetDmrClusterLinksRequest {
	return AllApiApiGetDmrClusterLinksRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinksResponse
 */
func (a *AllApiService) GetDmrClusterLinksExecute(r AllApiApiGetDmrClusterLinksRequest) (DmrClusterLinksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusterLinks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDmrClustersRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetDmrClustersRequest) Count(count int32) AllApiApiGetDmrClustersRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetDmrClustersRequest) Cursor(cursor string) AllApiApiGetDmrClustersRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetDmrClustersRequest) OpaquePassword(opaquePassword string) AllApiApiGetDmrClustersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDmrClustersRequest) Where(where []string) AllApiApiGetDmrClustersRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetDmrClustersRequest) Select_(select_ []string) AllApiApiGetDmrClustersRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDmrClustersRequest) Execute() (DmrClustersResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDmrClustersExecute(r)
}

/*
 * GetDmrClusters Get a list of Cluster objects.
 * Get a list of Cluster objects.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationBasicPassword||x||x
authenticationClientCertContent||x||x
authenticationClientCertPassword||x||
dmrClusterName|x|||
tlsServerCertEnforceTrustedCommonNameEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetDmrClustersRequest
*/
func (a *AllApiService) GetDmrClusters(ctx _context.Context) AllApiApiGetDmrClustersRequest {
	return AllApiApiGetDmrClustersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return DmrClustersResponse
 */
func (a *AllApiService) GetDmrClustersExecute(r AllApiApiGetDmrClustersRequest) (DmrClustersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDmrClusters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDomainCertAuthoritiesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetDomainCertAuthoritiesRequest) Count(count int32) AllApiApiGetDomainCertAuthoritiesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetDomainCertAuthoritiesRequest) Cursor(cursor string) AllApiApiGetDomainCertAuthoritiesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetDomainCertAuthoritiesRequest) OpaquePassword(opaquePassword string) AllApiApiGetDomainCertAuthoritiesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDomainCertAuthoritiesRequest) Where(where []string) AllApiApiGetDomainCertAuthoritiesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetDomainCertAuthoritiesRequest) Select_(select_ []string) AllApiApiGetDomainCertAuthoritiesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDomainCertAuthoritiesRequest) Execute() (DomainCertAuthoritiesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDomainCertAuthoritiesExecute(r)
}

/*
 * GetDomainCertAuthorities Get a list of Domain Certificate Authority objects.
 * Get a list of Domain Certificate Authority objects.

Certificate Authorities trusted for domain verification.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetDomainCertAuthoritiesRequest
*/
func (a *AllApiService) GetDomainCertAuthorities(ctx _context.Context) AllApiApiGetDomainCertAuthoritiesRequest {
	return AllApiApiGetDomainCertAuthoritiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return DomainCertAuthoritiesResponse
 */
func (a *AllApiService) GetDomainCertAuthoritiesExecute(r AllApiApiGetDomainCertAuthoritiesRequest) (DomainCertAuthoritiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DomainCertAuthoritiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDomainCertAuthorities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domainCertAuthorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetDomainCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetDomainCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiGetDomainCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetDomainCertAuthorityRequest) Select_(select_ []string) AllApiApiGetDomainCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetDomainCertAuthorityRequest) Execute() (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.GetDomainCertAuthorityExecute(r)
}

/*
 * GetDomainCertAuthority Get a Domain Certificate Authority object.
 * Get a Domain Certificate Authority object.

Certificate Authorities trusted for domain verification.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
certAuthorityName|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiGetDomainCertAuthorityRequest
*/
func (a *AllApiService) GetDomainCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiGetDomainCertAuthorityRequest {
	return AllApiApiGetDomainCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return DomainCertAuthorityResponse
 */
func (a *AllApiService) GetDomainCertAuthorityExecute(r AllApiApiGetDomainCertAuthorityRequest) (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DomainCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetDomainCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domainCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRequest) Select_(select_ []string) AllApiApiGetMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRequest) Execute() (MsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnExecute(r)
}

/*
 * GetMsgVpn Get a Message VPN object.
 * Get a Message VPN object.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||x|
msgVpnName|x|||
replicationBridgeAuthenticationBasicPassword||x||x
replicationBridgeAuthenticationClientCertContent||x||x
replicationBridgeAuthenticationClientCertPassword||x||
replicationEnabledQueueBehavior||x||
restTlsServerCertEnforceTrustedCommonNameEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnRequest
*/
func (a *AllApiService) GetMsgVpn(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnRequest {
	return AllApiApiGetMsgVpnRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnResponse
 */
func (a *AllApiService) GetMsgVpnExecute(r AllApiApiGetMsgVpnRequest) (MsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileRequest) Execute() (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileExecute(r)
}

/*
 * GetMsgVpnAclProfile Get an ACL Profile object.
 * Get an ACL Profile object.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfileRequest
*/
func (a *AllApiService) GetMsgVpnAclProfile(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfileRequest {
	return AllApiApiGetMsgVpnAclProfileRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileExecute(r AllApiApiGetMsgVpnAclProfileRequest) (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest struct {
	ctx                           _context.Context
	ApiService                    *AllApiService
	msgVpnName                    string
	aclProfileName                string
	clientConnectExceptionAddress string
	opaquePassword                *string
	select_                       *[]string
}

func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) Execute() (MsgVpnAclProfileClientConnectExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileClientConnectExceptionExecute(r)
}

/*
 * GetMsgVpnAclProfileClientConnectException Get a Client Connect Exception object.
 * Get a Client Connect Exception object.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
clientConnectExceptionAddress|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param clientConnectExceptionAddress The IP address/netmask of the client connect exception in CIDR form.
 * @return AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileClientConnectException(ctx _context.Context, msgVpnName string, aclProfileName string, clientConnectExceptionAddress string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest {
	return AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest{
		ApiService:                    a,
		ctx:                           ctx,
		msgVpnName:                    msgVpnName,
		aclProfileName:                aclProfileName,
		clientConnectExceptionAddress: clientConnectExceptionAddress,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileClientConnectExceptionResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileClientConnectExceptionExecute(r AllApiApiGetMsgVpnAclProfileClientConnectExceptionRequest) (MsgVpnAclProfileClientConnectExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileClientConnectExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileClientConnectException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientConnectExceptionAddress"+"}", _neturl.PathEscape(parameterToString(r.clientConnectExceptionAddress, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Count(count int32) AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Where(where []string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) Execute() (MsgVpnAclProfileClientConnectExceptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileClientConnectExceptionsExecute(r)
}

/*
 * GetMsgVpnAclProfileClientConnectExceptions Get a list of Client Connect Exception objects.
 * Get a list of Client Connect Exception objects.

A Client Connect Exception is an exception to the default action to take when a client using the ACL Profile connects to the Message VPN. Exceptions must be expressed as an IP address/netmask in CIDR form.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
clientConnectExceptionAddress|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileClientConnectExceptions(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest {
	return AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileClientConnectExceptionsResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileClientConnectExceptionsExecute(r AllApiApiGetMsgVpnAclProfileClientConnectExceptionsRequest) (MsgVpnAclProfileClientConnectExceptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileClientConnectExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileClientConnectExceptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfilePublishExceptionRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	aclProfileName        string
	topicSyntax           string
	publishExceptionTopic string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnAclProfilePublishExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfilePublishExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishExceptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfilePublishExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfilePublishExceptionRequest) Execute() (MsgVpnAclProfilePublishExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishExceptionExecute(r)
}

/*
 * GetMsgVpnAclProfilePublishException Get a Publish Topic Exception object.
 * Get a Publish Topic Exception object.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
publishExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param topicSyntax The syntax of the topic for the exception to the default action taken.
 * @param publishExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiGetMsgVpnAclProfilePublishExceptionRequest
*/
func (a *AllApiService) GetMsgVpnAclProfilePublishException(ctx _context.Context, msgVpnName string, aclProfileName string, topicSyntax string, publishExceptionTopic string) AllApiApiGetMsgVpnAclProfilePublishExceptionRequest {
	return AllApiApiGetMsgVpnAclProfilePublishExceptionRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		aclProfileName:        aclProfileName,
		topicSyntax:           topicSyntax,
		publishExceptionTopic: publishExceptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilePublishExceptionResponse
 */
func (a *AllApiService) GetMsgVpnAclProfilePublishExceptionExecute(r AllApiApiGetMsgVpnAclProfilePublishExceptionRequest) (MsgVpnAclProfilePublishExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilePublishExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfilePublishException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", _neturl.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishExceptionTopic"+"}", _neturl.PathEscape(parameterToString(r.publishExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Count(count int32) AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Where(where []string) AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) Execute() (MsgVpnAclProfilePublishExceptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishExceptionsExecute(r)
}

/*
 * GetMsgVpnAclProfilePublishExceptions Get a list of Publish Topic Exception objects.
 * Get a list of Publish Topic Exception objects.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
publishExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by publishTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest
*/
func (a *AllApiService) GetMsgVpnAclProfilePublishExceptions(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest {
	return AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilePublishExceptionsResponse
 */
func (a *AllApiService) GetMsgVpnAclProfilePublishExceptionsExecute(r AllApiApiGetMsgVpnAclProfilePublishExceptionsRequest) (MsgVpnAclProfilePublishExceptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilePublishExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfilePublishExceptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest struct {
	ctx                         _context.Context
	ApiService                  *AllApiService
	msgVpnName                  string
	aclProfileName              string
	publishTopicExceptionSyntax string
	publishTopicException       string
	opaquePassword              *string
	select_                     *[]string
}

func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) Execute() (MsgVpnAclProfilePublishTopicExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishTopicExceptionExecute(r)
}

/*
 * GetMsgVpnAclProfilePublishTopicException Get a Publish Topic Exception object.
 * Get a Publish Topic Exception object.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
publishTopicException|x|||
publishTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param publishTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 * @param publishTopicException The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest
*/
func (a *AllApiService) GetMsgVpnAclProfilePublishTopicException(ctx _context.Context, msgVpnName string, aclProfileName string, publishTopicExceptionSyntax string, publishTopicException string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest {
	return AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest{
		ApiService:                  a,
		ctx:                         ctx,
		msgVpnName:                  msgVpnName,
		aclProfileName:              aclProfileName,
		publishTopicExceptionSyntax: publishTopicExceptionSyntax,
		publishTopicException:       publishTopicException,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilePublishTopicExceptionResponse
 */
func (a *AllApiService) GetMsgVpnAclProfilePublishTopicExceptionExecute(r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionRequest) (MsgVpnAclProfilePublishTopicExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilePublishTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfilePublishTopicException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions/{publishTopicExceptionSyntax},{publishTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicExceptionSyntax"+"}", _neturl.PathEscape(parameterToString(r.publishTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"publishTopicException"+"}", _neturl.PathEscape(parameterToString(r.publishTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Count(count int32) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Where(where []string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) Execute() (MsgVpnAclProfilePublishTopicExceptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilePublishTopicExceptionsExecute(r)
}

/*
 * GetMsgVpnAclProfilePublishTopicExceptions Get a list of Publish Topic Exception objects.
 * Get a list of Publish Topic Exception objects.

A Publish Topic Exception is an exception to the default action to take when a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
publishTopicException|x|||
publishTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest
*/
func (a *AllApiService) GetMsgVpnAclProfilePublishTopicExceptions(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest {
	return AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilePublishTopicExceptionsResponse
 */
func (a *AllApiService) GetMsgVpnAclProfilePublishTopicExceptionsExecute(r AllApiApiGetMsgVpnAclProfilePublishTopicExceptionsRequest) (MsgVpnAclProfilePublishTopicExceptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilePublishTopicExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfilePublishTopicExceptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest struct {
	ctx                     _context.Context
	ApiService              *AllApiService
	msgVpnName              string
	aclProfileName          string
	topicSyntax             string
	subscribeExceptionTopic string
	opaquePassword          *string
	select_                 *[]string
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) Execute() (MsgVpnAclProfileSubscribeExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeExceptionExecute(r)
}

/*
 * GetMsgVpnAclProfileSubscribeException Get a Subscribe Topic Exception object.
 * Get a Subscribe Topic Exception object.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
subscribeExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param topicSyntax The syntax of the topic for the exception to the default action taken.
 * @param subscribeExceptionTopic The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileSubscribeException(ctx _context.Context, msgVpnName string, aclProfileName string, topicSyntax string, subscribeExceptionTopic string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest {
	return AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest{
		ApiService:              a,
		ctx:                     ctx,
		msgVpnName:              msgVpnName,
		aclProfileName:          aclProfileName,
		topicSyntax:             topicSyntax,
		subscribeExceptionTopic: subscribeExceptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeExceptionResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileSubscribeExceptionExecute(r AllApiApiGetMsgVpnAclProfileSubscribeExceptionRequest) (MsgVpnAclProfileSubscribeExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileSubscribeException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicSyntax"+"}", _neturl.PathEscape(parameterToString(r.topicSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeExceptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscribeExceptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Count(count int32) AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Where(where []string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) Execute() (MsgVpnAclProfileSubscribeExceptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeExceptionsExecute(r)
}

/*
 * GetMsgVpnAclProfileSubscribeExceptions Get a list of Subscribe Topic Exception objects.
 * Get a list of Subscribe Topic Exception objects.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x||x|
msgVpnName|x||x|
subscribeExceptionTopic|x||x|
topicSyntax|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileSubscribeExceptions(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest {
	return AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeExceptionsResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileSubscribeExceptionsExecute(r AllApiApiGetMsgVpnAclProfileSubscribeExceptionsRequest) (MsgVpnAclProfileSubscribeExceptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileSubscribeExceptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest struct {
	ctx                               _context.Context
	ApiService                        *AllApiService
	msgVpnName                        string
	aclProfileName                    string
	subscribeShareNameExceptionSyntax string
	subscribeShareNameException       string
	opaquePassword                    *string
	select_                           *[]string
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) Execute() (MsgVpnAclProfileSubscribeShareNameExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeShareNameExceptionExecute(r)
}

/*
 * GetMsgVpnAclProfileSubscribeShareNameException Get a Subscribe Share Name Exception object.
 * Get a Subscribe Share Name Exception object.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeShareNameException|x|||
subscribeShareNameExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param subscribeShareNameExceptionSyntax The syntax of the subscribe share name for the exception to the default action taken.
 * @param subscribeShareNameException The subscribe share name exception to the default action taken. May include wildcard characters.
 * @return AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileSubscribeShareNameException(ctx _context.Context, msgVpnName string, aclProfileName string, subscribeShareNameExceptionSyntax string, subscribeShareNameException string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest {
	return AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest{
		ApiService:                        a,
		ctx:                               ctx,
		msgVpnName:                        msgVpnName,
		aclProfileName:                    aclProfileName,
		subscribeShareNameExceptionSyntax: subscribeShareNameExceptionSyntax,
		subscribeShareNameException:       subscribeShareNameException,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeShareNameExceptionResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileSubscribeShareNameExceptionExecute(r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionRequest) (MsgVpnAclProfileSubscribeShareNameExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeShareNameExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileSubscribeShareNameException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions/{subscribeShareNameExceptionSyntax},{subscribeShareNameException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameExceptionSyntax"+"}", _neturl.PathEscape(parameterToString(r.subscribeShareNameExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeShareNameException"+"}", _neturl.PathEscape(parameterToString(r.subscribeShareNameException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Count(count int32) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Where(where []string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) Execute() (MsgVpnAclProfileSubscribeShareNameExceptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeShareNameExceptionsExecute(r)
}

/*
 * GetMsgVpnAclProfileSubscribeShareNameExceptions Get a list of Subscribe Share Name Exception objects.
 * Get a list of Subscribe Share Name Exception objects.

A Subscribe Share Name Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a share-name subscription in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeShareNameException|x|||
subscribeShareNameExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileSubscribeShareNameExceptions(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest {
	return AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeShareNameExceptionsResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileSubscribeShareNameExceptionsExecute(r AllApiApiGetMsgVpnAclProfileSubscribeShareNameExceptionsRequest) (MsgVpnAclProfileSubscribeShareNameExceptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeShareNameExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileSubscribeShareNameExceptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest struct {
	ctx                           _context.Context
	ApiService                    *AllApiService
	msgVpnName                    string
	aclProfileName                string
	subscribeTopicExceptionSyntax string
	subscribeTopicException       string
	opaquePassword                *string
	select_                       *[]string
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) Execute() (MsgVpnAclProfileSubscribeTopicExceptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeTopicExceptionExecute(r)
}

/*
 * GetMsgVpnAclProfileSubscribeTopicException Get a Subscribe Topic Exception object.
 * Get a Subscribe Topic Exception object.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeTopicException|x|||
subscribeTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @param subscribeTopicExceptionSyntax The syntax of the topic for the exception to the default action taken.
 * @param subscribeTopicException The topic for the exception to the default action taken. May include wildcard characters.
 * @return AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileSubscribeTopicException(ctx _context.Context, msgVpnName string, aclProfileName string, subscribeTopicExceptionSyntax string, subscribeTopicException string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest {
	return AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest{
		ApiService:                    a,
		ctx:                           ctx,
		msgVpnName:                    msgVpnName,
		aclProfileName:                aclProfileName,
		subscribeTopicExceptionSyntax: subscribeTopicExceptionSyntax,
		subscribeTopicException:       subscribeTopicException,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeTopicExceptionResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileSubscribeTopicExceptionExecute(r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionRequest) (MsgVpnAclProfileSubscribeTopicExceptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeTopicExceptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileSubscribeTopicException")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions/{subscribeTopicExceptionSyntax},{subscribeTopicException}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicExceptionSyntax"+"}", _neturl.PathEscape(parameterToString(r.subscribeTopicExceptionSyntax, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscribeTopicException"+"}", _neturl.PathEscape(parameterToString(r.subscribeTopicException, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Count(count int32) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Where(where []string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) Execute() (MsgVpnAclProfileSubscribeTopicExceptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfileSubscribeTopicExceptionsExecute(r)
}

/*
 * GetMsgVpnAclProfileSubscribeTopicExceptions Get a list of Subscribe Topic Exception objects.
 * Get a list of Subscribe Topic Exception objects.

A Subscribe Topic Exception is an exception to the default action to take when a client using the ACL Profile subscribes to a topic in the Message VPN. Exceptions must be expressed as a topic.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||
subscribeTopicException|x|||
subscribeTopicExceptionSyntax|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest
*/
func (a *AllApiService) GetMsgVpnAclProfileSubscribeTopicExceptions(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest {
	return AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileSubscribeTopicExceptionsResponse
 */
func (a *AllApiService) GetMsgVpnAclProfileSubscribeTopicExceptionsExecute(r AllApiApiGetMsgVpnAclProfileSubscribeTopicExceptionsRequest) (MsgVpnAclProfileSubscribeTopicExceptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileSubscribeTopicExceptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfileSubscribeTopicExceptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAclProfilesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAclProfilesRequest) Count(count int32) AllApiApiGetMsgVpnAclProfilesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAclProfilesRequest) Cursor(cursor string) AllApiApiGetMsgVpnAclProfilesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAclProfilesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAclProfilesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAclProfilesRequest) Where(where []string) AllApiApiGetMsgVpnAclProfilesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAclProfilesRequest) Select_(select_ []string) AllApiApiGetMsgVpnAclProfilesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAclProfilesRequest) Execute() (MsgVpnAclProfilesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAclProfilesExecute(r)
}

/*
 * GetMsgVpnAclProfiles Get a list of ACL Profile objects.
 * Get a list of ACL Profile objects.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
aclProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnAclProfilesRequest
*/
func (a *AllApiService) GetMsgVpnAclProfiles(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnAclProfilesRequest {
	return AllApiApiGetMsgVpnAclProfilesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfilesResponse
 */
func (a *AllApiService) GetMsgVpnAclProfilesExecute(r AllApiApiGetMsgVpnAclProfilesRequest) (MsgVpnAclProfilesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAclProfiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAuthenticationOauthProviderRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	oauthProviderName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) AllApiApiGetMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAuthenticationOauthProviderRequest) Execute() (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
 * GetMsgVpnAuthenticationOauthProvider Get an OAuth Provider object.
 * Get an OAuth Provider object.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthProviderName|x|||
tokenIntrospectionPassword||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param oauthProviderName The name of the OAuth Provider.
 * @return AllApiApiGetMsgVpnAuthenticationOauthProviderRequest
*/
func (a *AllApiService) GetMsgVpnAuthenticationOauthProvider(ctx _context.Context, msgVpnName string, oauthProviderName string) AllApiApiGetMsgVpnAuthenticationOauthProviderRequest {
	return AllApiApiGetMsgVpnAuthenticationOauthProviderRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthenticationOauthProviderResponse
 */
func (a *AllApiService) GetMsgVpnAuthenticationOauthProviderExecute(r AllApiApiGetMsgVpnAuthenticationOauthProviderRequest) (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", _neturl.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Count(count int32) AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Cursor(cursor string) AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Where(where []string) AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Select_(select_ []string) AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) Execute() (MsgVpnAuthenticationOauthProvidersResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAuthenticationOauthProvidersExecute(r)
}

/*
 * GetMsgVpnAuthenticationOauthProviders Get a list of OAuth Provider objects.
 * Get a list of OAuth Provider objects.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthProviderName|x|||
tokenIntrospectionPassword||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest
*/
func (a *AllApiService) GetMsgVpnAuthenticationOauthProviders(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest {
	return AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthenticationOauthProvidersResponse
 */
func (a *AllApiService) GetMsgVpnAuthenticationOauthProvidersExecute(r AllApiApiGetMsgVpnAuthenticationOauthProvidersRequest) (MsgVpnAuthenticationOauthProvidersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthenticationOauthProvidersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAuthenticationOauthProviders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAuthorizationGroupRequest struct {
	ctx                    _context.Context
	ApiService             *AllApiService
	msgVpnName             string
	authorizationGroupName string
	opaquePassword         *string
	select_                *[]string
}

func (r AllApiApiGetMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAuthorizationGroupRequest) Select_(select_ []string) AllApiApiGetMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAuthorizationGroupRequest) Execute() (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAuthorizationGroupExecute(r)
}

/*
 * GetMsgVpnAuthorizationGroup Get an LDAP Authorization Group object.
 * Get an LDAP Authorization Group object.

To use client authorization groups configured on an external LDAP server to provide client authorizations, LDAP Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the LDAP server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authorizationGroupName|x|||
msgVpnName|x|||
orderAfterAuthorizationGroupName||x||
orderBeforeAuthorizationGroupName||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param authorizationGroupName The name of the LDAP Authorization Group. Special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 * @return AllApiApiGetMsgVpnAuthorizationGroupRequest
*/
func (a *AllApiService) GetMsgVpnAuthorizationGroup(ctx _context.Context, msgVpnName string, authorizationGroupName string) AllApiApiGetMsgVpnAuthorizationGroupRequest {
	return AllApiApiGetMsgVpnAuthorizationGroupRequest{
		ApiService:             a,
		ctx:                    ctx,
		msgVpnName:             msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthorizationGroupResponse
 */
func (a *AllApiService) GetMsgVpnAuthorizationGroupExecute(r AllApiApiGetMsgVpnAuthorizationGroupRequest) (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", _neturl.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnAuthorizationGroupsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnAuthorizationGroupsRequest) Count(count int32) AllApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnAuthorizationGroupsRequest) Cursor(cursor string) AllApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnAuthorizationGroupsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnAuthorizationGroupsRequest) Where(where []string) AllApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnAuthorizationGroupsRequest) Select_(select_ []string) AllApiApiGetMsgVpnAuthorizationGroupsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnAuthorizationGroupsRequest) Execute() (MsgVpnAuthorizationGroupsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnAuthorizationGroupsExecute(r)
}

/*
 * GetMsgVpnAuthorizationGroups Get a list of LDAP Authorization Group objects.
 * Get a list of LDAP Authorization Group objects.

To use client authorization groups configured on an external LDAP server to provide client authorizations, LDAP Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the LDAP server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authorizationGroupName|x|||
msgVpnName|x|||
orderAfterAuthorizationGroupName||x||
orderBeforeAuthorizationGroupName||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnAuthorizationGroupsRequest
*/
func (a *AllApiService) GetMsgVpnAuthorizationGroups(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnAuthorizationGroupsRequest {
	return AllApiApiGetMsgVpnAuthorizationGroupsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthorizationGroupsResponse
 */
func (a *AllApiService) GetMsgVpnAuthorizationGroupsExecute(r AllApiApiGetMsgVpnAuthorizationGroupsRequest) (MsgVpnAuthorizationGroupsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthorizationGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnAuthorizationGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	opaquePassword      *string
	select_             *[]string
}

func (r AllApiApiGetMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeRequest) Execute() (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeExecute(r)
}

/*
 * GetMsgVpnBridge Get a Bridge object.
 * Get a Bridge object.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteAuthenticationBasicPassword||x||x
remoteAuthenticationClientCertContent||x||x
remoteAuthenticationClientCertPassword||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiGetMsgVpnBridgeRequest
*/
func (a *AllApiService) GetMsgVpnBridge(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiGetMsgVpnBridgeRequest {
	return AllApiApiGetMsgVpnBridgeRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeResponse
 */
func (a *AllApiService) GetMsgVpnBridgeExecute(r AllApiApiGetMsgVpnBridgeRequest) (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	bridgeName            string
	bridgeVirtualRouter   string
	remoteMsgVpnName      string
	remoteMsgVpnLocation  string
	remoteMsgVpnInterface string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) Execute() (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
 * GetMsgVpnBridgeRemoteMsgVpn Get a Remote Message VPN object.
 * Get a Remote Message VPN object.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
password||x||x
remoteMsgVpnInterface|x|||
remoteMsgVpnLocation|x|||
remoteMsgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param remoteMsgVpnName The name of the remote Message VPN.
 * @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 * @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 * @return AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *AllApiService) GetMsgVpnBridgeRemoteMsgVpn(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest {
	return AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		bridgeName:            bridgeName,
		bridgeVirtualRouter:   bridgeVirtualRouter,
		remoteMsgVpnName:      remoteMsgVpnName,
		remoteMsgVpnLocation:  remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteMsgVpnResponse
 */
func (a *AllApiService) GetMsgVpnBridgeRemoteMsgVpnExecute(r AllApiApiGetMsgVpnBridgeRemoteMsgVpnRequest) (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	opaquePassword      *string
	where               *[]string
	select_             *[]string
}

func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) Where(where []string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) Execute() (MsgVpnBridgeRemoteMsgVpnsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteMsgVpnsExecute(r)
}

/*
 * GetMsgVpnBridgeRemoteMsgVpns Get a list of Remote Message VPN objects.
 * Get a list of Remote Message VPN objects.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
password||x||x
remoteMsgVpnInterface|x|||
remoteMsgVpnLocation|x|||
remoteMsgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest
*/
func (a *AllApiService) GetMsgVpnBridgeRemoteMsgVpns(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest {
	return AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteMsgVpnsResponse
 */
func (a *AllApiService) GetMsgVpnBridgeRemoteMsgVpnsExecute(r AllApiApiGetMsgVpnBridgeRemoteMsgVpnsRequest) (MsgVpnBridgeRemoteMsgVpnsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteMsgVpnsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridgeRemoteMsgVpns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest struct {
	ctx                     _context.Context
	ApiService              *AllApiService
	msgVpnName              string
	bridgeName              string
	bridgeVirtualRouter     string
	remoteSubscriptionTopic string
	opaquePassword          *string
	select_                 *[]string
}

func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) Execute() (MsgVpnBridgeRemoteSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteSubscriptionExecute(r)
}

/*
 * GetMsgVpnBridgeRemoteSubscription Get a Remote Subscription object.
 * Get a Remote Subscription object.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteSubscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param remoteSubscriptionTopic The topic of the Bridge remote subscription.
 * @return AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest
*/
func (a *AllApiService) GetMsgVpnBridgeRemoteSubscription(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteSubscriptionTopic string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest {
	return AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest{
		ApiService:              a,
		ctx:                     ctx,
		msgVpnName:              msgVpnName,
		bridgeName:              bridgeName,
		bridgeVirtualRouter:     bridgeVirtualRouter,
		remoteSubscriptionTopic: remoteSubscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteSubscriptionResponse
 */
func (a *AllApiService) GetMsgVpnBridgeRemoteSubscriptionExecute(r AllApiApiGetMsgVpnBridgeRemoteSubscriptionRequest) (MsgVpnBridgeRemoteSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridgeRemoteSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteSubscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.remoteSubscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	count               *int32
	cursor              *string
	opaquePassword      *string
	where               *[]string
	select_             *[]string
}

func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Count(count int32) AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Where(where []string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) Execute() (MsgVpnBridgeRemoteSubscriptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeRemoteSubscriptionsExecute(r)
}

/*
 * GetMsgVpnBridgeRemoteSubscriptions Get a list of Remote Subscription objects.
 * Get a list of Remote Subscription objects.

A Remote Subscription is a topic subscription used by the Message VPN Bridge to attract messages from the remote message broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteSubscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest
*/
func (a *AllApiService) GetMsgVpnBridgeRemoteSubscriptions(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest {
	return AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteSubscriptionsResponse
 */
func (a *AllApiService) GetMsgVpnBridgeRemoteSubscriptionsExecute(r AllApiApiGetMsgVpnBridgeRemoteSubscriptionsRequest) (MsgVpnBridgeRemoteSubscriptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteSubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridgeRemoteSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest struct {
	ctx                  _context.Context
	ApiService           *AllApiService
	msgVpnName           string
	bridgeName           string
	bridgeVirtualRouter  string
	tlsTrustedCommonName string
	opaquePassword       *string
	select_              *[]string
}

func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) Execute() (MsgVpnBridgeTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeTlsTrustedCommonNameExecute(r)
}

/*
 * GetMsgVpnBridgeTlsTrustedCommonName Get a Trusted Common Name object.
 * Get a Trusted Common Name object.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x||x|
bridgeVirtualRouter|x||x|
msgVpnName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 * @return AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest
*/
func (a *AllApiService) GetMsgVpnBridgeTlsTrustedCommonName(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, tlsTrustedCommonName string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest {
	return AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest{
		ApiService:           a,
		ctx:                  ctx,
		msgVpnName:           msgVpnName,
		bridgeName:           bridgeName,
		bridgeVirtualRouter:  bridgeVirtualRouter,
		tlsTrustedCommonName: tlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeTlsTrustedCommonNameResponse
 */
func (a *AllApiService) GetMsgVpnBridgeTlsTrustedCommonNameExecute(r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNameRequest) (MsgVpnBridgeTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridgeTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	opaquePassword      *string
	where               *[]string
	select_             *[]string
}

func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) Where(where []string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) Execute() (MsgVpnBridgeTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgeTlsTrustedCommonNamesExecute(r)
}

/*
 * GetMsgVpnBridgeTlsTrustedCommonNames Get a list of Trusted Common Name objects.
 * Get a list of Trusted Common Name objects.

The Trusted Common Names for the Bridge are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x||x|
bridgeVirtualRouter|x||x|
msgVpnName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest
*/
func (a *AllApiService) GetMsgVpnBridgeTlsTrustedCommonNames(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest {
	return AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeTlsTrustedCommonNamesResponse
 */
func (a *AllApiService) GetMsgVpnBridgeTlsTrustedCommonNamesExecute(r AllApiApiGetMsgVpnBridgeTlsTrustedCommonNamesRequest) (MsgVpnBridgeTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridgeTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnBridgesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnBridgesRequest) Count(count int32) AllApiApiGetMsgVpnBridgesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnBridgesRequest) Cursor(cursor string) AllApiApiGetMsgVpnBridgesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnBridgesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnBridgesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnBridgesRequest) Where(where []string) AllApiApiGetMsgVpnBridgesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnBridgesRequest) Select_(select_ []string) AllApiApiGetMsgVpnBridgesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnBridgesRequest) Execute() (MsgVpnBridgesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnBridgesExecute(r)
}

/*
 * GetMsgVpnBridges Get a list of Bridge objects.
 * Get a list of Bridge objects.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgeName|x|||
bridgeVirtualRouter|x|||
msgVpnName|x|||
remoteAuthenticationBasicPassword||x||x
remoteAuthenticationClientCertContent||x||x
remoteAuthenticationClientCertPassword||x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnBridgesRequest
*/
func (a *AllApiService) GetMsgVpnBridges(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnBridgesRequest {
	return AllApiApiGetMsgVpnBridgesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgesResponse
 */
func (a *AllApiService) GetMsgVpnBridgesExecute(r AllApiApiGetMsgVpnBridgesRequest) (MsgVpnBridgesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnBridges")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnClientProfileRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	clientProfileName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnClientProfileRequest) Select_(select_ []string) AllApiApiGetMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnClientProfileRequest) Execute() (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnClientProfileExecute(r)
}

/*
 * GetMsgVpnClientProfile Get a Client Profile object.
 * Get a Client Profile object.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
apiQueueManagementCopyFromOnCreateName|||x|
apiTopicEndpointManagementCopyFromOnCreateName|||x|
clientProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @return AllApiApiGetMsgVpnClientProfileRequest
*/
func (a *AllApiService) GetMsgVpnClientProfile(ctx _context.Context, msgVpnName string, clientProfileName string) AllApiApiGetMsgVpnClientProfileRequest {
	return AllApiApiGetMsgVpnClientProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		clientProfileName: clientProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientProfileResponse
 */
func (a *AllApiService) GetMsgVpnClientProfileExecute(r AllApiApiGetMsgVpnClientProfileRequest) (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", _neturl.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnClientProfilesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnClientProfilesRequest) Count(count int32) AllApiApiGetMsgVpnClientProfilesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnClientProfilesRequest) Cursor(cursor string) AllApiApiGetMsgVpnClientProfilesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnClientProfilesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnClientProfilesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnClientProfilesRequest) Where(where []string) AllApiApiGetMsgVpnClientProfilesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnClientProfilesRequest) Select_(select_ []string) AllApiApiGetMsgVpnClientProfilesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnClientProfilesRequest) Execute() (MsgVpnClientProfilesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnClientProfilesExecute(r)
}

/*
 * GetMsgVpnClientProfiles Get a list of Client Profile objects.
 * Get a list of Client Profile objects.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
apiQueueManagementCopyFromOnCreateName|||x|
apiTopicEndpointManagementCopyFromOnCreateName|||x|
clientProfileName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnClientProfilesRequest
*/
func (a *AllApiService) GetMsgVpnClientProfiles(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnClientProfilesRequest {
	return AllApiApiGetMsgVpnClientProfilesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientProfilesResponse
 */
func (a *AllApiService) GetMsgVpnClientProfilesExecute(r AllApiApiGetMsgVpnClientProfilesRequest) (MsgVpnClientProfilesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnClientProfiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnClientUsernameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	clientUsername string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnClientUsernameRequest) Select_(select_ []string) AllApiApiGetMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnClientUsernameRequest) Execute() (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnClientUsernameExecute(r)
}

/*
 * GetMsgVpnClientUsername Get a Client Username object.
 * Get a Client Username object.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientUsername|x|||
msgVpnName|x|||
password||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientUsername The name of the Client Username.
 * @return AllApiApiGetMsgVpnClientUsernameRequest
*/
func (a *AllApiService) GetMsgVpnClientUsername(ctx _context.Context, msgVpnName string, clientUsername string) AllApiApiGetMsgVpnClientUsernameRequest {
	return AllApiApiGetMsgVpnClientUsernameRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		clientUsername: clientUsername,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientUsernameResponse
 */
func (a *AllApiService) GetMsgVpnClientUsernameExecute(r AllApiApiGetMsgVpnClientUsernameRequest) (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", _neturl.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnClientUsernamesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnClientUsernamesRequest) Count(count int32) AllApiApiGetMsgVpnClientUsernamesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnClientUsernamesRequest) Cursor(cursor string) AllApiApiGetMsgVpnClientUsernamesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnClientUsernamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnClientUsernamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnClientUsernamesRequest) Where(where []string) AllApiApiGetMsgVpnClientUsernamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnClientUsernamesRequest) Select_(select_ []string) AllApiApiGetMsgVpnClientUsernamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnClientUsernamesRequest) Execute() (MsgVpnClientUsernamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnClientUsernamesExecute(r)
}

/*
 * GetMsgVpnClientUsernames Get a list of Client Username objects.
 * Get a list of Client Username objects.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientUsername|x|||
msgVpnName|x|||
password||x||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnClientUsernamesRequest
*/
func (a *AllApiService) GetMsgVpnClientUsernames(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnClientUsernamesRequest {
	return AllApiApiGetMsgVpnClientUsernamesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientUsernamesResponse
 */
func (a *AllApiService) GetMsgVpnClientUsernamesExecute(r AllApiApiGetMsgVpnClientUsernamesRequest) (MsgVpnClientUsernamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientUsernamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnClientUsernames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheRequest) Execute() (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheExecute(r)
}

/*
 * GetMsgVpnDistributedCache Get a Distributed Cache object.
 * Get a Distributed Cache object.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @return AllApiApiGetMsgVpnDistributedCacheRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiGetMsgVpnDistributedCacheRequest {
	return AllApiApiGetMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheExecute(r AllApiApiGetMsgVpnDistributedCacheRequest) (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterRequest) Execute() (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterExecute(r)
}

/*
 * GetMsgVpnDistributedCacheCluster Get a Cache Cluster object.
 * Get a Cache Cluster object.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiGetMsgVpnDistributedCacheClusterRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterExecute(r AllApiApiGetMsgVpnDistributedCacheClusterRequest) (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	cacheName       string
	clusterName     string
	homeClusterName string
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) Execute() (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterGlobalCachingHomeCluster Get a Home Cache Cluster object.
 * Get a Home Cache Cluster object.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param homeClusterName The name of the remote Home Cache Cluster.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		cacheName:       cacheName,
		clusterName:     clusterName,
		homeClusterName: homeClusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterExecute(r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterRequest) (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", _neturl.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	cacheName       string
	clusterName     string
	homeClusterName string
	topicPrefix     string
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) Execute() (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix Get a Topic Prefix object.
 * Get a Topic Prefix object.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||
topicPrefix|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param homeClusterName The name of the remote Home Cache Cluster.
 * @param topicPrefix A topic prefix for global topics available from the remote Home Cache Cluster. A wildcard (/>) is implied at the end of the prefix.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string, topicPrefix string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		cacheName:       cacheName,
		clusterName:     clusterName,
		homeClusterName: homeClusterName,
		topicPrefix:     topicPrefix,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixExecute(r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixRequest) (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes/{topicPrefix}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", _neturl.PathEscape(parameterToString(r.homeClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicPrefix"+"}", _neturl.PathEscape(parameterToString(r.topicPrefix, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	cacheName       string
	clusterName     string
	homeClusterName string
	count           *int32
	cursor          *string
	opaquePassword  *string
	where           *[]string
	select_         *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Count(count int32) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Cursor(cursor string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Where(where []string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) Execute() (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes Get a list of Topic Prefix objects.
 * Get a list of Topic Prefix objects.

A Topic Prefix is a prefix for a global topic that is available from the containing Home Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||
topicPrefix|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param homeClusterName The name of the remote Home Cache Cluster.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, homeClusterName string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		cacheName:       cacheName,
		clusterName:     clusterName,
		homeClusterName: homeClusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesExecute(r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesRequest) (MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"homeClusterName"+"}", _neturl.PathEscape(parameterToString(r.homeClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Count(count int32) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Cursor(cursor string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Where(where []string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) Execute() (MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusters Get a list of Home Cache Cluster objects.
 * Get a list of Home Cache Cluster objects.

A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster for a given topic in the context of the Global Caching feature.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
homeClusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusters(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersExecute(r AllApiApiGetMsgVpnDistributedCacheClusterGlobalCachingHomeClustersRequest) (MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	instanceName   string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) Execute() (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterInstance Get a Cache Instance object.
 * Get a Cache Instance object.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
instanceName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param instanceName The name of the Cache Instance.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterInstance(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService:   a,
		ctx:          ctx,
		msgVpnName:   msgVpnName,
		cacheName:    cacheName,
		clusterName:  clusterName,
		instanceName: instanceName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterInstanceResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterInstanceExecute(r AllApiApiGetMsgVpnDistributedCacheClusterInstanceRequest) (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", _neturl.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Count(count int32) AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Cursor(cursor string) AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Where(where []string) AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) Execute() (MsgVpnDistributedCacheClusterInstancesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterInstancesExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterInstances Get a list of Cache Instance objects.
 * Get a list of Cache Instance objects.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
instanceName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterInstances(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterInstancesResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterInstancesExecute(r AllApiApiGetMsgVpnDistributedCacheClusterInstancesRequest) (MsgVpnDistributedCacheClusterInstancesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterInstances")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	topic          string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest) Execute() (MsgVpnDistributedCacheClusterTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterTopicExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterTopic Get a Topic object.
 * Get a Topic object.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||
topic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param topic The value of the Topic in the form a/b/c.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterTopic(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, topic string) AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
		topic:       topic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterTopicResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterTopicExecute(r AllApiApiGetMsgVpnDistributedCacheClusterTopicRequest) (MsgVpnDistributedCacheClusterTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics/{topic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topic"+"}", _neturl.PathEscape(parameterToString(r.topic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Count(count int32) AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Cursor(cursor string) AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Where(where []string) AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) Execute() (MsgVpnDistributedCacheClusterTopicsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClusterTopicsExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusterTopics Get a list of Topic objects.
 * Get a list of Topic objects.

The Cache Instances that belong to the containing Cache Cluster will cache any messages published to topics that match a Topic Subscription.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||
topic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusterTopics(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest {
	return AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterTopicsResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClusterTopicsExecute(r AllApiApiGetMsgVpnDistributedCacheClusterTopicsRequest) (MsgVpnDistributedCacheClusterTopicsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusterTopics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCacheClustersRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCacheClustersRequest) Count(count int32) AllApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClustersRequest) Cursor(cursor string) AllApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClustersRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClustersRequest) Where(where []string) AllApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDistributedCacheClustersRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCacheClustersRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCacheClustersRequest) Execute() (MsgVpnDistributedCacheClustersResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCacheClustersExecute(r)
}

/*
 * GetMsgVpnDistributedCacheClusters Get a list of Cache Cluster objects.
 * Get a list of Cache Cluster objects.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
clusterName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @return AllApiApiGetMsgVpnDistributedCacheClustersRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCacheClusters(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiGetMsgVpnDistributedCacheClustersRequest {
	return AllApiApiGetMsgVpnDistributedCacheClustersRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClustersResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCacheClustersExecute(r AllApiApiGetMsgVpnDistributedCacheClustersRequest) (MsgVpnDistributedCacheClustersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCacheClusters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDistributedCachesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDistributedCachesRequest) Count(count int32) AllApiApiGetMsgVpnDistributedCachesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDistributedCachesRequest) Cursor(cursor string) AllApiApiGetMsgVpnDistributedCachesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDistributedCachesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDistributedCachesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDistributedCachesRequest) Where(where []string) AllApiApiGetMsgVpnDistributedCachesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDistributedCachesRequest) Select_(select_ []string) AllApiApiGetMsgVpnDistributedCachesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDistributedCachesRequest) Execute() (MsgVpnDistributedCachesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDistributedCachesExecute(r)
}

/*
 * GetMsgVpnDistributedCaches Get a list of Distributed Cache objects.
 * Get a list of Distributed Cache objects.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnDistributedCachesRequest
*/
func (a *AllApiService) GetMsgVpnDistributedCaches(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnDistributedCachesRequest {
	return AllApiApiGetMsgVpnDistributedCachesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCachesResponse
 */
func (a *AllApiService) GetMsgVpnDistributedCachesExecute(r AllApiApiGetMsgVpnDistributedCachesRequest) (MsgVpnDistributedCachesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCachesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDistributedCaches")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDmrBridgeRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	remoteNodeName string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDmrBridgeRequest) Select_(select_ []string) AllApiApiGetMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDmrBridgeRequest) Execute() (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDmrBridgeExecute(r)
}

/*
 * GetMsgVpnDmrBridge Get a DMR Bridge object.
 * Get a DMR Bridge object.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 * @return AllApiApiGetMsgVpnDmrBridgeRequest
*/
func (a *AllApiService) GetMsgVpnDmrBridge(ctx _context.Context, msgVpnName string, remoteNodeName string) AllApiApiGetMsgVpnDmrBridgeRequest {
	return AllApiApiGetMsgVpnDmrBridgeRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDmrBridgeResponse
 */
func (a *AllApiService) GetMsgVpnDmrBridgeExecute(r AllApiApiGetMsgVpnDmrBridgeRequest) (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnDmrBridgesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnDmrBridgesRequest) Count(count int32) AllApiApiGetMsgVpnDmrBridgesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnDmrBridgesRequest) Cursor(cursor string) AllApiApiGetMsgVpnDmrBridgesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnDmrBridgesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnDmrBridgesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnDmrBridgesRequest) Where(where []string) AllApiApiGetMsgVpnDmrBridgesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnDmrBridgesRequest) Select_(select_ []string) AllApiApiGetMsgVpnDmrBridgesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnDmrBridgesRequest) Execute() (MsgVpnDmrBridgesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnDmrBridgesExecute(r)
}

/*
 * GetMsgVpnDmrBridges Get a list of DMR Bridge objects.
 * Get a list of DMR Bridge objects.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
remoteNodeName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnDmrBridgesRequest
*/
func (a *AllApiService) GetMsgVpnDmrBridges(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnDmrBridgesRequest {
	return AllApiApiGetMsgVpnDmrBridgesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDmrBridgesResponse
 */
func (a *AllApiService) GetMsgVpnDmrBridgesExecute(r AllApiApiGetMsgVpnDmrBridgesRequest) (MsgVpnDmrBridgesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDmrBridgesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnDmrBridges")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnJndiConnectionFactoriesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) Count(count int32) AllApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) Cursor(cursor string) AllApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) Where(where []string) AllApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) Select_(select_ []string) AllApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) Execute() (MsgVpnJndiConnectionFactoriesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnJndiConnectionFactoriesExecute(r)
}

/*
 * GetMsgVpnJndiConnectionFactories Get a list of JNDI Connection Factory objects.
 * Get a list of JNDI Connection Factory objects.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
connectionFactoryName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnJndiConnectionFactoriesRequest
*/
func (a *AllApiService) GetMsgVpnJndiConnectionFactories(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnJndiConnectionFactoriesRequest {
	return AllApiApiGetMsgVpnJndiConnectionFactoriesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiConnectionFactoriesResponse
 */
func (a *AllApiService) GetMsgVpnJndiConnectionFactoriesExecute(r AllApiApiGetMsgVpnJndiConnectionFactoriesRequest) (MsgVpnJndiConnectionFactoriesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiConnectionFactoriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnJndiConnectionFactories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnJndiConnectionFactoryRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	connectionFactoryName string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) AllApiApiGetMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnJndiConnectionFactoryRequest) Execute() (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnJndiConnectionFactoryExecute(r)
}

/*
 * GetMsgVpnJndiConnectionFactory Get a JNDI Connection Factory object.
 * Get a JNDI Connection Factory object.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
connectionFactoryName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param connectionFactoryName The name of the JMS Connection Factory.
 * @return AllApiApiGetMsgVpnJndiConnectionFactoryRequest
*/
func (a *AllApiService) GetMsgVpnJndiConnectionFactory(ctx _context.Context, msgVpnName string, connectionFactoryName string) AllApiApiGetMsgVpnJndiConnectionFactoryRequest {
	return AllApiApiGetMsgVpnJndiConnectionFactoryRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiConnectionFactoryResponse
 */
func (a *AllApiService) GetMsgVpnJndiConnectionFactoryExecute(r AllApiApiGetMsgVpnJndiConnectionFactoryRequest) (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", _neturl.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnJndiQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnJndiQueueRequest) Select_(select_ []string) AllApiApiGetMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnJndiQueueRequest) Execute() (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnJndiQueueExecute(r)
}

/*
 * GetMsgVpnJndiQueue Get a JNDI Queue object.
 * Get a JNDI Queue object.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The JNDI name of the JMS Queue.
 * @return AllApiApiGetMsgVpnJndiQueueRequest
*/
func (a *AllApiService) GetMsgVpnJndiQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiGetMsgVpnJndiQueueRequest {
	return AllApiApiGetMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiQueueResponse
 */
func (a *AllApiService) GetMsgVpnJndiQueueExecute(r AllApiApiGetMsgVpnJndiQueueRequest) (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnJndiQueuesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnJndiQueuesRequest) Count(count int32) AllApiApiGetMsgVpnJndiQueuesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnJndiQueuesRequest) Cursor(cursor string) AllApiApiGetMsgVpnJndiQueuesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnJndiQueuesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnJndiQueuesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnJndiQueuesRequest) Where(where []string) AllApiApiGetMsgVpnJndiQueuesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnJndiQueuesRequest) Select_(select_ []string) AllApiApiGetMsgVpnJndiQueuesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnJndiQueuesRequest) Execute() (MsgVpnJndiQueuesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnJndiQueuesExecute(r)
}

/*
 * GetMsgVpnJndiQueues Get a list of JNDI Queue objects.
 * Get a list of JNDI Queue objects.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnJndiQueuesRequest
*/
func (a *AllApiService) GetMsgVpnJndiQueues(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnJndiQueuesRequest {
	return AllApiApiGetMsgVpnJndiQueuesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiQueuesResponse
 */
func (a *AllApiService) GetMsgVpnJndiQueuesExecute(r AllApiApiGetMsgVpnJndiQueuesRequest) (MsgVpnJndiQueuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiQueuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnJndiQueues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnJndiTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	topicName      string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnJndiTopicRequest) Select_(select_ []string) AllApiApiGetMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnJndiTopicRequest) Execute() (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnJndiTopicExecute(r)
}

/*
 * GetMsgVpnJndiTopic Get a JNDI Topic object.
 * Get a JNDI Topic object.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicName The JNDI name of the JMS Topic.
 * @return AllApiApiGetMsgVpnJndiTopicRequest
*/
func (a *AllApiService) GetMsgVpnJndiTopic(ctx _context.Context, msgVpnName string, topicName string) AllApiApiGetMsgVpnJndiTopicRequest {
	return AllApiApiGetMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		topicName:  topicName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiTopicResponse
 */
func (a *AllApiService) GetMsgVpnJndiTopicExecute(r AllApiApiGetMsgVpnJndiTopicRequest) (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", _neturl.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnJndiTopicsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnJndiTopicsRequest) Count(count int32) AllApiApiGetMsgVpnJndiTopicsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnJndiTopicsRequest) Cursor(cursor string) AllApiApiGetMsgVpnJndiTopicsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnJndiTopicsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnJndiTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnJndiTopicsRequest) Where(where []string) AllApiApiGetMsgVpnJndiTopicsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnJndiTopicsRequest) Select_(select_ []string) AllApiApiGetMsgVpnJndiTopicsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnJndiTopicsRequest) Execute() (MsgVpnJndiTopicsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnJndiTopicsExecute(r)
}

/*
 * GetMsgVpnJndiTopics Get a list of JNDI Topic objects.
 * Get a list of JNDI Topic objects.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnJndiTopicsRequest
*/
func (a *AllApiService) GetMsgVpnJndiTopics(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnJndiTopicsRequest {
	return AllApiApiGetMsgVpnJndiTopicsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiTopicsResponse
 */
func (a *AllApiService) GetMsgVpnJndiTopicsExecute(r AllApiApiGetMsgVpnJndiTopicsRequest) (MsgVpnJndiTopicsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnJndiTopics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnMqttRetainCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnMqttRetainCacheRequest) Select_(select_ []string) AllApiApiGetMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnMqttRetainCacheRequest) Execute() (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnMqttRetainCacheExecute(r)
}

/*
 * GetMsgVpnMqttRetainCache Get an MQTT Retain Cache object.
 * Get an MQTT Retain Cache object.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the MQTT Retain Cache.
 * @return AllApiApiGetMsgVpnMqttRetainCacheRequest
*/
func (a *AllApiService) GetMsgVpnMqttRetainCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiGetMsgVpnMqttRetainCacheRequest {
	return AllApiApiGetMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttRetainCacheResponse
 */
func (a *AllApiService) GetMsgVpnMqttRetainCacheExecute(r AllApiApiGetMsgVpnMqttRetainCacheRequest) (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnMqttRetainCachesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnMqttRetainCachesRequest) Count(count int32) AllApiApiGetMsgVpnMqttRetainCachesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnMqttRetainCachesRequest) Cursor(cursor string) AllApiApiGetMsgVpnMqttRetainCachesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnMqttRetainCachesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnMqttRetainCachesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnMqttRetainCachesRequest) Where(where []string) AllApiApiGetMsgVpnMqttRetainCachesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnMqttRetainCachesRequest) Select_(select_ []string) AllApiApiGetMsgVpnMqttRetainCachesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnMqttRetainCachesRequest) Execute() (MsgVpnMqttRetainCachesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnMqttRetainCachesExecute(r)
}

/*
 * GetMsgVpnMqttRetainCaches Get a list of MQTT Retain Cache objects.
 * Get a list of MQTT Retain Cache objects.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
cacheName|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnMqttRetainCachesRequest
*/
func (a *AllApiService) GetMsgVpnMqttRetainCaches(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnMqttRetainCachesRequest {
	return AllApiApiGetMsgVpnMqttRetainCachesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttRetainCachesResponse
 */
func (a *AllApiService) GetMsgVpnMqttRetainCachesExecute(r AllApiApiGetMsgVpnMqttRetainCachesRequest) (MsgVpnMqttRetainCachesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttRetainCachesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnMqttRetainCaches")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnMqttSessionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiGetMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionRequest) Select_(select_ []string) AllApiApiGetMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnMqttSessionRequest) Execute() (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionExecute(r)
}

/*
 * GetMsgVpnMqttSession Get an MQTT Session object.
 * Get an MQTT Session object.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @return AllApiApiGetMsgVpnMqttSessionRequest
*/
func (a *AllApiService) GetMsgVpnMqttSession(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) AllApiApiGetMsgVpnMqttSessionRequest {
	return AllApiApiGetMsgVpnMqttSessionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionResponse
 */
func (a *AllApiService) GetMsgVpnMqttSessionExecute(r AllApiApiGetMsgVpnMqttSessionRequest) (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnMqttSessionSubscriptionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	subscriptionTopic        string
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiGetMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnMqttSessionSubscriptionRequest) Execute() (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
 * GetMsgVpnMqttSessionSubscription Get a Subscription object.
 * Get a Subscription object.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @param subscriptionTopic The MQTT subscription topic.
 * @return AllApiApiGetMsgVpnMqttSessionSubscriptionRequest
*/
func (a *AllApiService) GetMsgVpnMqttSessionSubscription(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) AllApiApiGetMsgVpnMqttSessionSubscriptionRequest {
	return AllApiApiGetMsgVpnMqttSessionSubscriptionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic:        subscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionSubscriptionResponse
 */
func (a *AllApiService) GetMsgVpnMqttSessionSubscriptionExecute(r AllApiApiGetMsgVpnMqttSessionSubscriptionRequest) (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	count                    *int32
	cursor                   *string
	opaquePassword           *string
	where                    *[]string
	select_                  *[]string
}

func (r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Count(count int32) AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Where(where []string) AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) Execute() (MsgVpnMqttSessionSubscriptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionSubscriptionsExecute(r)
}

/*
 * GetMsgVpnMqttSessionSubscriptions Get a list of Subscription objects.
 * Get a list of Subscription objects.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @return AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest
*/
func (a *AllApiService) GetMsgVpnMqttSessionSubscriptions(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest {
	return AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionSubscriptionsResponse
 */
func (a *AllApiService) GetMsgVpnMqttSessionSubscriptionsExecute(r AllApiApiGetMsgVpnMqttSessionSubscriptionsRequest) (MsgVpnMqttSessionSubscriptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionSubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnMqttSessionSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnMqttSessionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnMqttSessionsRequest) Count(count int32) AllApiApiGetMsgVpnMqttSessionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnMqttSessionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnMqttSessionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionsRequest) Where(where []string) AllApiApiGetMsgVpnMqttSessionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnMqttSessionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnMqttSessionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnMqttSessionsRequest) Execute() (MsgVpnMqttSessionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnMqttSessionsExecute(r)
}

/*
 * GetMsgVpnMqttSessions Get a list of MQTT Session objects.
 * Get a list of MQTT Session objects.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
mqttSessionClientId|x|||
mqttSessionVirtualRouter|x|||
msgVpnName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnMqttSessionsRequest
*/
func (a *AllApiService) GetMsgVpnMqttSessions(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnMqttSessionsRequest {
	return AllApiApiGetMsgVpnMqttSessionsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionsResponse
 */
func (a *AllApiService) GetMsgVpnMqttSessionsExecute(r AllApiApiGetMsgVpnMqttSessionsRequest) (MsgVpnMqttSessionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnMqttSessions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnQueueRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnQueueRequest) Select_(select_ []string) AllApiApiGetMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnQueueRequest) Execute() (MsgVpnQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnQueueExecute(r)
}

/*
 * GetMsgVpnQueue Get a Queue object.
 * Get a Queue object.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @return AllApiApiGetMsgVpnQueueRequest
*/
func (a *AllApiService) GetMsgVpnQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiGetMsgVpnQueueRequest {
	return AllApiApiGetMsgVpnQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueResponse
 */
func (a *AllApiService) GetMsgVpnQueueExecute(r AllApiApiGetMsgVpnQueueRequest) (MsgVpnQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnQueueSubscriptionRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	queueName         string
	subscriptionTopic string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetMsgVpnQueueSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnQueueSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnQueueSubscriptionRequest) Select_(select_ []string) AllApiApiGetMsgVpnQueueSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnQueueSubscriptionRequest) Execute() (MsgVpnQueueSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnQueueSubscriptionExecute(r)
}

/*
 * GetMsgVpnQueueSubscription Get a Queue Subscription object.
 * Get a Queue Subscription object.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @param subscriptionTopic The topic of the Subscription.
 * @return AllApiApiGetMsgVpnQueueSubscriptionRequest
*/
func (a *AllApiService) GetMsgVpnQueueSubscription(ctx _context.Context, msgVpnName string, queueName string, subscriptionTopic string) AllApiApiGetMsgVpnQueueSubscriptionRequest {
	return AllApiApiGetMsgVpnQueueSubscriptionRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		queueName:         queueName,
		subscriptionTopic: subscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueSubscriptionResponse
 */
func (a *AllApiService) GetMsgVpnQueueSubscriptionExecute(r AllApiApiGetMsgVpnQueueSubscriptionRequest) (MsgVpnQueueSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnQueueSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnQueueSubscriptionsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnQueueSubscriptionsRequest) Count(count int32) AllApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnQueueSubscriptionsRequest) Cursor(cursor string) AllApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnQueueSubscriptionsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnQueueSubscriptionsRequest) Where(where []string) AllApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnQueueSubscriptionsRequest) Select_(select_ []string) AllApiApiGetMsgVpnQueueSubscriptionsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnQueueSubscriptionsRequest) Execute() (MsgVpnQueueSubscriptionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnQueueSubscriptionsExecute(r)
}

/*
 * GetMsgVpnQueueSubscriptions Get a list of Queue Subscription objects.
 * Get a list of Queue Subscription objects.

One or more Queue Subscriptions can be added to a durable queue so that Guaranteed messages published to matching topics are also delivered to and spooled by the queue.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||
subscriptionTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @return AllApiApiGetMsgVpnQueueSubscriptionsRequest
*/
func (a *AllApiService) GetMsgVpnQueueSubscriptions(ctx _context.Context, msgVpnName string, queueName string) AllApiApiGetMsgVpnQueueSubscriptionsRequest {
	return AllApiApiGetMsgVpnQueueSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueSubscriptionsResponse
 */
func (a *AllApiService) GetMsgVpnQueueSubscriptionsExecute(r AllApiApiGetMsgVpnQueueSubscriptionsRequest) (MsgVpnQueueSubscriptionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueSubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnQueueSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnQueueTemplateRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	queueTemplateName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnQueueTemplateRequest) Select_(select_ []string) AllApiApiGetMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnQueueTemplateRequest) Execute() (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnQueueTemplateExecute(r)
}

/*
 * GetMsgVpnQueueTemplate Get a Queue Template object.
 * Get a Queue Template object.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueTemplateName The name of the Queue Template.
 * @return AllApiApiGetMsgVpnQueueTemplateRequest
*/
func (a *AllApiService) GetMsgVpnQueueTemplate(ctx _context.Context, msgVpnName string, queueTemplateName string) AllApiApiGetMsgVpnQueueTemplateRequest {
	return AllApiApiGetMsgVpnQueueTemplateRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueTemplateResponse
 */
func (a *AllApiService) GetMsgVpnQueueTemplateExecute(r AllApiApiGetMsgVpnQueueTemplateRequest) (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", _neturl.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnQueueTemplatesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnQueueTemplatesRequest) Count(count int32) AllApiApiGetMsgVpnQueueTemplatesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnQueueTemplatesRequest) Cursor(cursor string) AllApiApiGetMsgVpnQueueTemplatesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnQueueTemplatesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnQueueTemplatesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnQueueTemplatesRequest) Where(where []string) AllApiApiGetMsgVpnQueueTemplatesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnQueueTemplatesRequest) Select_(select_ []string) AllApiApiGetMsgVpnQueueTemplatesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnQueueTemplatesRequest) Execute() (MsgVpnQueueTemplatesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnQueueTemplatesExecute(r)
}

/*
 * GetMsgVpnQueueTemplates Get a list of Queue Template objects.
 * Get a list of Queue Template objects.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnQueueTemplatesRequest
*/
func (a *AllApiService) GetMsgVpnQueueTemplates(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnQueueTemplatesRequest {
	return AllApiApiGetMsgVpnQueueTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueTemplatesResponse
 */
func (a *AllApiService) GetMsgVpnQueueTemplatesExecute(r AllApiApiGetMsgVpnQueueTemplatesRequest) (MsgVpnQueueTemplatesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueTemplatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnQueueTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnQueuesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnQueuesRequest) Count(count int32) AllApiApiGetMsgVpnQueuesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnQueuesRequest) Cursor(cursor string) AllApiApiGetMsgVpnQueuesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnQueuesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnQueuesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnQueuesRequest) Where(where []string) AllApiApiGetMsgVpnQueuesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnQueuesRequest) Select_(select_ []string) AllApiApiGetMsgVpnQueuesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnQueuesRequest) Execute() (MsgVpnQueuesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnQueuesExecute(r)
}

/*
 * GetMsgVpnQueues Get a list of Queue objects.
 * Get a list of Queue objects.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnQueuesRequest
*/
func (a *AllApiService) GetMsgVpnQueues(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnQueuesRequest {
	return AllApiApiGetMsgVpnQueuesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueuesResponse
 */
func (a *AllApiService) GetMsgVpnQueuesExecute(r AllApiApiGetMsgVpnQueuesRequest) (MsgVpnQueuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnQueues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnReplayLogRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	replayLogName  string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnReplayLogRequest) Select_(select_ []string) AllApiApiGetMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnReplayLogRequest) Execute() (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnReplayLogExecute(r)
}

/*
 * GetMsgVpnReplayLog Get a Replay Log object.
 * Get a Replay Log object.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replayLogName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.10.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replayLogName The name of the Replay Log.
 * @return AllApiApiGetMsgVpnReplayLogRequest
*/
func (a *AllApiService) GetMsgVpnReplayLog(ctx _context.Context, msgVpnName string, replayLogName string) AllApiApiGetMsgVpnReplayLogRequest {
	return AllApiApiGetMsgVpnReplayLogRequest{
		ApiService:    a,
		ctx:           ctx,
		msgVpnName:    msgVpnName,
		replayLogName: replayLogName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplayLogResponse
 */
func (a *AllApiService) GetMsgVpnReplayLogExecute(r AllApiApiGetMsgVpnReplayLogRequest) (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", _neturl.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnReplayLogsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnReplayLogsRequest) Count(count int32) AllApiApiGetMsgVpnReplayLogsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnReplayLogsRequest) Cursor(cursor string) AllApiApiGetMsgVpnReplayLogsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnReplayLogsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnReplayLogsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnReplayLogsRequest) Where(where []string) AllApiApiGetMsgVpnReplayLogsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnReplayLogsRequest) Select_(select_ []string) AllApiApiGetMsgVpnReplayLogsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnReplayLogsRequest) Execute() (MsgVpnReplayLogsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnReplayLogsExecute(r)
}

/*
 * GetMsgVpnReplayLogs Get a list of Replay Log objects.
 * Get a list of Replay Log objects.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replayLogName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.10.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnReplayLogsRequest
*/
func (a *AllApiService) GetMsgVpnReplayLogs(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnReplayLogsRequest {
	return AllApiApiGetMsgVpnReplayLogsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplayLogsResponse
 */
func (a *AllApiService) GetMsgVpnReplayLogsExecute(r AllApiApiGetMsgVpnReplayLogsRequest) (MsgVpnReplayLogsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplayLogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnReplayLogs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnReplicatedTopicRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	replicatedTopic string
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiGetMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnReplicatedTopicRequest) Select_(select_ []string) AllApiApiGetMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnReplicatedTopicRequest) Execute() (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnReplicatedTopicExecute(r)
}

/*
 * GetMsgVpnReplicatedTopic Get a Replicated Topic object.
 * Get a Replicated Topic object.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replicatedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 * @return AllApiApiGetMsgVpnReplicatedTopicRequest
*/
func (a *AllApiService) GetMsgVpnReplicatedTopic(ctx _context.Context, msgVpnName string, replicatedTopic string) AllApiApiGetMsgVpnReplicatedTopicRequest {
	return AllApiApiGetMsgVpnReplicatedTopicRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplicatedTopicResponse
 */
func (a *AllApiService) GetMsgVpnReplicatedTopicExecute(r AllApiApiGetMsgVpnReplicatedTopicRequest) (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", _neturl.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnReplicatedTopicsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnReplicatedTopicsRequest) Count(count int32) AllApiApiGetMsgVpnReplicatedTopicsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnReplicatedTopicsRequest) Cursor(cursor string) AllApiApiGetMsgVpnReplicatedTopicsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnReplicatedTopicsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnReplicatedTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnReplicatedTopicsRequest) Where(where []string) AllApiApiGetMsgVpnReplicatedTopicsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnReplicatedTopicsRequest) Select_(select_ []string) AllApiApiGetMsgVpnReplicatedTopicsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnReplicatedTopicsRequest) Execute() (MsgVpnReplicatedTopicsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnReplicatedTopicsExecute(r)
}

/*
 * GetMsgVpnReplicatedTopics Get a list of Replicated Topic objects.
 * Get a list of Replicated Topic objects.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
replicatedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnReplicatedTopicsRequest
*/
func (a *AllApiService) GetMsgVpnReplicatedTopics(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnReplicatedTopicsRequest {
	return AllApiApiGetMsgVpnReplicatedTopicsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplicatedTopicsResponse
 */
func (a *AllApiService) GetMsgVpnReplicatedTopicsExecute(r AllApiApiGetMsgVpnReplicatedTopicsRequest) (MsgVpnReplicatedTopicsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplicatedTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnReplicatedTopics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRequest) Execute() (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPoint Get a REST Delivery Point object.
 * Get a REST Delivery Point object.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiGetMsgVpnRestDeliveryPointRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPoint(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiGetMsgVpnRestDeliveryPointRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointExecute(r AllApiApiGetMsgVpnRestDeliveryPointRequest) (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	queueBindingName      string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointQueueBinding Get a Queue Binding object.
 * Get a Queue Binding object.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueBindingName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param queueBindingName The name of a queue in the Message VPN.
 * @return AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointQueueBinding(ctx _context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName:      queueBindingName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointQueueBindingResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointQueueBindingExecute(r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingRequest) (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", _neturl.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	count                 *int32
	cursor                *string
	opaquePassword        *string
	where                 *[]string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Count(count int32) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Cursor(cursor string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Where(where []string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) Execute() (MsgVpnRestDeliveryPointQueueBindingsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointQueueBindingsExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointQueueBindings Get a list of Queue Binding objects.
 * Get a list of Queue Binding objects.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
queueBindingName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointQueueBindings(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointQueueBindingsResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointQueueBindingsExecute(r AllApiApiGetMsgVpnRestDeliveryPointQueueBindingsRequest) (MsgVpnRestDeliveryPointQueueBindingsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointQueueBindingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointQueueBindings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointRestConsumer Get a REST Consumer object.
 * Get a REST Consumer object.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationClientCertContent||x||x
authenticationClientCertPassword||x||
authenticationHttpBasicPassword||x||x
authenticationHttpHeaderValue||x||x
authenticationOauthClientSecret||x||x
authenticationOauthJwtSecretKey||x||x
msgVpnName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumer(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerExecute(r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerRequest) (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	oauthJwtClaimName     string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim Get a Claim object.
 * Get a Claim object.

A Claim is added to the JWT sent to the OAuth token request endpoint.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthJwtClaimName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.21.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @param oauthJwtClaimName The name of the additional claim. Cannot be \"exp\", \"iat\", or \"jti\".
 * @return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, oauthJwtClaimName string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
		oauthJwtClaimName:     oauthJwtClaimName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimExecute(r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimRequest) (MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims/{oauthJwtClaimName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthJwtClaimName"+"}", _neturl.PathEscape(parameterToString(r.oauthJwtClaimName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	count                 *int32
	cursor                *string
	opaquePassword        *string
	where                 *[]string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Count(count int32) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Cursor(cursor string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Where(where []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaims Get a list of Claim objects.
 * Get a list of Claim objects.

A Claim is added to the JWT sent to the OAuth token request endpoint.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
oauthJwtClaimName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.21.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaims(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsExecute(r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsRequest) (MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaims")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/oauthJwtClaims"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	tlsTrustedCommonName  string
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName Get a Trusted Common Name object.
 * Get a Trusted Common Name object.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x||x|
restConsumerName|x||x|
restDeliveryPointName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @param tlsTrustedCommonName The expected trusted common name of the remote certificate.
 * @return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string, tlsTrustedCommonName string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
		tlsTrustedCommonName:  tlsTrustedCommonName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameExecute(r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameRequest) (MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tlsTrustedCommonName"+"}", _neturl.PathEscape(parameterToString(r.tlsTrustedCommonName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	opaquePassword        *string
	where                 *[]string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) Where(where []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames Get a list of Trusted Common Name objects.
 * Get a list of Trusted Common Name objects.

The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x||x|
restConsumerName|x||x|
restDeliveryPointName|x||x|
tlsTrustedCommonName|x||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been deprecated since (will be deprecated in next SEMP version). Common Name validation has been replaced by Server Certificate Name validation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesExecute(r AllApiApiGetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesRequest) (MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	count                 *int32
	cursor                *string
	opaquePassword        *string
	where                 *[]string
	select_               *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Count(count int32) AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Cursor(cursor string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Where(where []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) Execute() (MsgVpnRestDeliveryPointRestConsumersResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointRestConsumersExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPointRestConsumers Get a list of REST Consumer objects.
 * Get a list of REST Consumer objects.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
authenticationClientCertContent||x||x
authenticationClientCertPassword||x||
authenticationHttpBasicPassword||x||x
authenticationHttpHeaderValue||x||x
authenticationOauthClientSecret||x||x
authenticationOauthJwtSecretKey||x||x
msgVpnName|x|||
restConsumerName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumers(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumersResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointRestConsumersExecute(r AllApiApiGetMsgVpnRestDeliveryPointRestConsumersRequest) (MsgVpnRestDeliveryPointRestConsumersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPointRestConsumers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnRestDeliveryPointsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnRestDeliveryPointsRequest) Count(count int32) AllApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointsRequest) Cursor(cursor string) AllApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointsRequest) Where(where []string) AllApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnRestDeliveryPointsRequest) Select_(select_ []string) AllApiApiGetMsgVpnRestDeliveryPointsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnRestDeliveryPointsRequest) Execute() (MsgVpnRestDeliveryPointsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnRestDeliveryPointsExecute(r)
}

/*
 * GetMsgVpnRestDeliveryPoints Get a list of REST Delivery Point objects.
 * Get a list of REST Delivery Point objects.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
restDeliveryPointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnRestDeliveryPointsRequest
*/
func (a *AllApiService) GetMsgVpnRestDeliveryPoints(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnRestDeliveryPointsRequest {
	return AllApiApiGetMsgVpnRestDeliveryPointsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointsResponse
 */
func (a *AllApiService) GetMsgVpnRestDeliveryPointsExecute(r AllApiApiGetMsgVpnRestDeliveryPointsRequest) (MsgVpnRestDeliveryPointsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnRestDeliveryPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnSequencedTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	sequencedTopic string
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnSequencedTopicRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnSequencedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnSequencedTopicRequest) Select_(select_ []string) AllApiApiGetMsgVpnSequencedTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnSequencedTopicRequest) Execute() (MsgVpnSequencedTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnSequencedTopicExecute(r)
}

/*
 * GetMsgVpnSequencedTopic Get a Sequenced Topic object.
 * Get a Sequenced Topic object.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
sequencedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param sequencedTopic Topic for applying sequence numbers.
 * @return AllApiApiGetMsgVpnSequencedTopicRequest
*/
func (a *AllApiService) GetMsgVpnSequencedTopic(ctx _context.Context, msgVpnName string, sequencedTopic string) AllApiApiGetMsgVpnSequencedTopicRequest {
	return AllApiApiGetMsgVpnSequencedTopicRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		sequencedTopic: sequencedTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnSequencedTopicResponse
 */
func (a *AllApiService) GetMsgVpnSequencedTopicExecute(r AllApiApiGetMsgVpnSequencedTopicRequest) (MsgVpnSequencedTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnSequencedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnSequencedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sequencedTopic"+"}", _neturl.PathEscape(parameterToString(r.sequencedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnSequencedTopicsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnSequencedTopicsRequest) Count(count int32) AllApiApiGetMsgVpnSequencedTopicsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnSequencedTopicsRequest) Cursor(cursor string) AllApiApiGetMsgVpnSequencedTopicsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnSequencedTopicsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnSequencedTopicsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnSequencedTopicsRequest) Where(where []string) AllApiApiGetMsgVpnSequencedTopicsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnSequencedTopicsRequest) Select_(select_ []string) AllApiApiGetMsgVpnSequencedTopicsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnSequencedTopicsRequest) Execute() (MsgVpnSequencedTopicsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnSequencedTopicsExecute(r)
}

/*
 * GetMsgVpnSequencedTopics Get a list of Sequenced Topic objects.
 * Get a list of Sequenced Topic objects.

A Sequenced Topic is a topic subscription for which any matching messages received on the Message VPN are assigned a sequence number that is monotonically increased by a value of one per message.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
sequencedTopic|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnSequencedTopicsRequest
*/
func (a *AllApiService) GetMsgVpnSequencedTopics(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnSequencedTopicsRequest {
	return AllApiApiGetMsgVpnSequencedTopicsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnSequencedTopicsResponse
 */
func (a *AllApiService) GetMsgVpnSequencedTopicsExecute(r AllApiApiGetMsgVpnSequencedTopicsRequest) (MsgVpnSequencedTopicsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnSequencedTopicsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnSequencedTopics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/sequencedTopics"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnTopicEndpointRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	topicEndpointName string
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiGetMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointRequest) Select_(select_ []string) AllApiApiGetMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnTopicEndpointRequest) Execute() (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointExecute(r)
}

/*
 * GetMsgVpnTopicEndpoint Get a Topic Endpoint object.
 * Get a Topic Endpoint object.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointName The name of the Topic Endpoint.
 * @return AllApiApiGetMsgVpnTopicEndpointRequest
*/
func (a *AllApiService) GetMsgVpnTopicEndpoint(ctx _context.Context, msgVpnName string, topicEndpointName string) AllApiApiGetMsgVpnTopicEndpointRequest {
	return AllApiApiGetMsgVpnTopicEndpointRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointResponse
 */
func (a *AllApiService) GetMsgVpnTopicEndpointExecute(r AllApiApiGetMsgVpnTopicEndpointRequest) (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnTopicEndpointTemplateRequest struct {
	ctx                       _context.Context
	ApiService                *AllApiService
	msgVpnName                string
	topicEndpointTemplateName string
	opaquePassword            *string
	select_                   *[]string
}

func (r AllApiApiGetMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) AllApiApiGetMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnTopicEndpointTemplateRequest) Execute() (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointTemplateExecute(r)
}

/*
 * GetMsgVpnTopicEndpointTemplate Get a Topic Endpoint Template object.
 * Get a Topic Endpoint Template object.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 * @return AllApiApiGetMsgVpnTopicEndpointTemplateRequest
*/
func (a *AllApiService) GetMsgVpnTopicEndpointTemplate(ctx _context.Context, msgVpnName string, topicEndpointTemplateName string) AllApiApiGetMsgVpnTopicEndpointTemplateRequest {
	return AllApiApiGetMsgVpnTopicEndpointTemplateRequest{
		ApiService:                a,
		ctx:                       ctx,
		msgVpnName:                msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointTemplateResponse
 */
func (a *AllApiService) GetMsgVpnTopicEndpointTemplateExecute(r AllApiApiGetMsgVpnTopicEndpointTemplateRequest) (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnTopicEndpointTemplatesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) Count(count int32) AllApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) Cursor(cursor string) AllApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) Where(where []string) AllApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) Select_(select_ []string) AllApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) Execute() (MsgVpnTopicEndpointTemplatesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointTemplatesExecute(r)
}

/*
 * GetMsgVpnTopicEndpointTemplates Get a list of Topic Endpoint Template objects.
 * Get a list of Topic Endpoint Template objects.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointTemplateName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnTopicEndpointTemplatesRequest
*/
func (a *AllApiService) GetMsgVpnTopicEndpointTemplates(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnTopicEndpointTemplatesRequest {
	return AllApiApiGetMsgVpnTopicEndpointTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointTemplatesResponse
 */
func (a *AllApiService) GetMsgVpnTopicEndpointTemplatesExecute(r AllApiApiGetMsgVpnTopicEndpointTemplatesRequest) (MsgVpnTopicEndpointTemplatesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointTemplatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnTopicEndpointTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnTopicEndpointsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnTopicEndpointsRequest) Count(count int32) AllApiApiGetMsgVpnTopicEndpointsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointsRequest) Cursor(cursor string) AllApiApiGetMsgVpnTopicEndpointsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnTopicEndpointsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointsRequest) Where(where []string) AllApiApiGetMsgVpnTopicEndpointsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnTopicEndpointsRequest) Select_(select_ []string) AllApiApiGetMsgVpnTopicEndpointsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnTopicEndpointsRequest) Execute() (MsgVpnTopicEndpointsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnTopicEndpointsExecute(r)
}

/*
 * GetMsgVpnTopicEndpoints Get a list of Topic Endpoint objects.
 * Get a list of Topic Endpoint objects.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
msgVpnName|x|||
topicEndpointName|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiGetMsgVpnTopicEndpointsRequest
*/
func (a *AllApiService) GetMsgVpnTopicEndpoints(ctx _context.Context, msgVpnName string) AllApiApiGetMsgVpnTopicEndpointsRequest {
	return AllApiApiGetMsgVpnTopicEndpointsRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointsResponse
 */
func (a *AllApiService) GetMsgVpnTopicEndpointsExecute(r AllApiApiGetMsgVpnTopicEndpointsRequest) (MsgVpnTopicEndpointsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpnTopicEndpoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetMsgVpnsRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetMsgVpnsRequest) Count(count int32) AllApiApiGetMsgVpnsRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetMsgVpnsRequest) Cursor(cursor string) AllApiApiGetMsgVpnsRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetMsgVpnsRequest) OpaquePassword(opaquePassword string) AllApiApiGetMsgVpnsRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetMsgVpnsRequest) Where(where []string) AllApiApiGetMsgVpnsRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetMsgVpnsRequest) Select_(select_ []string) AllApiApiGetMsgVpnsRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetMsgVpnsRequest) Execute() (MsgVpnsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMsgVpnsExecute(r)
}

/*
 * GetMsgVpns Get a list of Message VPN objects.
 * Get a list of Message VPN objects.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||x|
msgVpnName|x|||
replicationBridgeAuthenticationBasicPassword||x||x
replicationBridgeAuthenticationClientCertContent||x||x
replicationBridgeAuthenticationClientCertPassword||x||
replicationEnabledQueueBehavior||x||
restTlsServerCertEnforceTrustedCommonNameEnabled|||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetMsgVpnsRequest
*/
func (a *AllApiService) GetMsgVpns(ctx _context.Context) AllApiApiGetMsgVpnsRequest {
	return AllApiApiGetMsgVpnsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnsResponse
 */
func (a *AllApiService) GetMsgVpnsExecute(r AllApiApiGetMsgVpnsRequest) (MsgVpnsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetMsgVpns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetSystemInformationRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiGetSystemInformationRequest) OpaquePassword(opaquePassword string) AllApiApiGetSystemInformationRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetSystemInformationRequest) Select_(select_ []string) AllApiApiGetSystemInformationRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetSystemInformationRequest) Execute() (SystemInformationResponse, *_nethttp.Response, error) {
	return r.ApiService.GetSystemInformationExecute(r)
}

/*
 * GetSystemInformation Get a System Information object.
 * Get a System Information object.

The System Information object provides metadata about the SEMP API.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
platform|||x|
sempVersion|||x|



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation.

This has been deprecated since 2.2. /systemInformation was replaced by /about/api.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetSystemInformationRequest
*/
func (a *AllApiService) GetSystemInformation(ctx _context.Context) AllApiApiGetSystemInformationRequest {
	return AllApiApiGetSystemInformationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return SystemInformationResponse
 */
func (a *AllApiService) GetSystemInformationExecute(r AllApiApiGetSystemInformationRequest) (SystemInformationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SystemInformationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetSystemInformation")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/systemInformation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetVirtualHostnameRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	virtualHostname string
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiGetVirtualHostnameRequest) OpaquePassword(opaquePassword string) AllApiApiGetVirtualHostnameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetVirtualHostnameRequest) Select_(select_ []string) AllApiApiGetVirtualHostnameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetVirtualHostnameRequest) Execute() (VirtualHostnameResponse, *_nethttp.Response, error) {
	return r.ApiService.GetVirtualHostnameExecute(r)
}

/*
 * GetVirtualHostname Get a Virtual Hostname object.
 * Get a Virtual Hostname object.

A Virtual Hostname is a provisioned object on a message broker that contains a Virtual Hostname to Message VPN mapping.

Clients which connect to a global (as opposed to per Message VPN) port and provides this hostname will be directed to its corresponding Message VPN. A case-insentive match is performed on the full client-provided hostname against the configured virtual-hostname.

This mechanism is only supported for hostnames provided through the Server Name Indication (SNI) extension of TLS.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
virtualHostname|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.17.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param virtualHostname The virtual hostname.
 * @return AllApiApiGetVirtualHostnameRequest
*/
func (a *AllApiService) GetVirtualHostname(ctx _context.Context, virtualHostname string) AllApiApiGetVirtualHostnameRequest {
	return AllApiApiGetVirtualHostnameRequest{
		ApiService:      a,
		ctx:             ctx,
		virtualHostname: virtualHostname,
	}
}

/*
 * Execute executes the request
 * @return VirtualHostnameResponse
 */
func (a *AllApiService) GetVirtualHostnameExecute(r AllApiApiGetVirtualHostnameRequest) (VirtualHostnameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VirtualHostnameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetVirtualHostname")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualHostnames/{virtualHostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualHostname"+"}", _neturl.PathEscape(parameterToString(r.virtualHostname, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiGetVirtualHostnamesRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	count          *int32
	cursor         *string
	opaquePassword *string
	where          *[]string
	select_        *[]string
}

func (r AllApiApiGetVirtualHostnamesRequest) Count(count int32) AllApiApiGetVirtualHostnamesRequest {
	r.count = &count
	return r
}
func (r AllApiApiGetVirtualHostnamesRequest) Cursor(cursor string) AllApiApiGetVirtualHostnamesRequest {
	r.cursor = &cursor
	return r
}
func (r AllApiApiGetVirtualHostnamesRequest) OpaquePassword(opaquePassword string) AllApiApiGetVirtualHostnamesRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiGetVirtualHostnamesRequest) Where(where []string) AllApiApiGetVirtualHostnamesRequest {
	r.where = &where
	return r
}
func (r AllApiApiGetVirtualHostnamesRequest) Select_(select_ []string) AllApiApiGetVirtualHostnamesRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiGetVirtualHostnamesRequest) Execute() (VirtualHostnamesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetVirtualHostnamesExecute(r)
}

/*
 * GetVirtualHostnames Get a list of Virtual Hostname objects.
 * Get a list of Virtual Hostname objects.

A Virtual Hostname is a provisioned object on a message broker that contains a Virtual Hostname to Message VPN mapping.

Clients which connect to a global (as opposed to per Message VPN) port and provides this hostname will be directed to its corresponding Message VPN. A case-insentive match is performed on the full client-provided hostname against the configured virtual-hostname.

This mechanism is only supported for hostnames provided through the Server Name Indication (SNI) extension of TLS.


Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
virtualHostname|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.17.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiGetVirtualHostnamesRequest
*/
func (a *AllApiService) GetVirtualHostnames(ctx _context.Context) AllApiApiGetVirtualHostnamesRequest {
	return AllApiApiGetVirtualHostnamesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return VirtualHostnamesResponse
 */
func (a *AllApiService) GetVirtualHostnamesExecute(r AllApiApiGetVirtualHostnamesRequest) (VirtualHostnamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VirtualHostnamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.GetVirtualHostnames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualHostnames"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.where != nil {
		localVarQueryParams.Add("where", parameterToString(*r.where, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *CertAuthority
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceCertAuthorityRequest) Body(body CertAuthority) AllApiApiReplaceCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceCertAuthorityRequest) Select_(select_ []string) AllApiApiReplaceCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceCertAuthorityRequest) Execute() (CertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceCertAuthorityExecute(r)
}

/*
 * ReplaceCertAuthority Replace a Certificate Authority object.
 * Replace a Certificate Authority object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x|||x|
certContent|||||x|
crlDayList|||||x|
crlTimeList|||||x|
crlUrl||||x|x|
ocspNonResponderCertEnabled|||||x|
ocspOverrideUrl|||||x|
ocspTimeout|||||x|
revocationCheckEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
CertAuthority|crlDayList|crlTimeList|
CertAuthority|crlTimeList|crlDayList|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities and domainCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiReplaceCertAuthorityRequest
*/
func (a *AllApiService) ReplaceCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiReplaceCertAuthorityRequest {
	return AllApiApiReplaceCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityResponse
 */
func (a *AllApiService) ReplaceCertAuthorityExecute(r AllApiApiReplaceCertAuthorityRequest) (CertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceClientCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *ClientCertAuthority
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceClientCertAuthorityRequest) Body(body ClientCertAuthority) AllApiApiReplaceClientCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceClientCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceClientCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceClientCertAuthorityRequest) Select_(select_ []string) AllApiApiReplaceClientCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceClientCertAuthorityRequest) Execute() (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceClientCertAuthorityExecute(r)
}

/*
 * ReplaceClientCertAuthority Replace a Client Certificate Authority object.
 * Replace a Client Certificate Authority object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x||||
crlUrl||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
ClientCertAuthority|crlDayList|crlTimeList|
ClientCertAuthority|crlTimeList|crlDayList|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiReplaceClientCertAuthorityRequest
*/
func (a *AllApiService) ReplaceClientCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiReplaceClientCertAuthorityRequest {
	return AllApiApiReplaceClientCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityResponse
 */
func (a *AllApiService) ReplaceClientCertAuthorityExecute(r AllApiApiReplaceClientCertAuthorityRequest) (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceClientCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceDmrClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	body           *DmrCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceDmrClusterRequest) Body(body DmrCluster) AllApiApiReplaceDmrClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceDmrClusterRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceDmrClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceDmrClusterRequest) Select_(select_ []string) AllApiApiReplaceDmrClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceDmrClusterRequest) Execute() (DmrClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceDmrClusterExecute(r)
}

/*
 * ReplaceDmrCluster Replace a Cluster object.
 * Replace a Cluster object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x||x
authenticationClientCertContent|||x|x||x
authenticationClientCertPassword|||x|x||
directOnlyEnabled||x||||
dmrClusterName|x|x||||
nodeName||x||||
tlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
DmrCluster|authenticationClientCertPassword|authenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @return AllApiApiReplaceDmrClusterRequest
*/
func (a *AllApiService) ReplaceDmrCluster(ctx _context.Context, dmrClusterName string) AllApiApiReplaceDmrClusterRequest {
	return AllApiApiReplaceDmrClusterRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterResponse
 */
func (a *AllApiService) ReplaceDmrClusterExecute(r AllApiApiReplaceDmrClusterRequest) (DmrClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceDmrCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceDmrClusterLinkRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	body           *DmrClusterLink
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceDmrClusterLinkRequest) Body(body DmrClusterLink) AllApiApiReplaceDmrClusterLinkRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceDmrClusterLinkRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceDmrClusterLinkRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceDmrClusterLinkRequest) Select_(select_ []string) AllApiApiReplaceDmrClusterLinkRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceDmrClusterLinkRequest) Execute() (DmrClusterLinkResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceDmrClusterLinkExecute(r)
}

/*
 * ReplaceDmrClusterLink Replace a Link object.
 * Replace a Link object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x||x
authenticationScheme||||x||
dmrClusterName|x|x||||
egressFlowWindowSize||||x||
initiator||||x||
remoteNodeName|x|x||||
span||||x||
transportCompressedEnabled||||x||
transportTlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiReplaceDmrClusterLinkRequest
*/
func (a *AllApiService) ReplaceDmrClusterLink(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiReplaceDmrClusterLinkRequest {
	return AllApiApiReplaceDmrClusterLinkRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkResponse
 */
func (a *AllApiService) ReplaceDmrClusterLinkExecute(r AllApiApiReplaceDmrClusterLinkRequest) (DmrClusterLinkResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceDmrClusterLink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceDomainCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *DomainCertAuthority
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceDomainCertAuthorityRequest) Body(body DomainCertAuthority) AllApiApiReplaceDomainCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceDomainCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceDomainCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceDomainCertAuthorityRequest) Select_(select_ []string) AllApiApiReplaceDomainCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceDomainCertAuthorityRequest) Execute() (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceDomainCertAuthorityExecute(r)
}

/*
 * ReplaceDomainCertAuthority Replace a Domain Certificate Authority object.
 * Replace a Domain Certificate Authority object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Certificate Authorities trusted for domain verification.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiReplaceDomainCertAuthorityRequest
*/
func (a *AllApiService) ReplaceDomainCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiReplaceDomainCertAuthorityRequest {
	return AllApiApiReplaceDomainCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return DomainCertAuthorityResponse
 */
func (a *AllApiService) ReplaceDomainCertAuthorityExecute(r AllApiApiReplaceDomainCertAuthorityRequest) (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DomainCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceDomainCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domainCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpn
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnRequest) Body(body MsgVpn) AllApiApiReplaceMsgVpnRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnRequest) Execute() (MsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnExecute(r)
}

/*
 * ReplaceMsgVpn Replace a Message VPN object.
 * Replace a Message VPN object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||||x|
msgVpnName|x|x||||
replicationBridgeAuthenticationBasicPassword|||x|||x
replicationBridgeAuthenticationClientCertContent|||x|||x
replicationBridgeAuthenticationClientCertPassword|||x|||
replicationEnabledQueueBehavior|||x|||
restTlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
alias|global/read-write
authenticationBasicEnabled|global/read-write
authenticationBasicProfileName|global/read-write
authenticationBasicRadiusDomain|global/read-write
authenticationBasicType|global/read-write
authenticationClientCertAllowApiProvidedUsernameEnabled|global/read-write
authenticationClientCertEnabled|global/read-write
authenticationClientCertMaxChainDepth|global/read-write
authenticationClientCertRevocationCheckMode|global/read-write
authenticationClientCertUsernameSource|global/read-write
authenticationClientCertValidateDateEnabled|global/read-write
authenticationKerberosAllowApiProvidedUsernameEnabled|global/read-write
authenticationKerberosEnabled|global/read-write
authenticationOauthEnabled|global/read-write
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
bridgingTlsServerCertMaxChainDepth|global/read-write
bridgingTlsServerCertValidateDateEnabled|global/read-write
bridgingTlsServerCertValidateNameEnabled|global/read-write
dmrEnabled|global/read-write
exportSubscriptionsEnabled|global/read-write
maxConnectionCount|global/read-write
maxEgressFlowCount|global/read-write
maxEndpointCount|global/read-write
maxIngressFlowCount|global/read-write
maxMsgSpoolUsage|global/read-write
maxSubscriptionCount|global/read-write
maxTransactedSessionCount|global/read-write
maxTransactionCount|global/read-write
mqttRetainMaxMemory|global/read-write
replicationBridgeAuthenticationBasicClientUsername|global/read-write
replicationBridgeAuthenticationBasicPassword|global/read-write
replicationBridgeAuthenticationClientCertContent|global/read-write
replicationBridgeAuthenticationClientCertPassword|global/read-write
replicationBridgeAuthenticationScheme|global/read-write
replicationBridgeCompressedDataEnabled|global/read-write
replicationBridgeEgressFlowWindowSize|global/read-write
replicationBridgeRetryDelay|global/read-write
replicationBridgeTlsEnabled|global/read-write
replicationBridgeUnidirectionalClientProfileName|global/read-write
replicationEnabled|global/read-write
replicationEnabledQueueBehavior|global/read-write
replicationQueueMaxMsgSpoolUsage|global/read-write
replicationRole|global/read-write
restTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
restTlsServerCertMaxChainDepth|global/read-write
restTlsServerCertValidateDateEnabled|global/read-write
restTlsServerCertValidateNameEnabled|global/read-write
sempOverMsgBusAdminClientEnabled|global/read-write
sempOverMsgBusAdminDistributedCacheEnabled|global/read-write
sempOverMsgBusAdminEnabled|global/read-write
sempOverMsgBusEnabled|global/read-write
sempOverMsgBusShowEnabled|global/read-write
serviceAmqpMaxConnectionCount|global/read-write
serviceAmqpPlainTextListenPort|global/read-write
serviceAmqpTlsListenPort|global/read-write
serviceMqttMaxConnectionCount|global/read-write
serviceMqttPlainTextListenPort|global/read-write
serviceMqttTlsListenPort|global/read-write
serviceMqttTlsWebSocketListenPort|global/read-write
serviceMqttWebSocketListenPort|global/read-write
serviceRestIncomingMaxConnectionCount|global/read-write
serviceRestIncomingPlainTextListenPort|global/read-write
serviceRestIncomingTlsListenPort|global/read-write
serviceRestOutgoingMaxConnectionCount|global/read-write
serviceSmfMaxConnectionCount|global/read-write
serviceWebMaxConnectionCount|global/read-write



This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiReplaceMsgVpnRequest
*/
func (a *AllApiService) ReplaceMsgVpn(ctx _context.Context, msgVpnName string) AllApiApiReplaceMsgVpnRequest {
	return AllApiApiReplaceMsgVpnRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnResponse
 */
func (a *AllApiService) ReplaceMsgVpnExecute(r AllApiApiReplaceMsgVpnRequest) (MsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnAclProfileRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfile
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnAclProfileRequest) Body(body MsgVpnAclProfile) AllApiApiReplaceMsgVpnAclProfileRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnAclProfileRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnAclProfileRequest) Execute() (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnAclProfileExecute(r)
}

/*
 * ReplaceMsgVpnAclProfile Replace an ACL Profile object.
 * Replace an ACL Profile object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiReplaceMsgVpnAclProfileRequest
*/
func (a *AllApiService) ReplaceMsgVpnAclProfile(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiReplaceMsgVpnAclProfileRequest {
	return AllApiApiReplaceMsgVpnAclProfileRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileResponse
 */
func (a *AllApiService) ReplaceMsgVpnAclProfileExecute(r AllApiApiReplaceMsgVpnAclProfileRequest) (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	oauthProviderName string
	body              *MsgVpnAuthenticationOauthProvider
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) Body(body MsgVpnAuthenticationOauthProvider) AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) Execute() (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
 * ReplaceMsgVpnAuthenticationOauthProvider Replace an OAuth Provider object.
 * Replace an OAuth Provider object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
oauthProviderName|x|x||||
tokenIntrospectionPassword|||x|||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param oauthProviderName The name of the OAuth Provider.
 * @return AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest
*/
func (a *AllApiService) ReplaceMsgVpnAuthenticationOauthProvider(ctx _context.Context, msgVpnName string, oauthProviderName string) AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest {
	return AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthenticationOauthProviderResponse
 */
func (a *AllApiService) ReplaceMsgVpnAuthenticationOauthProviderExecute(r AllApiApiReplaceMsgVpnAuthenticationOauthProviderRequest) (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", _neturl.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnAuthorizationGroupRequest struct {
	ctx                    _context.Context
	ApiService             *AllApiService
	msgVpnName             string
	authorizationGroupName string
	body                   *MsgVpnAuthorizationGroup
	opaquePassword         *string
	select_                *[]string
}

func (r AllApiApiReplaceMsgVpnAuthorizationGroupRequest) Body(body MsgVpnAuthorizationGroup) AllApiApiReplaceMsgVpnAuthorizationGroupRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnAuthorizationGroupRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnAuthorizationGroupRequest) Execute() (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnAuthorizationGroupExecute(r)
}

/*
 * ReplaceMsgVpnAuthorizationGroup Replace an LDAP Authorization Group object.
 * Replace an LDAP Authorization Group object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

To use client authorization groups configured on an external LDAP server to provide client authorizations, LDAP Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the LDAP server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
authorizationGroupName|x|x||||
clientProfileName||||x||
msgVpnName|x|x||||
orderAfterAuthorizationGroupName|||x|||
orderBeforeAuthorizationGroupName|||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param authorizationGroupName The name of the LDAP Authorization Group. Special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 * @return AllApiApiReplaceMsgVpnAuthorizationGroupRequest
*/
func (a *AllApiService) ReplaceMsgVpnAuthorizationGroup(ctx _context.Context, msgVpnName string, authorizationGroupName string) AllApiApiReplaceMsgVpnAuthorizationGroupRequest {
	return AllApiApiReplaceMsgVpnAuthorizationGroupRequest{
		ApiService:             a,
		ctx:                    ctx,
		msgVpnName:             msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthorizationGroupResponse
 */
func (a *AllApiService) ReplaceMsgVpnAuthorizationGroupExecute(r AllApiApiReplaceMsgVpnAuthorizationGroupRequest) (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", _neturl.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnBridgeRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	body                *MsgVpnBridge
	opaquePassword      *string
	select_             *[]string
}

func (r AllApiApiReplaceMsgVpnBridgeRequest) Body(body MsgVpnBridge) AllApiApiReplaceMsgVpnBridgeRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnBridgeRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnBridgeRequest) Execute() (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnBridgeExecute(r)
}

/*
 * ReplaceMsgVpnBridge Replace a Bridge object.
 * Replace a Bridge object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
maxTtl||||x||
msgVpnName|x|x||||
remoteAuthenticationBasicClientUsername||||x||
remoteAuthenticationBasicPassword|||x|x||x
remoteAuthenticationClientCertContent|||x|x||x
remoteAuthenticationClientCertPassword|||x|x||
remoteAuthenticationScheme||||x||
remoteDeliverToOnePriority||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiReplaceMsgVpnBridgeRequest
*/
func (a *AllApiService) ReplaceMsgVpnBridge(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiReplaceMsgVpnBridgeRequest {
	return AllApiApiReplaceMsgVpnBridgeRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeResponse
 */
func (a *AllApiService) ReplaceMsgVpnBridgeExecute(r AllApiApiReplaceMsgVpnBridgeRequest) (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	bridgeName            string
	bridgeVirtualRouter   string
	remoteMsgVpnName      string
	remoteMsgVpnLocation  string
	remoteMsgVpnInterface string
	body                  *MsgVpnBridgeRemoteMsgVpn
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) Body(body MsgVpnBridgeRemoteMsgVpn) AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) Execute() (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
 * ReplaceMsgVpnBridgeRemoteMsgVpn Replace a Remote Message VPN object.
 * Replace a Remote Message VPN object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
clientUsername||||x||
compressedDataEnabled||||x||
egressFlowWindowSize||||x||
msgVpnName|x|x||||
password|||x|x||x
remoteMsgVpnInterface|x|x||||
remoteMsgVpnLocation|x|x||||
remoteMsgVpnName|x|x||||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param remoteMsgVpnName The name of the remote Message VPN.
 * @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 * @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 * @return AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *AllApiService) ReplaceMsgVpnBridgeRemoteMsgVpn(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest {
	return AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		bridgeName:            bridgeName,
		bridgeVirtualRouter:   bridgeVirtualRouter,
		remoteMsgVpnName:      remoteMsgVpnName,
		remoteMsgVpnLocation:  remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteMsgVpnResponse
 */
func (a *AllApiService) ReplaceMsgVpnBridgeRemoteMsgVpnExecute(r AllApiApiReplaceMsgVpnBridgeRemoteMsgVpnRequest) (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnClientProfileRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	clientProfileName string
	body              *MsgVpnClientProfile
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceMsgVpnClientProfileRequest) Body(body MsgVpnClientProfile) AllApiApiReplaceMsgVpnClientProfileRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnClientProfileRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnClientProfileRequest) Execute() (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnClientProfileExecute(r)
}

/*
 * ReplaceMsgVpnClientProfile Replace a Client Profile object.
 * Replace a Client Profile object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
apiQueueManagementCopyFromOnCreateName|||||x|
apiTopicEndpointManagementCopyFromOnCreateName|||||x|
clientProfileName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @return AllApiApiReplaceMsgVpnClientProfileRequest
*/
func (a *AllApiService) ReplaceMsgVpnClientProfile(ctx _context.Context, msgVpnName string, clientProfileName string) AllApiApiReplaceMsgVpnClientProfileRequest {
	return AllApiApiReplaceMsgVpnClientProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		clientProfileName: clientProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientProfileResponse
 */
func (a *AllApiService) ReplaceMsgVpnClientProfileExecute(r AllApiApiReplaceMsgVpnClientProfileRequest) (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", _neturl.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnClientUsernameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	clientUsername string
	body           *MsgVpnClientUsername
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnClientUsernameRequest) Body(body MsgVpnClientUsername) AllApiApiReplaceMsgVpnClientUsernameRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnClientUsernameRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnClientUsernameRequest) Execute() (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnClientUsernameExecute(r)
}

/*
 * ReplaceMsgVpnClientUsername Replace a Client Username object.
 * Replace a Client Username object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
clientProfileName||||x||
clientUsername|x|x||||
msgVpnName|x|x||||
password|||x|||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientUsername The name of the Client Username.
 * @return AllApiApiReplaceMsgVpnClientUsernameRequest
*/
func (a *AllApiService) ReplaceMsgVpnClientUsername(ctx _context.Context, msgVpnName string, clientUsername string) AllApiApiReplaceMsgVpnClientUsernameRequest {
	return AllApiApiReplaceMsgVpnClientUsernameRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		clientUsername: clientUsername,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientUsernameResponse
 */
func (a *AllApiService) ReplaceMsgVpnClientUsernameExecute(r AllApiApiReplaceMsgVpnClientUsernameRequest) (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", _neturl.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnDistributedCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	body           *MsgVpnDistributedCache
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnDistributedCacheRequest) Body(body MsgVpnDistributedCache) AllApiApiReplaceMsgVpnDistributedCacheRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnDistributedCacheRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnDistributedCacheRequest) Execute() (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnDistributedCacheExecute(r)
}

/*
 * ReplaceMsgVpnDistributedCache Replace a Distributed Cache object.
 * Replace a Distributed Cache object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnDistributedCache|scheduledDeleteMsgDayList|scheduledDeleteMsgTimeList|
MsgVpnDistributedCache|scheduledDeleteMsgTimeList|scheduledDeleteMsgDayList|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @return AllApiApiReplaceMsgVpnDistributedCacheRequest
*/
func (a *AllApiService) ReplaceMsgVpnDistributedCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiReplaceMsgVpnDistributedCacheRequest {
	return AllApiApiReplaceMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheResponse
 */
func (a *AllApiService) ReplaceMsgVpnDistributedCacheExecute(r AllApiApiReplaceMsgVpnDistributedCacheRequest) (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnDistributedCacheClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	body           *MsgVpnDistributedCacheCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnDistributedCacheClusterRequest) Body(body MsgVpnDistributedCacheCluster) AllApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnDistributedCacheClusterRequest) Execute() (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnDistributedCacheClusterExecute(r)
}

/*
 * ReplaceMsgVpnDistributedCacheCluster Replace a Cache Cluster object.
 * Replace a Cache Cluster object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiReplaceMsgVpnDistributedCacheClusterRequest
*/
func (a *AllApiService) ReplaceMsgVpnDistributedCacheCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiReplaceMsgVpnDistributedCacheClusterRequest {
	return AllApiApiReplaceMsgVpnDistributedCacheClusterRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterResponse
 */
func (a *AllApiService) ReplaceMsgVpnDistributedCacheClusterExecute(r AllApiApiReplaceMsgVpnDistributedCacheClusterRequest) (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	instanceName   string
	body           *MsgVpnDistributedCacheClusterInstance
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) Body(body MsgVpnDistributedCacheClusterInstance) AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) Execute() (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
 * ReplaceMsgVpnDistributedCacheClusterInstance Replace a Cache Instance object.
 * Replace a Cache Instance object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
instanceName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param instanceName The name of the Cache Instance.
 * @return AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *AllApiService) ReplaceMsgVpnDistributedCacheClusterInstance(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest {
	return AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService:   a,
		ctx:          ctx,
		msgVpnName:   msgVpnName,
		cacheName:    cacheName,
		clusterName:  clusterName,
		instanceName: instanceName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterInstanceResponse
 */
func (a *AllApiService) ReplaceMsgVpnDistributedCacheClusterInstanceExecute(r AllApiApiReplaceMsgVpnDistributedCacheClusterInstanceRequest) (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", _neturl.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnDmrBridgeRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	remoteNodeName string
	body           *MsgVpnDmrBridge
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnDmrBridgeRequest) Body(body MsgVpnDmrBridge) AllApiApiReplaceMsgVpnDmrBridgeRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnDmrBridgeRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnDmrBridgeRequest) Execute() (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnDmrBridgeExecute(r)
}

/*
 * ReplaceMsgVpnDmrBridge Replace a DMR Bridge object.
 * Replace a DMR Bridge object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
remoteNodeName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 * @return AllApiApiReplaceMsgVpnDmrBridgeRequest
*/
func (a *AllApiService) ReplaceMsgVpnDmrBridge(ctx _context.Context, msgVpnName string, remoteNodeName string) AllApiApiReplaceMsgVpnDmrBridgeRequest {
	return AllApiApiReplaceMsgVpnDmrBridgeRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDmrBridgeResponse
 */
func (a *AllApiService) ReplaceMsgVpnDmrBridgeExecute(r AllApiApiReplaceMsgVpnDmrBridgeRequest) (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	connectionFactoryName string
	body                  *MsgVpnJndiConnectionFactory
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest) Body(body MsgVpnJndiConnectionFactory) AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest) Execute() (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnJndiConnectionFactoryExecute(r)
}

/*
 * ReplaceMsgVpnJndiConnectionFactory Replace a JNDI Connection Factory object.
 * Replace a JNDI Connection Factory object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param connectionFactoryName The name of the JMS Connection Factory.
 * @return AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest
*/
func (a *AllApiService) ReplaceMsgVpnJndiConnectionFactory(ctx _context.Context, msgVpnName string, connectionFactoryName string) AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest {
	return AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiConnectionFactoryResponse
 */
func (a *AllApiService) ReplaceMsgVpnJndiConnectionFactoryExecute(r AllApiApiReplaceMsgVpnJndiConnectionFactoryRequest) (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", _neturl.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnJndiQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	body           *MsgVpnJndiQueue
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnJndiQueueRequest) Body(body MsgVpnJndiQueue) AllApiApiReplaceMsgVpnJndiQueueRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnJndiQueueRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnJndiQueueRequest) Execute() (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnJndiQueueExecute(r)
}

/*
 * ReplaceMsgVpnJndiQueue Replace a JNDI Queue object.
 * Replace a JNDI Queue object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The JNDI name of the JMS Queue.
 * @return AllApiApiReplaceMsgVpnJndiQueueRequest
*/
func (a *AllApiService) ReplaceMsgVpnJndiQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiReplaceMsgVpnJndiQueueRequest {
	return AllApiApiReplaceMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiQueueResponse
 */
func (a *AllApiService) ReplaceMsgVpnJndiQueueExecute(r AllApiApiReplaceMsgVpnJndiQueueRequest) (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnJndiTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	topicName      string
	body           *MsgVpnJndiTopic
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnJndiTopicRequest) Body(body MsgVpnJndiTopic) AllApiApiReplaceMsgVpnJndiTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnJndiTopicRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnJndiTopicRequest) Execute() (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnJndiTopicExecute(r)
}

/*
 * ReplaceMsgVpnJndiTopic Replace a JNDI Topic object.
 * Replace a JNDI Topic object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicName The JNDI name of the JMS Topic.
 * @return AllApiApiReplaceMsgVpnJndiTopicRequest
*/
func (a *AllApiService) ReplaceMsgVpnJndiTopic(ctx _context.Context, msgVpnName string, topicName string) AllApiApiReplaceMsgVpnJndiTopicRequest {
	return AllApiApiReplaceMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		topicName:  topicName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiTopicResponse
 */
func (a *AllApiService) ReplaceMsgVpnJndiTopicExecute(r AllApiApiReplaceMsgVpnJndiTopicRequest) (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", _neturl.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnMqttRetainCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	body           *MsgVpnMqttRetainCache
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnMqttRetainCacheRequest) Body(body MsgVpnMqttRetainCache) AllApiApiReplaceMsgVpnMqttRetainCacheRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnMqttRetainCacheRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnMqttRetainCacheRequest) Execute() (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnMqttRetainCacheExecute(r)
}

/*
 * ReplaceMsgVpnMqttRetainCache Replace an MQTT Retain Cache object.
 * Replace an MQTT Retain Cache object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the MQTT Retain Cache.
 * @return AllApiApiReplaceMsgVpnMqttRetainCacheRequest
*/
func (a *AllApiService) ReplaceMsgVpnMqttRetainCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiReplaceMsgVpnMqttRetainCacheRequest {
	return AllApiApiReplaceMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttRetainCacheResponse
 */
func (a *AllApiService) ReplaceMsgVpnMqttRetainCacheExecute(r AllApiApiReplaceMsgVpnMqttRetainCacheRequest) (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnMqttSessionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	body                     *MsgVpnMqttSession
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiReplaceMsgVpnMqttSessionRequest) Body(body MsgVpnMqttSession) AllApiApiReplaceMsgVpnMqttSessionRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnMqttSessionRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnMqttSessionRequest) Execute() (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnMqttSessionExecute(r)
}

/*
 * ReplaceMsgVpnMqttSession Replace an MQTT Session object.
 * Replace an MQTT Session object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
owner||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @return AllApiApiReplaceMsgVpnMqttSessionRequest
*/
func (a *AllApiService) ReplaceMsgVpnMqttSession(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) AllApiApiReplaceMsgVpnMqttSessionRequest {
	return AllApiApiReplaceMsgVpnMqttSessionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionResponse
 */
func (a *AllApiService) ReplaceMsgVpnMqttSessionExecute(r AllApiApiReplaceMsgVpnMqttSessionRequest) (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	subscriptionTopic        string
	body                     *MsgVpnMqttSessionSubscription
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) Body(body MsgVpnMqttSessionSubscription) AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) Execute() (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
 * ReplaceMsgVpnMqttSessionSubscription Replace a Subscription object.
 * Replace a Subscription object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @param subscriptionTopic The MQTT subscription topic.
 * @return AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest
*/
func (a *AllApiService) ReplaceMsgVpnMqttSessionSubscription(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest {
	return AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic:        subscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionSubscriptionResponse
 */
func (a *AllApiService) ReplaceMsgVpnMqttSessionSubscriptionExecute(r AllApiApiReplaceMsgVpnMqttSessionSubscriptionRequest) (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	body           *MsgVpnQueue
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnQueueRequest) Body(body MsgVpnQueue) AllApiApiReplaceMsgVpnQueueRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnQueueRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnQueueRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnQueueRequest) Execute() (MsgVpnQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnQueueExecute(r)
}

/*
 * ReplaceMsgVpnQueue Replace a Queue object.
 * Replace a Queue object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
queueName|x|x||||
respectMsgPriorityEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @return AllApiApiReplaceMsgVpnQueueRequest
*/
func (a *AllApiService) ReplaceMsgVpnQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiReplaceMsgVpnQueueRequest {
	return AllApiApiReplaceMsgVpnQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueResponse
 */
func (a *AllApiService) ReplaceMsgVpnQueueExecute(r AllApiApiReplaceMsgVpnQueueRequest) (MsgVpnQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnQueueTemplateRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	queueTemplateName string
	body              *MsgVpnQueueTemplate
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceMsgVpnQueueTemplateRequest) Body(body MsgVpnQueueTemplate) AllApiApiReplaceMsgVpnQueueTemplateRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnQueueTemplateRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnQueueTemplateRequest) Execute() (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnQueueTemplateExecute(r)
}

/*
 * ReplaceMsgVpnQueueTemplate Replace a Queue Template object.
 * Replace a Queue Template object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueTemplateName The name of the Queue Template.
 * @return AllApiApiReplaceMsgVpnQueueTemplateRequest
*/
func (a *AllApiService) ReplaceMsgVpnQueueTemplate(ctx _context.Context, msgVpnName string, queueTemplateName string) AllApiApiReplaceMsgVpnQueueTemplateRequest {
	return AllApiApiReplaceMsgVpnQueueTemplateRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueTemplateResponse
 */
func (a *AllApiService) ReplaceMsgVpnQueueTemplateExecute(r AllApiApiReplaceMsgVpnQueueTemplateRequest) (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", _neturl.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnReplayLogRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	replayLogName  string
	body           *MsgVpnReplayLog
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiReplaceMsgVpnReplayLogRequest) Body(body MsgVpnReplayLog) AllApiApiReplaceMsgVpnReplayLogRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnReplayLogRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnReplayLogRequest) Execute() (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnReplayLogExecute(r)
}

/*
 * ReplaceMsgVpnReplayLog Replace a Replay Log object.
 * Replace a Replay Log object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replayLogName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.10.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replayLogName The name of the Replay Log.
 * @return AllApiApiReplaceMsgVpnReplayLogRequest
*/
func (a *AllApiService) ReplaceMsgVpnReplayLog(ctx _context.Context, msgVpnName string, replayLogName string) AllApiApiReplaceMsgVpnReplayLogRequest {
	return AllApiApiReplaceMsgVpnReplayLogRequest{
		ApiService:    a,
		ctx:           ctx,
		msgVpnName:    msgVpnName,
		replayLogName: replayLogName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplayLogResponse
 */
func (a *AllApiService) ReplaceMsgVpnReplayLogExecute(r AllApiApiReplaceMsgVpnReplayLogRequest) (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", _neturl.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnReplicatedTopicRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	replicatedTopic string
	body            *MsgVpnReplicatedTopic
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiReplaceMsgVpnReplicatedTopicRequest) Body(body MsgVpnReplicatedTopic) AllApiApiReplaceMsgVpnReplicatedTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnReplicatedTopicRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnReplicatedTopicRequest) Execute() (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnReplicatedTopicExecute(r)
}

/*
 * ReplaceMsgVpnReplicatedTopic Replace a Replicated Topic object.
 * Replace a Replicated Topic object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replicatedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 * @return AllApiApiReplaceMsgVpnReplicatedTopicRequest
*/
func (a *AllApiService) ReplaceMsgVpnReplicatedTopic(ctx _context.Context, msgVpnName string, replicatedTopic string) AllApiApiReplaceMsgVpnReplicatedTopicRequest {
	return AllApiApiReplaceMsgVpnReplicatedTopicRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplicatedTopicResponse
 */
func (a *AllApiService) ReplaceMsgVpnReplicatedTopicExecute(r AllApiApiReplaceMsgVpnReplicatedTopicRequest) (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", _neturl.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnRestDeliveryPointRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	body                  *MsgVpnRestDeliveryPoint
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiReplaceMsgVpnRestDeliveryPointRequest) Body(body MsgVpnRestDeliveryPoint) AllApiApiReplaceMsgVpnRestDeliveryPointRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnRestDeliveryPointRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnRestDeliveryPointRequest) Execute() (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointExecute(r)
}

/*
 * ReplaceMsgVpnRestDeliveryPoint Replace a REST Delivery Point object.
 * Replace a REST Delivery Point object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientProfileName||||x||
msgVpnName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiReplaceMsgVpnRestDeliveryPointRequest
*/
func (a *AllApiService) ReplaceMsgVpnRestDeliveryPoint(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiReplaceMsgVpnRestDeliveryPointRequest {
	return AllApiApiReplaceMsgVpnRestDeliveryPointRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointResponse
 */
func (a *AllApiService) ReplaceMsgVpnRestDeliveryPointExecute(r AllApiApiReplaceMsgVpnRestDeliveryPointRequest) (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	queueBindingName      string
	body                  *MsgVpnRestDeliveryPointQueueBinding
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) Body(body MsgVpnRestDeliveryPointQueueBinding) AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
 * ReplaceMsgVpnRestDeliveryPointQueueBinding Replace a Queue Binding object.
 * Replace a Queue Binding object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueBindingName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param queueBindingName The name of a queue in the Message VPN.
 * @return AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *AllApiService) ReplaceMsgVpnRestDeliveryPointQueueBinding(ctx _context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest {
	return AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName:      queueBindingName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointQueueBindingResponse
 */
func (a *AllApiService) ReplaceMsgVpnRestDeliveryPointQueueBindingExecute(r AllApiApiReplaceMsgVpnRestDeliveryPointQueueBindingRequest) (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", _neturl.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	body                  *MsgVpnRestDeliveryPointRestConsumer
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) Body(body MsgVpnRestDeliveryPointRestConsumer) AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
 * ReplaceMsgVpnRestDeliveryPointRestConsumer Replace a REST Consumer object.
 * Replace a REST Consumer object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationClientCertContent|||x|x||x
authenticationClientCertPassword|||x|x||
authenticationHttpBasicPassword|||x|x||x
authenticationHttpBasicUsername||||x||
authenticationHttpHeaderValue|||x|||x
authenticationOauthClientId||||x||
authenticationOauthClientScope||||x||
authenticationOauthClientSecret|||x|x||x
authenticationOauthClientTokenEndpoint||||x||
authenticationOauthJwtSecretKey|||x|x||x
authenticationOauthJwtTokenEndpoint||||x||
authenticationScheme||||x||
msgVpnName|x|x||||
outgoingConnectionCount||||x||
remoteHost||||x||
remotePort||||x||
restConsumerName|x|x||||
restDeliveryPointName|x|x||||
tlsCipherSuiteList||||x||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *AllApiService) ReplaceMsgVpnRestDeliveryPointRestConsumer(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest {
	return AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerResponse
 */
func (a *AllApiService) ReplaceMsgVpnRestDeliveryPointRestConsumerExecute(r AllApiApiReplaceMsgVpnRestDeliveryPointRestConsumerRequest) (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnTopicEndpointRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	topicEndpointName string
	body              *MsgVpnTopicEndpoint
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiReplaceMsgVpnTopicEndpointRequest) Body(body MsgVpnTopicEndpoint) AllApiApiReplaceMsgVpnTopicEndpointRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnTopicEndpointRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnTopicEndpointRequest) Execute() (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnTopicEndpointExecute(r)
}

/*
 * ReplaceMsgVpnTopicEndpoint Replace a Topic Endpoint object.
 * Replace a Topic Endpoint object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
respectMsgPriorityEnabled||||x||
topicEndpointName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointName The name of the Topic Endpoint.
 * @return AllApiApiReplaceMsgVpnTopicEndpointRequest
*/
func (a *AllApiService) ReplaceMsgVpnTopicEndpoint(ctx _context.Context, msgVpnName string, topicEndpointName string) AllApiApiReplaceMsgVpnTopicEndpointRequest {
	return AllApiApiReplaceMsgVpnTopicEndpointRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointResponse
 */
func (a *AllApiService) ReplaceMsgVpnTopicEndpointExecute(r AllApiApiReplaceMsgVpnTopicEndpointRequest) (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest struct {
	ctx                       _context.Context
	ApiService                *AllApiService
	msgVpnName                string
	topicEndpointTemplateName string
	body                      *MsgVpnTopicEndpointTemplate
	opaquePassword            *string
	select_                   *[]string
}

func (r AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest) Body(body MsgVpnTopicEndpointTemplate) AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest) Execute() (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceMsgVpnTopicEndpointTemplateExecute(r)
}

/*
 * ReplaceMsgVpnTopicEndpointTemplate Replace a Topic Endpoint Template object.
 * Replace a Topic Endpoint Template object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicEndpointTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 * @return AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest
*/
func (a *AllApiService) ReplaceMsgVpnTopicEndpointTemplate(ctx _context.Context, msgVpnName string, topicEndpointTemplateName string) AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest {
	return AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest{
		ApiService:                a,
		ctx:                       ctx,
		msgVpnName:                msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointTemplateResponse
 */
func (a *AllApiService) ReplaceMsgVpnTopicEndpointTemplateExecute(r AllApiApiReplaceMsgVpnTopicEndpointTemplateRequest) (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiReplaceVirtualHostnameRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	virtualHostname string
	body            *VirtualHostname
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiReplaceVirtualHostnameRequest) Body(body VirtualHostname) AllApiApiReplaceVirtualHostnameRequest {
	r.body = &body
	return r
}
func (r AllApiApiReplaceVirtualHostnameRequest) OpaquePassword(opaquePassword string) AllApiApiReplaceVirtualHostnameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiReplaceVirtualHostnameRequest) Select_(select_ []string) AllApiApiReplaceVirtualHostnameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiReplaceVirtualHostnameRequest) Execute() (VirtualHostnameResponse, *_nethttp.Response, error) {
	return r.ApiService.ReplaceVirtualHostnameExecute(r)
}

/*
 * ReplaceVirtualHostname Replace a Virtual Hostname object.
 * Replace a Virtual Hostname object. Any attribute missing from the request will be set to its default value, subject to the exceptions in note 4.

A Virtual Hostname is a provisioned object on a message broker that contains a Virtual Hostname to Message VPN mapping.

Clients which connect to a global (as opposed to per Message VPN) port and provides this hostname will be directed to its corresponding Message VPN. A case-insentive match is performed on the full client-provided hostname against the configured virtual-hostname.

This mechanism is only supported for hostnames provided through the Server Name Indication (SNI) extension of TLS.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
virtualHostname|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.17.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param virtualHostname The virtual hostname.
 * @return AllApiApiReplaceVirtualHostnameRequest
*/
func (a *AllApiService) ReplaceVirtualHostname(ctx _context.Context, virtualHostname string) AllApiApiReplaceVirtualHostnameRequest {
	return AllApiApiReplaceVirtualHostnameRequest{
		ApiService:      a,
		ctx:             ctx,
		virtualHostname: virtualHostname,
	}
}

/*
 * Execute executes the request
 * @return VirtualHostnameResponse
 */
func (a *AllApiService) ReplaceVirtualHostnameExecute(r AllApiApiReplaceVirtualHostnameRequest) (VirtualHostnameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VirtualHostnameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.ReplaceVirtualHostname")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualHostnames/{virtualHostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualHostname"+"}", _neturl.PathEscape(parameterToString(r.virtualHostname, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateBrokerRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	body           *Broker
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateBrokerRequest) Body(body Broker) AllApiApiUpdateBrokerRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateBrokerRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateBrokerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateBrokerRequest) Select_(select_ []string) AllApiApiUpdateBrokerRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateBrokerRequest) Execute() (BrokerResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateBrokerExecute(r)
}

/*
 * UpdateBroker Update a Broker object.
 * Update a Broker object. Any attribute missing from the request will be left unchanged.

This object contains global configuration for the message broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
serviceAmqpTlsListenPort||||x||
serviceHealthCheckListenPort||||x||
serviceMateLinkListenPort||||x||
serviceRedundancyFirstListenPort||||x||
serviceSempPlainTextListenPort||||x||
serviceSempTlsListenPort||||x||
serviceSmfCompressionListenPort||||x||
serviceSmfPlainTextListenPort||||x||
serviceSmfRoutingControlListenPort||||x||
serviceSmfTlsListenPort||||x||
serviceWebTransportPlainTextListenPort||||x||
serviceWebTransportTlsListenPort||||x||
serviceWebTransportWebUrlSuffix||||x||
tlsServerCertContent|||x|||x
tlsServerCertPassword|||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
Broker|tlsServerCertPassword|tlsServerCertContent|
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/none" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
authClientCertRevocationCheckMode|global/admin
guaranteedMsgingEnabled|global/read-write
guaranteedMsgingEventCacheUsageThreshold.clearPercent|global/read-write
guaranteedMsgingEventCacheUsageThreshold.clearValue|global/read-write
guaranteedMsgingEventCacheUsageThreshold.setPercent|global/read-write
guaranteedMsgingEventCacheUsageThreshold.setValue|global/read-write
guaranteedMsgingEventDeliveredUnackedThreshold.clearPercent|global/read-write
guaranteedMsgingEventDeliveredUnackedThreshold.setPercent|global/read-write
guaranteedMsgingEventDiskUsageThreshold.clearPercent|global/read-write
guaranteedMsgingEventDiskUsageThreshold.setPercent|global/read-write
guaranteedMsgingEventEgressFlowCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventEgressFlowCountThreshold.clearValue|global/read-write
guaranteedMsgingEventEgressFlowCountThreshold.setPercent|global/read-write
guaranteedMsgingEventEgressFlowCountThreshold.setValue|global/read-write
guaranteedMsgingEventEndpointCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventEndpointCountThreshold.clearValue|global/read-write
guaranteedMsgingEventEndpointCountThreshold.setPercent|global/read-write
guaranteedMsgingEventEndpointCountThreshold.setValue|global/read-write
guaranteedMsgingEventIngressFlowCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventIngressFlowCountThreshold.clearValue|global/read-write
guaranteedMsgingEventIngressFlowCountThreshold.setPercent|global/read-write
guaranteedMsgingEventIngressFlowCountThreshold.setValue|global/read-write
guaranteedMsgingEventMsgCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventMsgCountThreshold.setPercent|global/read-write
guaranteedMsgingEventMsgSpoolFileCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventMsgSpoolFileCountThreshold.setPercent|global/read-write
guaranteedMsgingEventMsgSpoolUsageThreshold.clearPercent|global/read-write
guaranteedMsgingEventMsgSpoolUsageThreshold.clearValue|global/read-write
guaranteedMsgingEventMsgSpoolUsageThreshold.setPercent|global/read-write
guaranteedMsgingEventMsgSpoolUsageThreshold.setValue|global/read-write
guaranteedMsgingEventTransactedSessionCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventTransactedSessionCountThreshold.clearValue|global/read-write
guaranteedMsgingEventTransactedSessionCountThreshold.setPercent|global/read-write
guaranteedMsgingEventTransactedSessionCountThreshold.setValue|global/read-write
guaranteedMsgingEventTransactedSessionResourceCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventTransactedSessionResourceCountThreshold.setPercent|global/read-write
guaranteedMsgingEventTransactionCountThreshold.clearPercent|global/read-write
guaranteedMsgingEventTransactionCountThreshold.clearValue|global/read-write
guaranteedMsgingEventTransactionCountThreshold.setPercent|global/read-write
guaranteedMsgingEventTransactionCountThreshold.setValue|global/read-write
guaranteedMsgingMaxCacheUsage|global/read-write
guaranteedMsgingMaxMsgSpoolUsage|global/read-write
guaranteedMsgingMsgSpoolSyncMirroredMsgAckTimeout|global/read-write
guaranteedMsgingMsgSpoolSyncMirroredSpoolFileAckTimeout|global/read-write
guaranteedMsgingTransactionReplicationCompatibilityMode|global/read-write
serviceAmqpEnabled|global/read-write
serviceAmqpTlsListenPort|global/read-write
serviceEventConnectionCountThreshold.clearPercent|global/read-write
serviceEventConnectionCountThreshold.clearValue|global/read-write
serviceEventConnectionCountThreshold.setPercent|global/read-write
serviceEventConnectionCountThreshold.setValue|global/read-write
serviceHealthCheckEnabled|global/read-write
serviceHealthCheckListenPort|global/read-write
serviceMateLinkEnabled|global/read-write
serviceMateLinkListenPort|global/read-write
serviceMqttEnabled|global/read-write
serviceMsgBackboneEnabled|global/read-write
serviceRedundancyEnabled|global/read-write
serviceRedundancyFirstListenPort|global/read-write
serviceRestEventOutgoingConnectionCountThreshold.clearPercent|global/read-write
serviceRestEventOutgoingConnectionCountThreshold.clearValue|global/read-write
serviceRestEventOutgoingConnectionCountThreshold.setPercent|global/read-write
serviceRestEventOutgoingConnectionCountThreshold.setValue|global/read-write
serviceRestIncomingEnabled|global/read-write
serviceRestOutgoingEnabled|global/read-write
serviceSempLegacyTimeoutEnabled|global/read-write
serviceSempPlainTextEnabled|global/read-write
serviceSempPlainTextListenPort|global/read-write
serviceSempSessionIdleTimeout|global/read-write
serviceSempSessionMaxLifetime|global/read-write
serviceSempTlsEnabled|global/read-write
serviceSempTlsListenPort|global/read-write
serviceSmfCompressionListenPort|global/read-write
serviceSmfEnabled|global/read-write
serviceSmfEventConnectionCountThreshold.clearPercent|global/read-write
serviceSmfEventConnectionCountThreshold.clearValue|global/read-write
serviceSmfEventConnectionCountThreshold.setPercent|global/read-write
serviceSmfEventConnectionCountThreshold.setValue|global/read-write
serviceSmfPlainTextListenPort|global/read-write
serviceSmfRoutingControlListenPort|global/read-write
serviceSmfTlsListenPort|global/read-write
serviceTlsEventConnectionCountThreshold.clearPercent|global/read-write
serviceTlsEventConnectionCountThreshold.clearValue|global/read-write
serviceTlsEventConnectionCountThreshold.setPercent|global/read-write
serviceTlsEventConnectionCountThreshold.setValue|global/read-write
serviceWebTransportEnabled|global/read-write
serviceWebTransportPlainTextListenPort|global/read-write
serviceWebTransportTlsListenPort|global/read-write
serviceWebTransportWebUrlSuffix|global/read-write
tlsBlockVersion11Enabled|global/read-write
tlsCipherSuiteManagementList|global/read-write
tlsCipherSuiteMsgBackboneList|global/read-write
tlsCipherSuiteSecureShellList|global/read-write
tlsCrimeExploitProtectionEnabled|global/read-write
tlsServerCertContent|global/read-write
tlsServerCertPassword|global/read-write
tlsStandardDomainCertificateAuthoritiesEnabled|global/read-write
tlsTicketLifetime|global/read-write



This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AllApiApiUpdateBrokerRequest
*/
func (a *AllApiService) UpdateBroker(ctx _context.Context) AllApiApiUpdateBrokerRequest {
	return AllApiApiUpdateBrokerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return BrokerResponse
 */
func (a *AllApiService) UpdateBrokerExecute(r AllApiApiUpdateBrokerRequest) (BrokerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BrokerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateBroker")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *CertAuthority
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateCertAuthorityRequest) Body(body CertAuthority) AllApiApiUpdateCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateCertAuthorityRequest) Select_(select_ []string) AllApiApiUpdateCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateCertAuthorityRequest) Execute() (CertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateCertAuthorityExecute(r)
}

/*
 * UpdateCertAuthority Update a Certificate Authority object.
 * Update a Certificate Authority object. Any attribute missing from the request will be left unchanged.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x|||x|
certContent|||||x|
crlDayList|||||x|
crlTimeList|||||x|
crlUrl||||x|x|
ocspNonResponderCertEnabled|||||x|
ocspOverrideUrl|||||x|
ocspTimeout|||||x|
revocationCheckEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
CertAuthority|crlDayList|crlTimeList|
CertAuthority|crlTimeList|crlDayList|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been deprecated since 2.19. Replaced by clientCertAuthorities and domainCertAuthorities.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiUpdateCertAuthorityRequest
*/
func (a *AllApiService) UpdateCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiUpdateCertAuthorityRequest {
	return AllApiApiUpdateCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return CertAuthorityResponse
 */
func (a *AllApiService) UpdateCertAuthorityExecute(r AllApiApiUpdateCertAuthorityRequest) (CertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateClientCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *ClientCertAuthority
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateClientCertAuthorityRequest) Body(body ClientCertAuthority) AllApiApiUpdateClientCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateClientCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateClientCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateClientCertAuthorityRequest) Select_(select_ []string) AllApiApiUpdateClientCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateClientCertAuthorityRequest) Execute() (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateClientCertAuthorityExecute(r)
}

/*
 * UpdateClientCertAuthority Update a Client Certificate Authority object.
 * Update a Client Certificate Authority object. Any attribute missing from the request will be left unchanged.

Clients can authenticate with the message broker over TLS by presenting a valid client certificate. The message broker authenticates the client certificate by constructing a full certificate chain (from the client certificate to intermediate CAs to a configured root CA). The intermediate CAs in this chain can be provided by the client, or configured in the message broker. The root CA must be configured on the message broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x||||
crlUrl||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
ClientCertAuthority|crlDayList|crlTimeList|
ClientCertAuthority|crlTimeList|crlDayList|



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiUpdateClientCertAuthorityRequest
*/
func (a *AllApiService) UpdateClientCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiUpdateClientCertAuthorityRequest {
	return AllApiApiUpdateClientCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return ClientCertAuthorityResponse
 */
func (a *AllApiService) UpdateClientCertAuthorityExecute(r AllApiApiUpdateClientCertAuthorityRequest) (ClientCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateClientCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clientCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateDmrClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	body           *DmrCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateDmrClusterRequest) Body(body DmrCluster) AllApiApiUpdateDmrClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateDmrClusterRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateDmrClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateDmrClusterRequest) Select_(select_ []string) AllApiApiUpdateDmrClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateDmrClusterRequest) Execute() (DmrClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateDmrClusterExecute(r)
}

/*
 * UpdateDmrCluster Update a Cluster object.
 * Update a Cluster object. Any attribute missing from the request will be left unchanged.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x||x
authenticationClientCertContent|||x|x||x
authenticationClientCertPassword|||x|x||
directOnlyEnabled||x||||
dmrClusterName|x|x||||
nodeName||x||||
tlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
DmrCluster|authenticationClientCertPassword|authenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @return AllApiApiUpdateDmrClusterRequest
*/
func (a *AllApiService) UpdateDmrCluster(ctx _context.Context, dmrClusterName string) AllApiApiUpdateDmrClusterRequest {
	return AllApiApiUpdateDmrClusterRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterResponse
 */
func (a *AllApiService) UpdateDmrClusterExecute(r AllApiApiUpdateDmrClusterRequest) (DmrClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateDmrCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateDmrClusterLinkRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	dmrClusterName string
	remoteNodeName string
	body           *DmrClusterLink
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateDmrClusterLinkRequest) Body(body DmrClusterLink) AllApiApiUpdateDmrClusterLinkRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateDmrClusterLinkRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateDmrClusterLinkRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateDmrClusterLinkRequest) Select_(select_ []string) AllApiApiUpdateDmrClusterLinkRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateDmrClusterLinkRequest) Execute() (DmrClusterLinkResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateDmrClusterLinkExecute(r)
}

/*
 * UpdateDmrClusterLink Update a Link object.
 * Update a Link object. Any attribute missing from the request will be left unchanged.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x||x
authenticationScheme||||x||
dmrClusterName|x|x||||
egressFlowWindowSize||||x||
initiator||||x||
remoteNodeName|x|x||||
span||||x||
transportCompressedEnabled||||x||
transportTlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dmrClusterName The name of the Cluster.
 * @param remoteNodeName The name of the node at the remote end of the Link.
 * @return AllApiApiUpdateDmrClusterLinkRequest
*/
func (a *AllApiService) UpdateDmrClusterLink(ctx _context.Context, dmrClusterName string, remoteNodeName string) AllApiApiUpdateDmrClusterLinkRequest {
	return AllApiApiUpdateDmrClusterLinkRequest{
		ApiService:     a,
		ctx:            ctx,
		dmrClusterName: dmrClusterName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return DmrClusterLinkResponse
 */
func (a *AllApiService) UpdateDmrClusterLinkExecute(r AllApiApiUpdateDmrClusterLinkRequest) (DmrClusterLinkResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DmrClusterLinkResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateDmrClusterLink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"dmrClusterName"+"}", _neturl.PathEscape(parameterToString(r.dmrClusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateDomainCertAuthorityRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	certAuthorityName string
	body              *DomainCertAuthority
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateDomainCertAuthorityRequest) Body(body DomainCertAuthority) AllApiApiUpdateDomainCertAuthorityRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateDomainCertAuthorityRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateDomainCertAuthorityRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateDomainCertAuthorityRequest) Select_(select_ []string) AllApiApiUpdateDomainCertAuthorityRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateDomainCertAuthorityRequest) Execute() (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateDomainCertAuthorityExecute(r)
}

/*
 * UpdateDomainCertAuthority Update a Domain Certificate Authority object.
 * Update a Domain Certificate Authority object. Any attribute missing from the request will be left unchanged.

Certificate Authorities trusted for domain verification.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
certAuthorityName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/admin" is required to perform this operation.

This has been available since 2.19.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param certAuthorityName The name of the Certificate Authority.
 * @return AllApiApiUpdateDomainCertAuthorityRequest
*/
func (a *AllApiService) UpdateDomainCertAuthority(ctx _context.Context, certAuthorityName string) AllApiApiUpdateDomainCertAuthorityRequest {
	return AllApiApiUpdateDomainCertAuthorityRequest{
		ApiService:        a,
		ctx:               ctx,
		certAuthorityName: certAuthorityName,
	}
}

/*
 * Execute executes the request
 * @return DomainCertAuthorityResponse
 */
func (a *AllApiService) UpdateDomainCertAuthorityExecute(r AllApiApiUpdateDomainCertAuthorityRequest) (DomainCertAuthorityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DomainCertAuthorityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateDomainCertAuthority")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domainCertAuthorities/{certAuthorityName}"
	localVarPath = strings.Replace(localVarPath, "{"+"certAuthorityName"+"}", _neturl.PathEscape(parameterToString(r.certAuthorityName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	body           *MsgVpn
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnRequest) Body(body MsgVpn) AllApiApiUpdateMsgVpnRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnRequest) Execute() (MsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnExecute(r)
}

/*
 * UpdateMsgVpn Update a Message VPN object.
 * Update a Message VPN object. Any attribute missing from the request will be left unchanged.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|||||x|
msgVpnName|x|x||||
replicationBridgeAuthenticationBasicPassword|||x|||x
replicationBridgeAuthenticationClientCertContent|||x|||x
replicationBridgeAuthenticationClientCertPassword|||x|||
replicationEnabledQueueBehavior|||x|||
restTlsServerCertEnforceTrustedCommonNameEnabled|||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
alias|global/read-write
authenticationBasicEnabled|global/read-write
authenticationBasicProfileName|global/read-write
authenticationBasicRadiusDomain|global/read-write
authenticationBasicType|global/read-write
authenticationClientCertAllowApiProvidedUsernameEnabled|global/read-write
authenticationClientCertEnabled|global/read-write
authenticationClientCertMaxChainDepth|global/read-write
authenticationClientCertRevocationCheckMode|global/read-write
authenticationClientCertUsernameSource|global/read-write
authenticationClientCertValidateDateEnabled|global/read-write
authenticationKerberosAllowApiProvidedUsernameEnabled|global/read-write
authenticationKerberosEnabled|global/read-write
authenticationOauthEnabled|global/read-write
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
bridgingTlsServerCertMaxChainDepth|global/read-write
bridgingTlsServerCertValidateDateEnabled|global/read-write
bridgingTlsServerCertValidateNameEnabled|global/read-write
dmrEnabled|global/read-write
exportSubscriptionsEnabled|global/read-write
maxConnectionCount|global/read-write
maxEgressFlowCount|global/read-write
maxEndpointCount|global/read-write
maxIngressFlowCount|global/read-write
maxMsgSpoolUsage|global/read-write
maxSubscriptionCount|global/read-write
maxTransactedSessionCount|global/read-write
maxTransactionCount|global/read-write
mqttRetainMaxMemory|global/read-write
replicationBridgeAuthenticationBasicClientUsername|global/read-write
replicationBridgeAuthenticationBasicPassword|global/read-write
replicationBridgeAuthenticationClientCertContent|global/read-write
replicationBridgeAuthenticationClientCertPassword|global/read-write
replicationBridgeAuthenticationScheme|global/read-write
replicationBridgeCompressedDataEnabled|global/read-write
replicationBridgeEgressFlowWindowSize|global/read-write
replicationBridgeRetryDelay|global/read-write
replicationBridgeTlsEnabled|global/read-write
replicationBridgeUnidirectionalClientProfileName|global/read-write
replicationEnabled|global/read-write
replicationEnabledQueueBehavior|global/read-write
replicationQueueMaxMsgSpoolUsage|global/read-write
replicationRole|global/read-write
restTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
restTlsServerCertMaxChainDepth|global/read-write
restTlsServerCertValidateDateEnabled|global/read-write
restTlsServerCertValidateNameEnabled|global/read-write
sempOverMsgBusAdminClientEnabled|global/read-write
sempOverMsgBusAdminDistributedCacheEnabled|global/read-write
sempOverMsgBusAdminEnabled|global/read-write
sempOverMsgBusEnabled|global/read-write
sempOverMsgBusShowEnabled|global/read-write
serviceAmqpMaxConnectionCount|global/read-write
serviceAmqpPlainTextListenPort|global/read-write
serviceAmqpTlsListenPort|global/read-write
serviceMqttMaxConnectionCount|global/read-write
serviceMqttPlainTextListenPort|global/read-write
serviceMqttTlsListenPort|global/read-write
serviceMqttTlsWebSocketListenPort|global/read-write
serviceMqttWebSocketListenPort|global/read-write
serviceRestIncomingMaxConnectionCount|global/read-write
serviceRestIncomingPlainTextListenPort|global/read-write
serviceRestIncomingTlsListenPort|global/read-write
serviceRestOutgoingMaxConnectionCount|global/read-write
serviceSmfMaxConnectionCount|global/read-write
serviceWebMaxConnectionCount|global/read-write



This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @return AllApiApiUpdateMsgVpnRequest
*/
func (a *AllApiService) UpdateMsgVpn(ctx _context.Context, msgVpnName string) AllApiApiUpdateMsgVpnRequest {
	return AllApiApiUpdateMsgVpnRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnResponse
 */
func (a *AllApiService) UpdateMsgVpnExecute(r AllApiApiUpdateMsgVpnRequest) (MsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnAclProfileRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	aclProfileName string
	body           *MsgVpnAclProfile
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnAclProfileRequest) Body(body MsgVpnAclProfile) AllApiApiUpdateMsgVpnAclProfileRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnAclProfileRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnAclProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnAclProfileRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnAclProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnAclProfileRequest) Execute() (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnAclProfileExecute(r)
}

/*
 * UpdateMsgVpnAclProfile Update an ACL Profile object.
 * Update an ACL Profile object. Any attribute missing from the request will be left unchanged.

An ACL Profile controls whether an authenticated client is permitted to establish a connection with the message broker or permitted to publish and subscribe to specific topics.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param aclProfileName The name of the ACL Profile.
 * @return AllApiApiUpdateMsgVpnAclProfileRequest
*/
func (a *AllApiService) UpdateMsgVpnAclProfile(ctx _context.Context, msgVpnName string, aclProfileName string) AllApiApiUpdateMsgVpnAclProfileRequest {
	return AllApiApiUpdateMsgVpnAclProfileRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		aclProfileName: aclProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAclProfileResponse
 */
func (a *AllApiService) UpdateMsgVpnAclProfileExecute(r AllApiApiUpdateMsgVpnAclProfileRequest) (MsgVpnAclProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAclProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnAclProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aclProfileName"+"}", _neturl.PathEscape(parameterToString(r.aclProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	oauthProviderName string
	body              *MsgVpnAuthenticationOauthProvider
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) Body(body MsgVpnAuthenticationOauthProvider) AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) Execute() (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnAuthenticationOauthProviderExecute(r)
}

/*
 * UpdateMsgVpnAuthenticationOauthProvider Update an OAuth Provider object.
 * Update an OAuth Provider object. Any attribute missing from the request will be left unchanged.

OAuth Providers contain information about the issuer of an OAuth token that is needed to validate the token and derive a client username from it.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
oauthProviderName|x|x||||
tokenIntrospectionPassword|||x|||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.13.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param oauthProviderName The name of the OAuth Provider.
 * @return AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest
*/
func (a *AllApiService) UpdateMsgVpnAuthenticationOauthProvider(ctx _context.Context, msgVpnName string, oauthProviderName string) AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest {
	return AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		oauthProviderName: oauthProviderName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthenticationOauthProviderResponse
 */
func (a *AllApiService) UpdateMsgVpnAuthenticationOauthProviderExecute(r AllApiApiUpdateMsgVpnAuthenticationOauthProviderRequest) (MsgVpnAuthenticationOauthProviderResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthenticationOauthProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnAuthenticationOauthProvider")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"oauthProviderName"+"}", _neturl.PathEscape(parameterToString(r.oauthProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnAuthorizationGroupRequest struct {
	ctx                    _context.Context
	ApiService             *AllApiService
	msgVpnName             string
	authorizationGroupName string
	body                   *MsgVpnAuthorizationGroup
	opaquePassword         *string
	select_                *[]string
}

func (r AllApiApiUpdateMsgVpnAuthorizationGroupRequest) Body(body MsgVpnAuthorizationGroup) AllApiApiUpdateMsgVpnAuthorizationGroupRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnAuthorizationGroupRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnAuthorizationGroupRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnAuthorizationGroupRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnAuthorizationGroupRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnAuthorizationGroupRequest) Execute() (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnAuthorizationGroupExecute(r)
}

/*
 * UpdateMsgVpnAuthorizationGroup Update an LDAP Authorization Group object.
 * Update an LDAP Authorization Group object. Any attribute missing from the request will be left unchanged.

To use client authorization groups configured on an external LDAP server to provide client authorizations, LDAP Authorization Group objects must be created on the Message VPN that match the authorization groups provisioned on the LDAP server. These objects must be configured with the client profiles and ACL profiles that will be assigned to the clients that belong to those authorization groups. A newly created group is placed at the end of the group list which is the lowest priority.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
authorizationGroupName|x|x||||
clientProfileName||||x||
msgVpnName|x|x||||
orderAfterAuthorizationGroupName|||x|||
orderBeforeAuthorizationGroupName|||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param authorizationGroupName The name of the LDAP Authorization Group. Special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\\#,lab,com'.
 * @return AllApiApiUpdateMsgVpnAuthorizationGroupRequest
*/
func (a *AllApiService) UpdateMsgVpnAuthorizationGroup(ctx _context.Context, msgVpnName string, authorizationGroupName string) AllApiApiUpdateMsgVpnAuthorizationGroupRequest {
	return AllApiApiUpdateMsgVpnAuthorizationGroupRequest{
		ApiService:             a,
		ctx:                    ctx,
		msgVpnName:             msgVpnName,
		authorizationGroupName: authorizationGroupName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnAuthorizationGroupResponse
 */
func (a *AllApiService) UpdateMsgVpnAuthorizationGroupExecute(r AllApiApiUpdateMsgVpnAuthorizationGroupRequest) (MsgVpnAuthorizationGroupResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnAuthorizationGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnAuthorizationGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGroupName"+"}", _neturl.PathEscape(parameterToString(r.authorizationGroupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnBridgeRequest struct {
	ctx                 _context.Context
	ApiService          *AllApiService
	msgVpnName          string
	bridgeName          string
	bridgeVirtualRouter string
	body                *MsgVpnBridge
	opaquePassword      *string
	select_             *[]string
}

func (r AllApiApiUpdateMsgVpnBridgeRequest) Body(body MsgVpnBridge) AllApiApiUpdateMsgVpnBridgeRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnBridgeRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnBridgeRequest) Execute() (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnBridgeExecute(r)
}

/*
 * UpdateMsgVpnBridge Update a Bridge object.
 * Update a Bridge object. Any attribute missing from the request will be left unchanged.

Bridges can be used to link two Message VPNs so that messages published to one Message VPN that match the topic subscriptions set for the bridge are also delivered to the linked Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
maxTtl||||x||
msgVpnName|x|x||||
remoteAuthenticationBasicClientUsername||||x||
remoteAuthenticationBasicPassword|||x|x||x
remoteAuthenticationClientCertContent|||x|x||x
remoteAuthenticationClientCertPassword|||x|x||
remoteAuthenticationScheme||||x||
remoteDeliverToOnePriority||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @return AllApiApiUpdateMsgVpnBridgeRequest
*/
func (a *AllApiService) UpdateMsgVpnBridge(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string) AllApiApiUpdateMsgVpnBridgeRequest {
	return AllApiApiUpdateMsgVpnBridgeRequest{
		ApiService:          a,
		ctx:                 ctx,
		msgVpnName:          msgVpnName,
		bridgeName:          bridgeName,
		bridgeVirtualRouter: bridgeVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeResponse
 */
func (a *AllApiService) UpdateMsgVpnBridgeExecute(r AllApiApiUpdateMsgVpnBridgeRequest) (MsgVpnBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	bridgeName            string
	bridgeVirtualRouter   string
	remoteMsgVpnName      string
	remoteMsgVpnLocation  string
	remoteMsgVpnInterface string
	body                  *MsgVpnBridgeRemoteMsgVpn
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) Body(body MsgVpnBridgeRemoteMsgVpn) AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) Execute() (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnBridgeRemoteMsgVpnExecute(r)
}

/*
 * UpdateMsgVpnBridgeRemoteMsgVpn Update a Remote Message VPN object.
 * Update a Remote Message VPN object. Any attribute missing from the request will be left unchanged.

The Remote Message VPN is the Message VPN that the Bridge connects to.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x||||
bridgeVirtualRouter|x|x||||
clientUsername||||x||
compressedDataEnabled||||x||
egressFlowWindowSize||||x||
msgVpnName|x|x||||
password|||x|x||x
remoteMsgVpnInterface|x|x||||
remoteMsgVpnLocation|x|x||||
remoteMsgVpnName|x|x||||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param bridgeName The name of the Bridge.
 * @param bridgeVirtualRouter The virtual router of the Bridge.
 * @param remoteMsgVpnName The name of the remote Message VPN.
 * @param remoteMsgVpnLocation The location of the remote Message VPN as either an FQDN with port, IP address with port, or virtual router name (starting with \"v:\").
 * @param remoteMsgVpnInterface The physical interface on the local Message VPN host for connecting to the remote Message VPN. By default, an interface is chosen automatically (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual router name.
 * @return AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest
*/
func (a *AllApiService) UpdateMsgVpnBridgeRemoteMsgVpn(ctx _context.Context, msgVpnName string, bridgeName string, bridgeVirtualRouter string, remoteMsgVpnName string, remoteMsgVpnLocation string, remoteMsgVpnInterface string) AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest {
	return AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		bridgeName:            bridgeName,
		bridgeVirtualRouter:   bridgeVirtualRouter,
		remoteMsgVpnName:      remoteMsgVpnName,
		remoteMsgVpnLocation:  remoteMsgVpnLocation,
		remoteMsgVpnInterface: remoteMsgVpnInterface,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnBridgeRemoteMsgVpnResponse
 */
func (a *AllApiService) UpdateMsgVpnBridgeRemoteMsgVpnExecute(r AllApiApiUpdateMsgVpnBridgeRemoteMsgVpnRequest) (MsgVpnBridgeRemoteMsgVpnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnBridgeRemoteMsgVpnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnBridgeRemoteMsgVpn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeName"+"}", _neturl.PathEscape(parameterToString(r.bridgeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bridgeVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.bridgeVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnName"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnLocation"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnLocation, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteMsgVpnInterface"+"}", _neturl.PathEscape(parameterToString(r.remoteMsgVpnInterface, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnClientProfileRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	clientProfileName string
	body              *MsgVpnClientProfile
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateMsgVpnClientProfileRequest) Body(body MsgVpnClientProfile) AllApiApiUpdateMsgVpnClientProfileRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnClientProfileRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnClientProfileRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnClientProfileRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnClientProfileRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnClientProfileRequest) Execute() (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnClientProfileExecute(r)
}

/*
 * UpdateMsgVpnClientProfile Update a Client Profile object.
 * Update a Client Profile object. Any attribute missing from the request will be left unchanged.

Client Profiles are used to assign common configuration properties to clients that have been successfully authorized.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
apiQueueManagementCopyFromOnCreateName|||||x|
apiTopicEndpointManagementCopyFromOnCreateName|||||x|
clientProfileName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientProfileName The name of the Client Profile.
 * @return AllApiApiUpdateMsgVpnClientProfileRequest
*/
func (a *AllApiService) UpdateMsgVpnClientProfile(ctx _context.Context, msgVpnName string, clientProfileName string) AllApiApiUpdateMsgVpnClientProfileRequest {
	return AllApiApiUpdateMsgVpnClientProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		clientProfileName: clientProfileName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientProfileResponse
 */
func (a *AllApiService) UpdateMsgVpnClientProfileExecute(r AllApiApiUpdateMsgVpnClientProfileRequest) (MsgVpnClientProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnClientProfile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientProfileName"+"}", _neturl.PathEscape(parameterToString(r.clientProfileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnClientUsernameRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	clientUsername string
	body           *MsgVpnClientUsername
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnClientUsernameRequest) Body(body MsgVpnClientUsername) AllApiApiUpdateMsgVpnClientUsernameRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnClientUsernameRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnClientUsernameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnClientUsernameRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnClientUsernameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnClientUsernameRequest) Execute() (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnClientUsernameExecute(r)
}

/*
 * UpdateMsgVpnClientUsername Update a Client Username object.
 * Update a Client Username object. Any attribute missing from the request will be left unchanged.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x||
clientProfileName||||x||
clientUsername|x|x||||
msgVpnName|x|x||||
password|||x|||x



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param clientUsername The name of the Client Username.
 * @return AllApiApiUpdateMsgVpnClientUsernameRequest
*/
func (a *AllApiService) UpdateMsgVpnClientUsername(ctx _context.Context, msgVpnName string, clientUsername string) AllApiApiUpdateMsgVpnClientUsernameRequest {
	return AllApiApiUpdateMsgVpnClientUsernameRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		clientUsername: clientUsername,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnClientUsernameResponse
 */
func (a *AllApiService) UpdateMsgVpnClientUsernameExecute(r AllApiApiUpdateMsgVpnClientUsernameRequest) (MsgVpnClientUsernameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnClientUsernameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnClientUsername")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUsername"+"}", _neturl.PathEscape(parameterToString(r.clientUsername, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnDistributedCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	body           *MsgVpnDistributedCache
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnDistributedCacheRequest) Body(body MsgVpnDistributedCache) AllApiApiUpdateMsgVpnDistributedCacheRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnDistributedCacheRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnDistributedCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnDistributedCacheRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnDistributedCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnDistributedCacheRequest) Execute() (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnDistributedCacheExecute(r)
}

/*
 * UpdateMsgVpnDistributedCache Update a Distributed Cache object.
 * Update a Distributed Cache object. Any attribute missing from the request will be left unchanged.

A Distributed Cache is a collection of one or more Cache Clusters that belong to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured to subscribe to a different set of topics. This effectively divides up the configured topic space, to provide scaling to very large topic spaces or very high cached message throughput.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnDistributedCache|scheduledDeleteMsgDayList|scheduledDeleteMsgTimeList|
MsgVpnDistributedCache|scheduledDeleteMsgTimeList|scheduledDeleteMsgDayList|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @return AllApiApiUpdateMsgVpnDistributedCacheRequest
*/
func (a *AllApiService) UpdateMsgVpnDistributedCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiUpdateMsgVpnDistributedCacheRequest {
	return AllApiApiUpdateMsgVpnDistributedCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheResponse
 */
func (a *AllApiService) UpdateMsgVpnDistributedCacheExecute(r AllApiApiUpdateMsgVpnDistributedCacheRequest) (MsgVpnDistributedCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnDistributedCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnDistributedCacheClusterRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	body           *MsgVpnDistributedCacheCluster
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnDistributedCacheClusterRequest) Body(body MsgVpnDistributedCacheCluster) AllApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnDistributedCacheClusterRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnDistributedCacheClusterRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnDistributedCacheClusterRequest) Execute() (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnDistributedCacheClusterExecute(r)
}

/*
 * UpdateMsgVpnDistributedCacheCluster Update a Cache Cluster object.
 * Update a Cache Cluster object. Any attribute missing from the request will be left unchanged.

A Cache Cluster is a collection of one or more Cache Instances that subscribe to exactly the same topics. Cache Instances are grouped together in a Cache Cluster for the purpose of fault tolerance and load balancing. As published messages are received, the message broker message bus sends these live data messages to the Cache Instances in the Cache Cluster. This enables client cache requests to be served by any of Cache Instances in the Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
msgVpnName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @return AllApiApiUpdateMsgVpnDistributedCacheClusterRequest
*/
func (a *AllApiService) UpdateMsgVpnDistributedCacheCluster(ctx _context.Context, msgVpnName string, cacheName string, clusterName string) AllApiApiUpdateMsgVpnDistributedCacheClusterRequest {
	return AllApiApiUpdateMsgVpnDistributedCacheClusterRequest{
		ApiService:  a,
		ctx:         ctx,
		msgVpnName:  msgVpnName,
		cacheName:   cacheName,
		clusterName: clusterName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterResponse
 */
func (a *AllApiService) UpdateMsgVpnDistributedCacheClusterExecute(r AllApiApiUpdateMsgVpnDistributedCacheClusterRequest) (MsgVpnDistributedCacheClusterResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnDistributedCacheCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	clusterName    string
	instanceName   string
	body           *MsgVpnDistributedCacheClusterInstance
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) Body(body MsgVpnDistributedCacheClusterInstance) AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) Execute() (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnDistributedCacheClusterInstanceExecute(r)
}

/*
 * UpdateMsgVpnDistributedCacheClusterInstance Update a Cache Instance object.
 * Update a Cache Instance object. Any attribute missing from the request will be left unchanged.

A Cache Instance is a single Cache process that belongs to a single Cache Cluster. A Cache Instance object provisioned on the broker is used to disseminate configuration information to the Cache process. Cache Instances listen for and cache live data messages that match the topic subscriptions configured for their parent Cache Cluster.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
clusterName|x|x||||
instanceName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the Distributed Cache.
 * @param clusterName The name of the Cache Cluster.
 * @param instanceName The name of the Cache Instance.
 * @return AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest
*/
func (a *AllApiService) UpdateMsgVpnDistributedCacheClusterInstance(ctx _context.Context, msgVpnName string, cacheName string, clusterName string, instanceName string) AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest {
	return AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest{
		ApiService:   a,
		ctx:          ctx,
		msgVpnName:   msgVpnName,
		cacheName:    cacheName,
		clusterName:  clusterName,
		instanceName: instanceName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDistributedCacheClusterInstanceResponse
 */
func (a *AllApiService) UpdateMsgVpnDistributedCacheClusterInstanceExecute(r AllApiApiUpdateMsgVpnDistributedCacheClusterInstanceRequest) (MsgVpnDistributedCacheClusterInstanceResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDistributedCacheClusterInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnDistributedCacheClusterInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterName"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceName"+"}", _neturl.PathEscape(parameterToString(r.instanceName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnDmrBridgeRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	remoteNodeName string
	body           *MsgVpnDmrBridge
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnDmrBridgeRequest) Body(body MsgVpnDmrBridge) AllApiApiUpdateMsgVpnDmrBridgeRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnDmrBridgeRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnDmrBridgeRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnDmrBridgeRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnDmrBridgeRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnDmrBridgeRequest) Execute() (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnDmrBridgeExecute(r)
}

/*
 * UpdateMsgVpnDmrBridge Update a DMR Bridge object.
 * Update a DMR Bridge object. Any attribute missing from the request will be left unchanged.

A DMR Bridge is required to establish a data channel over a corresponding external link to the remote node for a given Message VPN. Each DMR Bridge identifies which external link the Message VPN should use, and what the name of the equivalent Message VPN at the remote node is.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
remoteNodeName|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param remoteNodeName The name of the node at the remote end of the DMR Bridge.
 * @return AllApiApiUpdateMsgVpnDmrBridgeRequest
*/
func (a *AllApiService) UpdateMsgVpnDmrBridge(ctx _context.Context, msgVpnName string, remoteNodeName string) AllApiApiUpdateMsgVpnDmrBridgeRequest {
	return AllApiApiUpdateMsgVpnDmrBridgeRequest{
		ApiService:     a,
		ctx:            ctx,
		msgVpnName:     msgVpnName,
		remoteNodeName: remoteNodeName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnDmrBridgeResponse
 */
func (a *AllApiService) UpdateMsgVpnDmrBridgeExecute(r AllApiApiUpdateMsgVpnDmrBridgeRequest) (MsgVpnDmrBridgeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnDmrBridgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnDmrBridge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"remoteNodeName"+"}", _neturl.PathEscape(parameterToString(r.remoteNodeName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	connectionFactoryName string
	body                  *MsgVpnJndiConnectionFactory
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest) Body(body MsgVpnJndiConnectionFactory) AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest) Execute() (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnJndiConnectionFactoryExecute(r)
}

/*
 * UpdateMsgVpnJndiConnectionFactory Update a JNDI Connection Factory object.
 * Update a JNDI Connection Factory object. Any attribute missing from the request will be left unchanged.

The message broker provides an internal JNDI store for provisioned Connection Factory objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param connectionFactoryName The name of the JMS Connection Factory.
 * @return AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest
*/
func (a *AllApiService) UpdateMsgVpnJndiConnectionFactory(ctx _context.Context, msgVpnName string, connectionFactoryName string) AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest {
	return AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		connectionFactoryName: connectionFactoryName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiConnectionFactoryResponse
 */
func (a *AllApiService) UpdateMsgVpnJndiConnectionFactoryExecute(r AllApiApiUpdateMsgVpnJndiConnectionFactoryRequest) (MsgVpnJndiConnectionFactoryResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiConnectionFactoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnJndiConnectionFactory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionFactoryName"+"}", _neturl.PathEscape(parameterToString(r.connectionFactoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnJndiQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	body           *MsgVpnJndiQueue
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnJndiQueueRequest) Body(body MsgVpnJndiQueue) AllApiApiUpdateMsgVpnJndiQueueRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnJndiQueueRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnJndiQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnJndiQueueRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnJndiQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnJndiQueueRequest) Execute() (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnJndiQueueExecute(r)
}

/*
 * UpdateMsgVpnJndiQueue Update a JNDI Queue object.
 * Update a JNDI Queue object. Any attribute missing from the request will be left unchanged.

The message broker provides an internal JNDI store for provisioned Queue objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The JNDI name of the JMS Queue.
 * @return AllApiApiUpdateMsgVpnJndiQueueRequest
*/
func (a *AllApiService) UpdateMsgVpnJndiQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiUpdateMsgVpnJndiQueueRequest {
	return AllApiApiUpdateMsgVpnJndiQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiQueueResponse
 */
func (a *AllApiService) UpdateMsgVpnJndiQueueExecute(r AllApiApiUpdateMsgVpnJndiQueueRequest) (MsgVpnJndiQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnJndiQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiQueues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnJndiTopicRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	topicName      string
	body           *MsgVpnJndiTopic
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnJndiTopicRequest) Body(body MsgVpnJndiTopic) AllApiApiUpdateMsgVpnJndiTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnJndiTopicRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnJndiTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnJndiTopicRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnJndiTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnJndiTopicRequest) Execute() (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnJndiTopicExecute(r)
}

/*
 * UpdateMsgVpnJndiTopic Update a JNDI Topic object.
 * Update a JNDI Topic object. Any attribute missing from the request will be left unchanged.

The message broker provides an internal JNDI store for provisioned Topic objects that clients can access through JNDI lookups.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.2.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicName The JNDI name of the JMS Topic.
 * @return AllApiApiUpdateMsgVpnJndiTopicRequest
*/
func (a *AllApiService) UpdateMsgVpnJndiTopic(ctx _context.Context, msgVpnName string, topicName string) AllApiApiUpdateMsgVpnJndiTopicRequest {
	return AllApiApiUpdateMsgVpnJndiTopicRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		topicName:  topicName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnJndiTopicResponse
 */
func (a *AllApiService) UpdateMsgVpnJndiTopicExecute(r AllApiApiUpdateMsgVpnJndiTopicRequest) (MsgVpnJndiTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnJndiTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnJndiTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/jndiTopics/{topicName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicName"+"}", _neturl.PathEscape(parameterToString(r.topicName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnMqttRetainCacheRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	cacheName      string
	body           *MsgVpnMqttRetainCache
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnMqttRetainCacheRequest) Body(body MsgVpnMqttRetainCache) AllApiApiUpdateMsgVpnMqttRetainCacheRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnMqttRetainCacheRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnMqttRetainCacheRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnMqttRetainCacheRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnMqttRetainCacheRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnMqttRetainCacheRequest) Execute() (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnMqttRetainCacheExecute(r)
}

/*
 * UpdateMsgVpnMqttRetainCache Update an MQTT Retain Cache object.
 * Update an MQTT Retain Cache object. Any attribute missing from the request will be left unchanged.

Using MQTT retained messages allows publishing MQTT clients to indicate that a message must be stored for later delivery to subscribing clients when those subscribing clients add subscriptions matching the retained message's topic. An MQTT Retain Cache processes all retained messages for a Message VPN.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
cacheName|x|x||||
msgVpnName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.11.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param cacheName The name of the MQTT Retain Cache.
 * @return AllApiApiUpdateMsgVpnMqttRetainCacheRequest
*/
func (a *AllApiService) UpdateMsgVpnMqttRetainCache(ctx _context.Context, msgVpnName string, cacheName string) AllApiApiUpdateMsgVpnMqttRetainCacheRequest {
	return AllApiApiUpdateMsgVpnMqttRetainCacheRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		cacheName:  cacheName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttRetainCacheResponse
 */
func (a *AllApiService) UpdateMsgVpnMqttRetainCacheExecute(r AllApiApiUpdateMsgVpnMqttRetainCacheRequest) (MsgVpnMqttRetainCacheResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttRetainCacheResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnMqttRetainCache")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cacheName"+"}", _neturl.PathEscape(parameterToString(r.cacheName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnMqttSessionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	body                     *MsgVpnMqttSession
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiUpdateMsgVpnMqttSessionRequest) Body(body MsgVpnMqttSession) AllApiApiUpdateMsgVpnMqttSessionRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnMqttSessionRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnMqttSessionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnMqttSessionRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnMqttSessionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnMqttSessionRequest) Execute() (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnMqttSessionExecute(r)
}

/*
 * UpdateMsgVpnMqttSession Update an MQTT Session object.
 * Update an MQTT Session object. Any attribute missing from the request will be left unchanged.

An MQTT Session object is a virtual representation of an MQTT client connection. An MQTT session holds the state of an MQTT client (that is, it is used to contain a client's QoS 0 and QoS 1 subscription sets and any undelivered QoS 1 messages).


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
owner||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @return AllApiApiUpdateMsgVpnMqttSessionRequest
*/
func (a *AllApiService) UpdateMsgVpnMqttSession(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string) AllApiApiUpdateMsgVpnMqttSessionRequest {
	return AllApiApiUpdateMsgVpnMqttSessionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionResponse
 */
func (a *AllApiService) UpdateMsgVpnMqttSessionExecute(r AllApiApiUpdateMsgVpnMqttSessionRequest) (MsgVpnMqttSessionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnMqttSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest struct {
	ctx                      _context.Context
	ApiService               *AllApiService
	msgVpnName               string
	mqttSessionClientId      string
	mqttSessionVirtualRouter string
	subscriptionTopic        string
	body                     *MsgVpnMqttSessionSubscription
	opaquePassword           *string
	select_                  *[]string
}

func (r AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) Body(body MsgVpnMqttSessionSubscription) AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) Execute() (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnMqttSessionSubscriptionExecute(r)
}

/*
 * UpdateMsgVpnMqttSessionSubscription Update a Subscription object.
 * Update a Subscription object. Any attribute missing from the request will be left unchanged.

An MQTT session contains a client's QoS 0 and QoS 1 subscription sets. On creation, a subscription defaults to QoS 0.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x||||
mqttSessionVirtualRouter|x|x||||
msgVpnName|x|x||||
subscriptionTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param mqttSessionClientId The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
 * @param mqttSessionVirtualRouter The virtual router of the MQTT Session.
 * @param subscriptionTopic The MQTT subscription topic.
 * @return AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest
*/
func (a *AllApiService) UpdateMsgVpnMqttSessionSubscription(ctx _context.Context, msgVpnName string, mqttSessionClientId string, mqttSessionVirtualRouter string, subscriptionTopic string) AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest {
	return AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest{
		ApiService:               a,
		ctx:                      ctx,
		msgVpnName:               msgVpnName,
		mqttSessionClientId:      mqttSessionClientId,
		mqttSessionVirtualRouter: mqttSessionVirtualRouter,
		subscriptionTopic:        subscriptionTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnMqttSessionSubscriptionResponse
 */
func (a *AllApiService) UpdateMsgVpnMqttSessionSubscriptionExecute(r AllApiApiUpdateMsgVpnMqttSessionSubscriptionRequest) (MsgVpnMqttSessionSubscriptionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnMqttSessionSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnMqttSessionSubscription")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionClientId"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionClientId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mqttSessionVirtualRouter"+"}", _neturl.PathEscape(parameterToString(r.mqttSessionVirtualRouter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionTopic"+"}", _neturl.PathEscape(parameterToString(r.subscriptionTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnQueueRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	queueName      string
	body           *MsgVpnQueue
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnQueueRequest) Body(body MsgVpnQueue) AllApiApiUpdateMsgVpnQueueRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnQueueRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnQueueRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnQueueRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnQueueRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnQueueRequest) Execute() (MsgVpnQueueResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnQueueExecute(r)
}

/*
 * UpdateMsgVpnQueue Update a Queue object.
 * Update a Queue object. Any attribute missing from the request will be left unchanged.

A Queue acts as both a destination that clients can publish messages to, and as an endpoint that clients can bind consumers to and consume messages from.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
queueName|x|x||||
respectMsgPriorityEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueName The name of the Queue.
 * @return AllApiApiUpdateMsgVpnQueueRequest
*/
func (a *AllApiService) UpdateMsgVpnQueue(ctx _context.Context, msgVpnName string, queueName string) AllApiApiUpdateMsgVpnQueueRequest {
	return AllApiApiUpdateMsgVpnQueueRequest{
		ApiService: a,
		ctx:        ctx,
		msgVpnName: msgVpnName,
		queueName:  queueName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueResponse
 */
func (a *AllApiService) UpdateMsgVpnQueueExecute(r AllApiApiUpdateMsgVpnQueueRequest) (MsgVpnQueueResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnQueue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queues/{queueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueName"+"}", _neturl.PathEscape(parameterToString(r.queueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnQueueTemplateRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	queueTemplateName string
	body              *MsgVpnQueueTemplate
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateMsgVpnQueueTemplateRequest) Body(body MsgVpnQueueTemplate) AllApiApiUpdateMsgVpnQueueTemplateRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnQueueTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnQueueTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnQueueTemplateRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnQueueTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnQueueTemplateRequest) Execute() (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnQueueTemplateExecute(r)
}

/*
 * UpdateMsgVpnQueueTemplate Update a Queue Template object.
 * Update a Queue Template object. Any attribute missing from the request will be left unchanged.

A Queue Template provides a mechanism for specifying the initial state for client created queues.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param queueTemplateName The name of the Queue Template.
 * @return AllApiApiUpdateMsgVpnQueueTemplateRequest
*/
func (a *AllApiService) UpdateMsgVpnQueueTemplate(ctx _context.Context, msgVpnName string, queueTemplateName string) AllApiApiUpdateMsgVpnQueueTemplateRequest {
	return AllApiApiUpdateMsgVpnQueueTemplateRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		queueTemplateName: queueTemplateName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnQueueTemplateResponse
 */
func (a *AllApiService) UpdateMsgVpnQueueTemplateExecute(r AllApiApiUpdateMsgVpnQueueTemplateRequest) (MsgVpnQueueTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnQueueTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnQueueTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueTemplateName"+"}", _neturl.PathEscape(parameterToString(r.queueTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnReplayLogRequest struct {
	ctx            _context.Context
	ApiService     *AllApiService
	msgVpnName     string
	replayLogName  string
	body           *MsgVpnReplayLog
	opaquePassword *string
	select_        *[]string
}

func (r AllApiApiUpdateMsgVpnReplayLogRequest) Body(body MsgVpnReplayLog) AllApiApiUpdateMsgVpnReplayLogRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnReplayLogRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnReplayLogRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnReplayLogRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnReplayLogRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnReplayLogRequest) Execute() (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnReplayLogExecute(r)
}

/*
 * UpdateMsgVpnReplayLog Update a Replay Log object.
 * Update a Replay Log object. Any attribute missing from the request will be left unchanged.

When the Message Replay feature is enabled, message brokers store persistent messages in a Replay Log. These messages are kept until the log is full, after which the oldest messages are removed to free up space for new messages.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replayLogName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.10.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replayLogName The name of the Replay Log.
 * @return AllApiApiUpdateMsgVpnReplayLogRequest
*/
func (a *AllApiService) UpdateMsgVpnReplayLog(ctx _context.Context, msgVpnName string, replayLogName string) AllApiApiUpdateMsgVpnReplayLogRequest {
	return AllApiApiUpdateMsgVpnReplayLogRequest{
		ApiService:    a,
		ctx:           ctx,
		msgVpnName:    msgVpnName,
		replayLogName: replayLogName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplayLogResponse
 */
func (a *AllApiService) UpdateMsgVpnReplayLogExecute(r AllApiApiUpdateMsgVpnReplayLogRequest) (MsgVpnReplayLogResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplayLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnReplayLog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replayLogName"+"}", _neturl.PathEscape(parameterToString(r.replayLogName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnReplicatedTopicRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	msgVpnName      string
	replicatedTopic string
	body            *MsgVpnReplicatedTopic
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiUpdateMsgVpnReplicatedTopicRequest) Body(body MsgVpnReplicatedTopic) AllApiApiUpdateMsgVpnReplicatedTopicRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnReplicatedTopicRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnReplicatedTopicRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnReplicatedTopicRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnReplicatedTopicRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnReplicatedTopicRequest) Execute() (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnReplicatedTopicExecute(r)
}

/*
 * UpdateMsgVpnReplicatedTopic Update a Replicated Topic object.
 * Update a Replicated Topic object. Any attribute missing from the request will be left unchanged.

To indicate which messages should be replicated between the active and standby site, a Replicated Topic subscription must be configured on a Message VPN. If a published message matches both a replicated topic and an endpoint on the active site, then the message is replicated to the standby site.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
replicatedTopic|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param replicatedTopic The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
 * @return AllApiApiUpdateMsgVpnReplicatedTopicRequest
*/
func (a *AllApiService) UpdateMsgVpnReplicatedTopic(ctx _context.Context, msgVpnName string, replicatedTopic string) AllApiApiUpdateMsgVpnReplicatedTopicRequest {
	return AllApiApiUpdateMsgVpnReplicatedTopicRequest{
		ApiService:      a,
		ctx:             ctx,
		msgVpnName:      msgVpnName,
		replicatedTopic: replicatedTopic,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnReplicatedTopicResponse
 */
func (a *AllApiService) UpdateMsgVpnReplicatedTopicExecute(r AllApiApiUpdateMsgVpnReplicatedTopicRequest) (MsgVpnReplicatedTopicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnReplicatedTopicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnReplicatedTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"replicatedTopic"+"}", _neturl.PathEscape(parameterToString(r.replicatedTopic, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnRestDeliveryPointRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	body                  *MsgVpnRestDeliveryPoint
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiUpdateMsgVpnRestDeliveryPointRequest) Body(body MsgVpnRestDeliveryPoint) AllApiApiUpdateMsgVpnRestDeliveryPointRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnRestDeliveryPointRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnRestDeliveryPointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnRestDeliveryPointRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnRestDeliveryPointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnRestDeliveryPointRequest) Execute() (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointExecute(r)
}

/*
 * UpdateMsgVpnRestDeliveryPoint Update a REST Delivery Point object.
 * Update a REST Delivery Point object. Any attribute missing from the request will be left unchanged.

A REST Delivery Point manages delivery of messages from queues to a named list of REST Consumers.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientProfileName||||x||
msgVpnName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @return AllApiApiUpdateMsgVpnRestDeliveryPointRequest
*/
func (a *AllApiService) UpdateMsgVpnRestDeliveryPoint(ctx _context.Context, msgVpnName string, restDeliveryPointName string) AllApiApiUpdateMsgVpnRestDeliveryPointRequest {
	return AllApiApiUpdateMsgVpnRestDeliveryPointRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointResponse
 */
func (a *AllApiService) UpdateMsgVpnRestDeliveryPointExecute(r AllApiApiUpdateMsgVpnRestDeliveryPointRequest) (MsgVpnRestDeliveryPointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnRestDeliveryPoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	queueBindingName      string
	body                  *MsgVpnRestDeliveryPointQueueBinding
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) Body(body MsgVpnRestDeliveryPointQueueBinding) AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) Execute() (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointQueueBindingExecute(r)
}

/*
 * UpdateMsgVpnRestDeliveryPointQueueBinding Update a Queue Binding object.
 * Update a Queue Binding object. Any attribute missing from the request will be left unchanged.

A Queue Binding for a REST Delivery Point attracts messages to be delivered to REST consumers. If the queue does not exist it can be created subsequently, and once the queue is operational the broker performs the queue binding. Removing the queue binding does not delete the queue itself. Similarly, removing the queue does not remove the queue binding, which fails until the queue is recreated or the queue binding is deleted.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
queueBindingName|x|x||||
restDeliveryPointName|x|x||||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param queueBindingName The name of a queue in the Message VPN.
 * @return AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest
*/
func (a *AllApiService) UpdateMsgVpnRestDeliveryPointQueueBinding(ctx _context.Context, msgVpnName string, restDeliveryPointName string, queueBindingName string) AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest {
	return AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		queueBindingName:      queueBindingName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointQueueBindingResponse
 */
func (a *AllApiService) UpdateMsgVpnRestDeliveryPointQueueBindingExecute(r AllApiApiUpdateMsgVpnRestDeliveryPointQueueBindingRequest) (MsgVpnRestDeliveryPointQueueBindingResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointQueueBindingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnRestDeliveryPointQueueBinding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueBindingName"+"}", _neturl.PathEscape(parameterToString(r.queueBindingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest struct {
	ctx                   _context.Context
	ApiService            *AllApiService
	msgVpnName            string
	restDeliveryPointName string
	restConsumerName      string
	body                  *MsgVpnRestDeliveryPointRestConsumer
	opaquePassword        *string
	select_               *[]string
}

func (r AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) Body(body MsgVpnRestDeliveryPointRestConsumer) AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) Execute() (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnRestDeliveryPointRestConsumerExecute(r)
}

/*
 * UpdateMsgVpnRestDeliveryPointRestConsumer Update a REST Consumer object.
 * Update a REST Consumer object. Any attribute missing from the request will be left unchanged.

REST Consumer objects establish HTTP connectivity to REST consumer applications who wish to receive messages from a broker.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
authenticationClientCertContent|||x|x||x
authenticationClientCertPassword|||x|x||
authenticationHttpBasicPassword|||x|x||x
authenticationHttpBasicUsername||||x||
authenticationHttpHeaderValue|||x|||x
authenticationOauthClientId||||x||
authenticationOauthClientScope||||x||
authenticationOauthClientSecret|||x|x||x
authenticationOauthClientTokenEndpoint||||x||
authenticationOauthJwtSecretKey|||x|x||x
authenticationOauthJwtTokenEndpoint||||x||
authenticationScheme||||x||
msgVpnName|x|x||||
outgoingConnectionCount||||x||
remoteHost||||x||
remotePort||||x||
restConsumerName|x|x||||
restDeliveryPointName|x|x||||
tlsCipherSuiteList||||x||
tlsEnabled||||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param restDeliveryPointName The name of the REST Delivery Point.
 * @param restConsumerName The name of the REST Consumer.
 * @return AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest
*/
func (a *AllApiService) UpdateMsgVpnRestDeliveryPointRestConsumer(ctx _context.Context, msgVpnName string, restDeliveryPointName string, restConsumerName string) AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest {
	return AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest{
		ApiService:            a,
		ctx:                   ctx,
		msgVpnName:            msgVpnName,
		restDeliveryPointName: restDeliveryPointName,
		restConsumerName:      restConsumerName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnRestDeliveryPointRestConsumerResponse
 */
func (a *AllApiService) UpdateMsgVpnRestDeliveryPointRestConsumerExecute(r AllApiApiUpdateMsgVpnRestDeliveryPointRestConsumerRequest) (MsgVpnRestDeliveryPointRestConsumerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnRestDeliveryPointRestConsumerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnRestDeliveryPointRestConsumer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restDeliveryPointName"+"}", _neturl.PathEscape(parameterToString(r.restDeliveryPointName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"restConsumerName"+"}", _neturl.PathEscape(parameterToString(r.restConsumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnTopicEndpointRequest struct {
	ctx               _context.Context
	ApiService        *AllApiService
	msgVpnName        string
	topicEndpointName string
	body              *MsgVpnTopicEndpoint
	opaquePassword    *string
	select_           *[]string
}

func (r AllApiApiUpdateMsgVpnTopicEndpointRequest) Body(body MsgVpnTopicEndpoint) AllApiApiUpdateMsgVpnTopicEndpointRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnTopicEndpointRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnTopicEndpointRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnTopicEndpointRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnTopicEndpointRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnTopicEndpointRequest) Execute() (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnTopicEndpointExecute(r)
}

/*
 * UpdateMsgVpnTopicEndpoint Update a Topic Endpoint object.
 * Update a Topic Endpoint object. Any attribute missing from the request will be left unchanged.

A Topic Endpoint attracts messages published to a topic for which the Topic Endpoint has a matching topic subscription. The topic subscription for the Topic Endpoint is specified in the client request to bind a Flow to that Topic Endpoint. Queues are significantly more flexible than Topic Endpoints and are the recommended approach for most applications. The use of Topic Endpoints should be restricted to JMS applications.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
accessType||||x||
msgVpnName|x|x||||
owner||||x||
permission||||x||
respectMsgPriorityEnabled||||x||
topicEndpointName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.1.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointName The name of the Topic Endpoint.
 * @return AllApiApiUpdateMsgVpnTopicEndpointRequest
*/
func (a *AllApiService) UpdateMsgVpnTopicEndpoint(ctx _context.Context, msgVpnName string, topicEndpointName string) AllApiApiUpdateMsgVpnTopicEndpointRequest {
	return AllApiApiUpdateMsgVpnTopicEndpointRequest{
		ApiService:        a,
		ctx:               ctx,
		msgVpnName:        msgVpnName,
		topicEndpointName: topicEndpointName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointResponse
 */
func (a *AllApiService) UpdateMsgVpnTopicEndpointExecute(r AllApiApiUpdateMsgVpnTopicEndpointRequest) (MsgVpnTopicEndpointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnTopicEndpoint")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest struct {
	ctx                       _context.Context
	ApiService                *AllApiService
	msgVpnName                string
	topicEndpointTemplateName string
	body                      *MsgVpnTopicEndpointTemplate
	opaquePassword            *string
	select_                   *[]string
}

func (r AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest) Body(body MsgVpnTopicEndpointTemplate) AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest) Select_(select_ []string) AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest) Execute() (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateMsgVpnTopicEndpointTemplateExecute(r)
}

/*
 * UpdateMsgVpnTopicEndpointTemplate Update a Topic Endpoint Template object.
 * Update a Topic Endpoint Template object. Any attribute missing from the request will be left unchanged.

A Topic Endpoint Template provides a mechanism for specifying the initial state for client created topic endpoints.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x||||
topicEndpointTemplateName|x|x||||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.14.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param msgVpnName The name of the Message VPN.
 * @param topicEndpointTemplateName The name of the Topic Endpoint Template.
 * @return AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest
*/
func (a *AllApiService) UpdateMsgVpnTopicEndpointTemplate(ctx _context.Context, msgVpnName string, topicEndpointTemplateName string) AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest {
	return AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest{
		ApiService:                a,
		ctx:                       ctx,
		msgVpnName:                msgVpnName,
		topicEndpointTemplateName: topicEndpointTemplateName,
	}
}

/*
 * Execute executes the request
 * @return MsgVpnTopicEndpointTemplateResponse
 */
func (a *AllApiService) UpdateMsgVpnTopicEndpointTemplateExecute(r AllApiApiUpdateMsgVpnTopicEndpointTemplateRequest) (MsgVpnTopicEndpointTemplateResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MsgVpnTopicEndpointTemplateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateMsgVpnTopicEndpointTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"msgVpnName"+"}", _neturl.PathEscape(parameterToString(r.msgVpnName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"topicEndpointTemplateName"+"}", _neturl.PathEscape(parameterToString(r.topicEndpointTemplateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AllApiApiUpdateVirtualHostnameRequest struct {
	ctx             _context.Context
	ApiService      *AllApiService
	virtualHostname string
	body            *VirtualHostname
	opaquePassword  *string
	select_         *[]string
}

func (r AllApiApiUpdateVirtualHostnameRequest) Body(body VirtualHostname) AllApiApiUpdateVirtualHostnameRequest {
	r.body = &body
	return r
}
func (r AllApiApiUpdateVirtualHostnameRequest) OpaquePassword(opaquePassword string) AllApiApiUpdateVirtualHostnameRequest {
	r.opaquePassword = &opaquePassword
	return r
}
func (r AllApiApiUpdateVirtualHostnameRequest) Select_(select_ []string) AllApiApiUpdateVirtualHostnameRequest {
	r.select_ = &select_
	return r
}

func (r AllApiApiUpdateVirtualHostnameRequest) Execute() (VirtualHostnameResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateVirtualHostnameExecute(r)
}

/*
 * UpdateVirtualHostname Update a Virtual Hostname object.
 * Update a Virtual Hostname object. Any attribute missing from the request will be left unchanged.

A Virtual Hostname is a provisioned object on a message broker that contains a Virtual Hostname to Message VPN mapping.

Clients which connect to a global (as opposed to per Message VPN) port and provides this hostname will be directed to its corresponding Message VPN. A case-insentive match is performed on the full client-provided hostname against the configured virtual-hostname.

This mechanism is only supported for hostnames provided through the Server Name Indication (SNI) extension of TLS.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
virtualHostname|x|x||||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.17.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param virtualHostname The virtual hostname.
 * @return AllApiApiUpdateVirtualHostnameRequest
*/
func (a *AllApiService) UpdateVirtualHostname(ctx _context.Context, virtualHostname string) AllApiApiUpdateVirtualHostnameRequest {
	return AllApiApiUpdateVirtualHostnameRequest{
		ApiService:      a,
		ctx:             ctx,
		virtualHostname: virtualHostname,
	}
}

/*
 * Execute executes the request
 * @return VirtualHostnameResponse
 */
func (a *AllApiService) UpdateVirtualHostnameExecute(r AllApiApiUpdateVirtualHostnameRequest) (VirtualHostnameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VirtualHostnameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllApiService.UpdateVirtualHostname")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualHostnames/{virtualHostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualHostname"+"}", _neturl.PathEscape(parameterToString(r.virtualHostname, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.opaquePassword != nil {
		localVarQueryParams.Add("opaquePassword", parameterToString(*r.opaquePassword, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v SempMetaOnlyResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
